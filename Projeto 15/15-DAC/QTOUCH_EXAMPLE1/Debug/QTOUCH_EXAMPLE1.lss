
QTOUCH_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005164  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405164  00405164  0000d164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000086c  20000000  0040516c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000002f4  2000086c  004059d8  0001086c  2**2
                  ALLOC
  4 .stack        00003000  20000b60  00405ccc  0001086c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0001086c  2**0
                  CONTENTS, READONLY
  6 .comment      00000085  00000000  00000000  00010896  2**0
                  CONTENTS, READONLY
  7 .debug_info   00009ad8  00000000  00000000  0001091b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019f9  00000000  00000000  0001a3f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003e13  00000000  00000000  0001bdec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008a8  00000000  00000000  0001fbff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007f0  00000000  00000000  000204a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012969  00000000  00000000  00020c97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000932d  00000000  00000000  00033600  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000537b9  00000000  00000000  0003c92d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001f14  00000000  00000000  000900e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003b60 	.word	0x20003b60
  400004:	00400665 	.word	0x00400665
  400008:	00400661 	.word	0x00400661
  40000c:	00400661 	.word	0x00400661
  400010:	00400661 	.word	0x00400661
  400014:	00400661 	.word	0x00400661
  400018:	00400661 	.word	0x00400661
	...
  40002c:	00400661 	.word	0x00400661
  400030:	00400661 	.word	0x00400661
  400034:	00000000 	.word	0x00000000
  400038:	00400661 	.word	0x00400661
  40003c:	00400a15 	.word	0x00400a15
  400040:	00400661 	.word	0x00400661
  400044:	00400661 	.word	0x00400661
  400048:	00400661 	.word	0x00400661
  40004c:	00400661 	.word	0x00400661
  400050:	00400661 	.word	0x00400661
  400054:	00400661 	.word	0x00400661
  400058:	00400661 	.word	0x00400661
  40005c:	00400661 	.word	0x00400661
  400060:	00400661 	.word	0x00400661
  400064:	00400661 	.word	0x00400661
  400068:	00000000 	.word	0x00000000
  40006c:	00400455 	.word	0x00400455
  400070:	00400469 	.word	0x00400469
  400074:	0040047d 	.word	0x0040047d
  400078:	00400661 	.word	0x00400661
  40007c:	00400661 	.word	0x00400661
	...
  400088:	00400661 	.word	0x00400661
  40008c:	00400661 	.word	0x00400661
  400090:	00400661 	.word	0x00400661
  400094:	00400661 	.word	0x00400661
  400098:	00400661 	.word	0x00400661
  40009c:	00400661 	.word	0x00400661
  4000a0:	00400661 	.word	0x00400661
  4000a4:	00400661 	.word	0x00400661
  4000a8:	00400661 	.word	0x00400661
  4000ac:	00400661 	.word	0x00400661
  4000b0:	00400661 	.word	0x00400661
  4000b4:	00400661 	.word	0x00400661
  4000b8:	00400661 	.word	0x00400661
  4000bc:	00400661 	.word	0x00400661
  4000c0:	00400661 	.word	0x00400661
  4000c4:	00400661 	.word	0x00400661
  4000c8:	00400661 	.word	0x00400661

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000086c 	.word	0x2000086c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040516c 	.word	0x0040516c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	0040516c 	.word	0x0040516c
  40011c:	20000870 	.word	0x20000870
  400120:	0040516c 	.word	0x0040516c
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	00400829 	.word	0x00400829
  40016c:	004004f9 	.word	0x004004f9
  400170:	0040054d 	.word	0x0040054d
  400174:	0040055d 	.word	0x0040055d
  400178:	20133f01 	.word	0x20133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	0040056d 	.word	0x0040056d
  400184:	00400491 	.word	0x00400491
  400188:	00400715 	.word	0x00400715

0040018c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40018c:	b9a8      	cbnz	r0, 4001ba <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40018e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400192:	460c      	mov	r4, r1
  400194:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400196:	2a00      	cmp	r2, #0
  400198:	dd0a      	ble.n	4001b0 <_read+0x24>
  40019a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40019c:	4e08      	ldr	r6, [pc, #32]	; (4001c0 <_read+0x34>)
  40019e:	4d09      	ldr	r5, [pc, #36]	; (4001c4 <_read+0x38>)
  4001a0:	6830      	ldr	r0, [r6, #0]
  4001a2:	4621      	mov	r1, r4
  4001a4:	682b      	ldr	r3, [r5, #0]
  4001a6:	4798      	blx	r3
		ptr++;
  4001a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001aa:	42bc      	cmp	r4, r7
  4001ac:	d1f8      	bne.n	4001a0 <_read+0x14>
  4001ae:	e001      	b.n	4001b4 <_read+0x28>
  4001b0:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  4001b4:	4640      	mov	r0, r8
  4001b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4001ba:	f04f 30ff 	mov.w	r0, #4294967295
  4001be:	4770      	bx	lr
  4001c0:	20000b54 	.word	0x20000b54
  4001c4:	20000b4c 	.word	0x20000b4c

004001c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001c8:	3801      	subs	r0, #1
  4001ca:	2802      	cmp	r0, #2
  4001cc:	d818      	bhi.n	400200 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001d2:	460e      	mov	r6, r1
  4001d4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	b182      	cbz	r2, 4001fa <_write+0x32>
  4001d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400214 <_write+0x4c>
  4001de:	4f0c      	ldr	r7, [pc, #48]	; (400210 <_write+0x48>)
  4001e0:	f8d8 0000 	ldr.w	r0, [r8]
  4001e4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001e8:	683b      	ldr	r3, [r7, #0]
  4001ea:	4798      	blx	r3
  4001ec:	2800      	cmp	r0, #0
  4001ee:	db0a      	blt.n	400206 <_write+0x3e>
  4001f0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001f2:	3c01      	subs	r4, #1
  4001f4:	d1f4      	bne.n	4001e0 <_write+0x18>
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001fa:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4001fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400200:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400204:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400206:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40020e:	bf00      	nop
  400210:	20000b50 	.word	0x20000b50
  400214:	20000b54 	.word	0x20000b54

00400218 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400218:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40021a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40021e:	d02f      	beq.n	400280 <pio_set_peripheral+0x68>
  400220:	d807      	bhi.n	400232 <pio_set_peripheral+0x1a>
  400222:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400226:	d014      	beq.n	400252 <pio_set_peripheral+0x3a>
  400228:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40022c:	d01e      	beq.n	40026c <pio_set_peripheral+0x54>
  40022e:	b939      	cbnz	r1, 400240 <pio_set_peripheral+0x28>
  400230:	4770      	bx	lr
  400232:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400236:	d037      	beq.n	4002a8 <pio_set_peripheral+0x90>
  400238:	d804      	bhi.n	400244 <pio_set_peripheral+0x2c>
  40023a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40023e:	d029      	beq.n	400294 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400240:	6042      	str	r2, [r0, #4]
  400242:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400244:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400248:	d02e      	beq.n	4002a8 <pio_set_peripheral+0x90>
  40024a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40024e:	d02b      	beq.n	4002a8 <pio_set_peripheral+0x90>
  400250:	e7f6      	b.n	400240 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400252:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400254:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400256:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400258:	43d3      	mvns	r3, r2
  40025a:	4021      	ands	r1, r4
  40025c:	4019      	ands	r1, r3
  40025e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400260:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400262:	6f44      	ldr	r4, [r0, #116]	; 0x74
  400264:	4021      	ands	r1, r4
  400266:	400b      	ands	r3, r1
  400268:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40026a:	e01a      	b.n	4002a2 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40026c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40026e:	4313      	orrs	r3, r2
  400270:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400272:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400274:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400276:	400b      	ands	r3, r1
  400278:	ea23 0302 	bic.w	r3, r3, r2
  40027c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40027e:	e7df      	b.n	400240 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400280:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400282:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400284:	400b      	ands	r3, r1
  400286:	ea23 0302 	bic.w	r3, r3, r2
  40028a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40028c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40028e:	4313      	orrs	r3, r2
  400290:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400292:	e7d5      	b.n	400240 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400294:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400296:	4313      	orrs	r3, r2
  400298:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40029a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40029c:	4313      	orrs	r3, r2
  40029e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002a0:	e7ce      	b.n	400240 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4002a2:	6042      	str	r2, [r0, #4]
}
  4002a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop

004002ac <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4002ac:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4002ae:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4002b2:	bf14      	ite	ne
  4002b4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4002b6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4002b8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4002bc:	bf14      	ite	ne
  4002be:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4002c0:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4002c2:	f012 0f02 	tst.w	r2, #2
  4002c6:	d002      	beq.n	4002ce <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  4002c8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4002cc:	e004      	b.n	4002d8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4002ce:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4002d2:	bf18      	it	ne
  4002d4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4002d8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4002da:	6001      	str	r1, [r0, #0]
  4002dc:	4770      	bx	lr
  4002de:	bf00      	nop

004002e0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4002e0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4002e2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4002e4:	9c01      	ldr	r4, [sp, #4]
  4002e6:	b10c      	cbz	r4, 4002ec <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4002e8:	6641      	str	r1, [r0, #100]	; 0x64
  4002ea:	e000      	b.n	4002ee <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4002ec:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4002ee:	b10b      	cbz	r3, 4002f4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4002f0:	6501      	str	r1, [r0, #80]	; 0x50
  4002f2:	e000      	b.n	4002f6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4002f4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4002f6:	b10a      	cbz	r2, 4002fc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4002f8:	6301      	str	r1, [r0, #48]	; 0x30
  4002fa:	e000      	b.n	4002fe <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4002fc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4002fe:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400300:	6001      	str	r1, [r0, #0]
}
  400302:	f85d 4b04 	ldr.w	r4, [sp], #4
  400306:	4770      	bx	lr

00400308 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400308:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40030a:	4770      	bx	lr

0040030c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40030c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40030e:	4770      	bx	lr

00400310 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400310:	b570      	push	{r4, r5, r6, lr}
  400312:	b082      	sub	sp, #8
  400314:	4606      	mov	r6, r0
  400316:	460d      	mov	r5, r1
  400318:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40031a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  40031e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400322:	d038      	beq.n	400396 <pio_configure_pin_group+0x86>
  400324:	d809      	bhi.n	40033a <pio_configure_pin_group+0x2a>
  400326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40032a:	d01c      	beq.n	400366 <pio_configure_pin_group+0x56>
  40032c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400330:	d025      	beq.n	40037e <pio_configure_pin_group+0x6e>
  400332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400336:	d150      	bne.n	4003da <pio_configure_pin_group+0xca>
  400338:	e009      	b.n	40034e <pio_configure_pin_group+0x3e>
  40033a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40033e:	d03a      	beq.n	4003b6 <pio_configure_pin_group+0xa6>
  400340:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400344:	d037      	beq.n	4003b6 <pio_configure_pin_group+0xa6>
  400346:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40034a:	d030      	beq.n	4003ae <pio_configure_pin_group+0x9e>
  40034c:	e045      	b.n	4003da <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40034e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400352:	462a      	mov	r2, r5
  400354:	4b22      	ldr	r3, [pc, #136]	; (4003e0 <pio_configure_pin_group+0xd0>)
  400356:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400358:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40035c:	bf14      	ite	ne
  40035e:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400360:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400362:	2001      	movs	r0, #1
  400364:	e03a      	b.n	4003dc <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400366:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40036a:	462a      	mov	r2, r5
  40036c:	4b1c      	ldr	r3, [pc, #112]	; (4003e0 <pio_configure_pin_group+0xd0>)
  40036e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400370:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400374:	bf14      	ite	ne
  400376:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400378:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40037a:	2001      	movs	r0, #1
  40037c:	e02e      	b.n	4003dc <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40037e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400382:	462a      	mov	r2, r5
  400384:	4b16      	ldr	r3, [pc, #88]	; (4003e0 <pio_configure_pin_group+0xd0>)
  400386:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400388:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40038c:	bf14      	ite	ne
  40038e:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400390:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400392:	2001      	movs	r0, #1
  400394:	e022      	b.n	4003dc <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400396:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40039a:	462a      	mov	r2, r5
  40039c:	4b10      	ldr	r3, [pc, #64]	; (4003e0 <pio_configure_pin_group+0xd0>)
  40039e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003a0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4003a4:	bf14      	ite	ne
  4003a6:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003a8:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4003aa:	2001      	movs	r0, #1
  4003ac:	e016      	b.n	4003dc <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4003ae:	4b0d      	ldr	r3, [pc, #52]	; (4003e4 <pio_configure_pin_group+0xd4>)
  4003b0:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4003b2:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4003b4:	e012      	b.n	4003dc <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4003b6:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4003ba:	f004 0301 	and.w	r3, r4, #1
  4003be:	9300      	str	r3, [sp, #0]
  4003c0:	4630      	mov	r0, r6
  4003c2:	4629      	mov	r1, r5
  4003c4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4003c8:	bf14      	ite	ne
  4003ca:	2200      	movne	r2, #0
  4003cc:	2201      	moveq	r2, #1
  4003ce:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4003d2:	4c05      	ldr	r4, [pc, #20]	; (4003e8 <pio_configure_pin_group+0xd8>)
  4003d4:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4003d6:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4003d8:	e000      	b.n	4003dc <pio_configure_pin_group+0xcc>

	default:
		return 0;
  4003da:	2000      	movs	r0, #0
	}

	return 1;
}
  4003dc:	b002      	add	sp, #8
  4003de:	bd70      	pop	{r4, r5, r6, pc}
  4003e0:	00400219 	.word	0x00400219
  4003e4:	004002ad 	.word	0x004002ad
  4003e8:	004002e1 	.word	0x004002e1

004003ec <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4003ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4003f0:	4681      	mov	r9, r0
  4003f2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4003f4:	4b12      	ldr	r3, [pc, #72]	; (400440 <pio_handler_process+0x54>)
  4003f6:	4798      	blx	r3
  4003f8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4003fa:	4648      	mov	r0, r9
  4003fc:	4b11      	ldr	r3, [pc, #68]	; (400444 <pio_handler_process+0x58>)
  4003fe:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400400:	4005      	ands	r5, r0
  400402:	d013      	beq.n	40042c <pio_handler_process+0x40>
  400404:	4c10      	ldr	r4, [pc, #64]	; (400448 <pio_handler_process+0x5c>)
  400406:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40040a:	6823      	ldr	r3, [r4, #0]
  40040c:	4543      	cmp	r3, r8
  40040e:	d108      	bne.n	400422 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400410:	6861      	ldr	r1, [r4, #4]
  400412:	4229      	tst	r1, r5
  400414:	d005      	beq.n	400422 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400416:	68e3      	ldr	r3, [r4, #12]
  400418:	4640      	mov	r0, r8
  40041a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40041c:	6863      	ldr	r3, [r4, #4]
  40041e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400422:	42b4      	cmp	r4, r6
  400424:	d002      	beq.n	40042c <pio_handler_process+0x40>
  400426:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400428:	2d00      	cmp	r5, #0
  40042a:	d1ee      	bne.n	40040a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40042c:	4b07      	ldr	r3, [pc, #28]	; (40044c <pio_handler_process+0x60>)
  40042e:	681b      	ldr	r3, [r3, #0]
  400430:	b123      	cbz	r3, 40043c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400432:	4b07      	ldr	r3, [pc, #28]	; (400450 <pio_handler_process+0x64>)
  400434:	681b      	ldr	r3, [r3, #0]
  400436:	b10b      	cbz	r3, 40043c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400438:	4648      	mov	r0, r9
  40043a:	4798      	blx	r3
  40043c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400440:	00400309 	.word	0x00400309
  400444:	0040030d 	.word	0x0040030d
  400448:	2000088c 	.word	0x2000088c
  40044c:	20000b58 	.word	0x20000b58
  400450:	20000888 	.word	0x20000888

00400454 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400454:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400456:	4802      	ldr	r0, [pc, #8]	; (400460 <PIOA_Handler+0xc>)
  400458:	210b      	movs	r1, #11
  40045a:	4b02      	ldr	r3, [pc, #8]	; (400464 <PIOA_Handler+0x10>)
  40045c:	4798      	blx	r3
  40045e:	bd08      	pop	{r3, pc}
  400460:	400e0e00 	.word	0x400e0e00
  400464:	004003ed 	.word	0x004003ed

00400468 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400468:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40046a:	4802      	ldr	r0, [pc, #8]	; (400474 <PIOB_Handler+0xc>)
  40046c:	210c      	movs	r1, #12
  40046e:	4b02      	ldr	r3, [pc, #8]	; (400478 <PIOB_Handler+0x10>)
  400470:	4798      	blx	r3
  400472:	bd08      	pop	{r3, pc}
  400474:	400e1000 	.word	0x400e1000
  400478:	004003ed 	.word	0x004003ed

0040047c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40047c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40047e:	4802      	ldr	r0, [pc, #8]	; (400488 <PIOC_Handler+0xc>)
  400480:	210d      	movs	r1, #13
  400482:	4b02      	ldr	r3, [pc, #8]	; (40048c <PIOC_Handler+0x10>)
  400484:	4798      	blx	r3
  400486:	bd08      	pop	{r3, pc}
  400488:	400e1200 	.word	0x400e1200
  40048c:	004003ed 	.word	0x004003ed

00400490 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400490:	4a18      	ldr	r2, [pc, #96]	; (4004f4 <pmc_switch_mck_to_pllack+0x64>)
  400492:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400498:	4318      	orrs	r0, r3
  40049a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40049c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40049e:	f013 0f08 	tst.w	r3, #8
  4004a2:	d003      	beq.n	4004ac <pmc_switch_mck_to_pllack+0x1c>
  4004a4:	e009      	b.n	4004ba <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4004a6:	3b01      	subs	r3, #1
  4004a8:	d103      	bne.n	4004b2 <pmc_switch_mck_to_pllack+0x22>
  4004aa:	e01e      	b.n	4004ea <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4004b0:	4910      	ldr	r1, [pc, #64]	; (4004f4 <pmc_switch_mck_to_pllack+0x64>)
  4004b2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4004b4:	f012 0f08 	tst.w	r2, #8
  4004b8:	d0f5      	beq.n	4004a6 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4004ba:	4a0e      	ldr	r2, [pc, #56]	; (4004f4 <pmc_switch_mck_to_pllack+0x64>)
  4004bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004be:	f023 0303 	bic.w	r3, r3, #3
  4004c2:	f043 0302 	orr.w	r3, r3, #2
  4004c6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004c8:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4004ca:	f010 0008 	ands.w	r0, r0, #8
  4004ce:	d004      	beq.n	4004da <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4004d0:	2000      	movs	r0, #0
  4004d2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4004d4:	3b01      	subs	r3, #1
  4004d6:	d103      	bne.n	4004e0 <pmc_switch_mck_to_pllack+0x50>
  4004d8:	e009      	b.n	4004ee <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004da:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4004de:	4905      	ldr	r1, [pc, #20]	; (4004f4 <pmc_switch_mck_to_pllack+0x64>)
  4004e0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4004e2:	f012 0f08 	tst.w	r2, #8
  4004e6:	d0f5      	beq.n	4004d4 <pmc_switch_mck_to_pllack+0x44>
  4004e8:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4004ea:	2001      	movs	r0, #1
  4004ec:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4004ee:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4004f0:	4770      	bx	lr
  4004f2:	bf00      	nop
  4004f4:	400e0400 	.word	0x400e0400

004004f8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4004f8:	b138      	cbz	r0, 40050a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4004fa:	4911      	ldr	r1, [pc, #68]	; (400540 <pmc_switch_mainck_to_xtal+0x48>)
  4004fc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4004fe:	4a11      	ldr	r2, [pc, #68]	; (400544 <pmc_switch_mainck_to_xtal+0x4c>)
  400500:	401a      	ands	r2, r3
  400502:	4b11      	ldr	r3, [pc, #68]	; (400548 <pmc_switch_mainck_to_xtal+0x50>)
  400504:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400506:	620b      	str	r3, [r1, #32]
  400508:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40050a:	4a0d      	ldr	r2, [pc, #52]	; (400540 <pmc_switch_mainck_to_xtal+0x48>)
  40050c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40050e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400512:	f023 0303 	bic.w	r3, r3, #3
  400516:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40051a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40051e:	0209      	lsls	r1, r1, #8
  400520:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400522:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400524:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400526:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400528:	f013 0f01 	tst.w	r3, #1
  40052c:	d0fb      	beq.n	400526 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40052e:	4a04      	ldr	r2, [pc, #16]	; (400540 <pmc_switch_mainck_to_xtal+0x48>)
  400530:	6a13      	ldr	r3, [r2, #32]
  400532:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40053a:	6213      	str	r3, [r2, #32]
  40053c:	4770      	bx	lr
  40053e:	bf00      	nop
  400540:	400e0400 	.word	0x400e0400
  400544:	fec8fffc 	.word	0xfec8fffc
  400548:	01370002 	.word	0x01370002

0040054c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40054c:	4b02      	ldr	r3, [pc, #8]	; (400558 <pmc_osc_is_ready_mainck+0xc>)
  40054e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400550:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400554:	4770      	bx	lr
  400556:	bf00      	nop
  400558:	400e0400 	.word	0x400e0400

0040055c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40055c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400560:	4b01      	ldr	r3, [pc, #4]	; (400568 <pmc_disable_pllack+0xc>)
  400562:	629a      	str	r2, [r3, #40]	; 0x28
  400564:	4770      	bx	lr
  400566:	bf00      	nop
  400568:	400e0400 	.word	0x400e0400

0040056c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40056c:	4b02      	ldr	r3, [pc, #8]	; (400578 <pmc_is_locked_pllack+0xc>)
  40056e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400570:	f000 0002 	and.w	r0, r0, #2
  400574:	4770      	bx	lr
  400576:	bf00      	nop
  400578:	400e0400 	.word	0x400e0400

0040057c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40057c:	2822      	cmp	r0, #34	; 0x22
  40057e:	d81e      	bhi.n	4005be <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400580:	281f      	cmp	r0, #31
  400582:	d80c      	bhi.n	40059e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400584:	4b11      	ldr	r3, [pc, #68]	; (4005cc <pmc_enable_periph_clk+0x50>)
  400586:	699a      	ldr	r2, [r3, #24]
  400588:	2301      	movs	r3, #1
  40058a:	4083      	lsls	r3, r0
  40058c:	401a      	ands	r2, r3
  40058e:	4293      	cmp	r3, r2
  400590:	d017      	beq.n	4005c2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400592:	2301      	movs	r3, #1
  400594:	4083      	lsls	r3, r0
  400596:	4a0d      	ldr	r2, [pc, #52]	; (4005cc <pmc_enable_periph_clk+0x50>)
  400598:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40059a:	2000      	movs	r0, #0
  40059c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40059e:	4b0b      	ldr	r3, [pc, #44]	; (4005cc <pmc_enable_periph_clk+0x50>)
  4005a0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4005a4:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4005a6:	2301      	movs	r3, #1
  4005a8:	4083      	lsls	r3, r0
  4005aa:	401a      	ands	r2, r3
  4005ac:	4293      	cmp	r3, r2
  4005ae:	d00a      	beq.n	4005c6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4005b0:	2301      	movs	r3, #1
  4005b2:	4083      	lsls	r3, r0
  4005b4:	4a05      	ldr	r2, [pc, #20]	; (4005cc <pmc_enable_periph_clk+0x50>)
  4005b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4005ba:	2000      	movs	r0, #0
  4005bc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4005be:	2001      	movs	r0, #1
  4005c0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4005c2:	2000      	movs	r0, #0
  4005c4:	4770      	bx	lr
  4005c6:	2000      	movs	r0, #0
}
  4005c8:	4770      	bx	lr
  4005ca:	bf00      	nop
  4005cc:	400e0400 	.word	0x400e0400

004005d0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4005d0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4005d2:	23ac      	movs	r3, #172	; 0xac
  4005d4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4005d6:	680b      	ldr	r3, [r1, #0]
  4005d8:	684a      	ldr	r2, [r1, #4]
  4005da:	fbb3 f3f2 	udiv	r3, r3, r2
  4005de:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4005e0:	1e5c      	subs	r4, r3, #1
  4005e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4005e6:	4294      	cmp	r4, r2
  4005e8:	d80a      	bhi.n	400600 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  4005ea:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4005ec:	688b      	ldr	r3, [r1, #8]
  4005ee:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4005f0:	f240 2302 	movw	r3, #514	; 0x202
  4005f4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4005f8:	2350      	movs	r3, #80	; 0x50
  4005fa:	6003      	str	r3, [r0, #0]

	return 0;
  4005fc:	2000      	movs	r0, #0
  4005fe:	e000      	b.n	400602 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400600:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400602:	f85d 4b04 	ldr.w	r4, [sp], #4
  400606:	4770      	bx	lr

00400608 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400608:	6943      	ldr	r3, [r0, #20]
  40060a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40060e:	bf1a      	itte	ne
  400610:	61c1      	strne	r1, [r0, #28]
	return 0;
  400612:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400614:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400616:	4770      	bx	lr

00400618 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400618:	6943      	ldr	r3, [r0, #20]
  40061a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40061e:	bf1d      	ittte	ne
  400620:	6983      	ldrne	r3, [r0, #24]
  400622:	700b      	strbne	r3, [r1, #0]
	return 0;
  400624:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400626:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400628:	4770      	bx	lr
  40062a:	bf00      	nop

0040062c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40062c:	6943      	ldr	r3, [r0, #20]
  40062e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400632:	bf1d      	ittte	ne
  400634:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400638:	61c1      	strne	r1, [r0, #28]
	return 0;
  40063a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  40063c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  40063e:	4770      	bx	lr

00400640 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400640:	6943      	ldr	r3, [r0, #20]
  400642:	f013 0f01 	tst.w	r3, #1
  400646:	d005      	beq.n	400654 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400648:	6983      	ldr	r3, [r0, #24]
  40064a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40064e:	600b      	str	r3, [r1, #0]

	return 0;
  400650:	2000      	movs	r0, #0
  400652:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400654:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400656:	4770      	bx	lr

00400658 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400658:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40065c:	6043      	str	r3, [r0, #4]
  40065e:	4770      	bx	lr

00400660 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  400660:	e7fe      	b.n	400660 <Dummy_Handler>
  400662:	bf00      	nop

00400664 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400664:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400666:	4b20      	ldr	r3, [pc, #128]	; (4006e8 <Reset_Handler+0x84>)
  400668:	4a20      	ldr	r2, [pc, #128]	; (4006ec <Reset_Handler+0x88>)
  40066a:	429a      	cmp	r2, r3
  40066c:	d913      	bls.n	400696 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40066e:	4b20      	ldr	r3, [pc, #128]	; (4006f0 <Reset_Handler+0x8c>)
  400670:	4a1d      	ldr	r2, [pc, #116]	; (4006e8 <Reset_Handler+0x84>)
  400672:	429a      	cmp	r2, r3
  400674:	d21f      	bcs.n	4006b6 <Reset_Handler+0x52>
  400676:	4611      	mov	r1, r2
  400678:	3204      	adds	r2, #4
  40067a:	3303      	adds	r3, #3
  40067c:	1a9b      	subs	r3, r3, r2
  40067e:	f023 0303 	bic.w	r3, r3, #3
  400682:	3304      	adds	r3, #4
  400684:	4a19      	ldr	r2, [pc, #100]	; (4006ec <Reset_Handler+0x88>)
  400686:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  400688:	f852 0b04 	ldr.w	r0, [r2], #4
  40068c:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400690:	429a      	cmp	r2, r3
  400692:	d1f9      	bne.n	400688 <Reset_Handler+0x24>
  400694:	e00f      	b.n	4006b6 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400696:	4b14      	ldr	r3, [pc, #80]	; (4006e8 <Reset_Handler+0x84>)
  400698:	4a14      	ldr	r2, [pc, #80]	; (4006ec <Reset_Handler+0x88>)
  40069a:	429a      	cmp	r2, r3
  40069c:	d20b      	bcs.n	4006b6 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40069e:	4b14      	ldr	r3, [pc, #80]	; (4006f0 <Reset_Handler+0x8c>)
  4006a0:	4a11      	ldr	r2, [pc, #68]	; (4006e8 <Reset_Handler+0x84>)
  4006a2:	1a9a      	subs	r2, r3, r2
  4006a4:	4813      	ldr	r0, [pc, #76]	; (4006f4 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4006a6:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4006a8:	b12a      	cbz	r2, 4006b6 <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  4006aa:	f851 2904 	ldr.w	r2, [r1], #-4
  4006ae:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4006b2:	4281      	cmp	r1, r0
  4006b4:	d1f9      	bne.n	4006aa <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4006b6:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4006b8:	4b0f      	ldr	r3, [pc, #60]	; (4006f8 <Reset_Handler+0x94>)
  4006ba:	4a10      	ldr	r2, [pc, #64]	; (4006fc <Reset_Handler+0x98>)
  4006bc:	429a      	cmp	r2, r3
  4006be:	d20b      	bcs.n	4006d8 <Reset_Handler+0x74>
  4006c0:	1d13      	adds	r3, r2, #4
  4006c2:	4a0f      	ldr	r2, [pc, #60]	; (400700 <Reset_Handler+0x9c>)
  4006c4:	1ad2      	subs	r2, r2, r3
  4006c6:	f022 0203 	bic.w	r2, r2, #3
  4006ca:	441a      	add	r2, r3
  4006cc:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4006ce:	2100      	movs	r1, #0
  4006d0:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4006d4:	4293      	cmp	r3, r2
  4006d6:	d1fb      	bne.n	4006d0 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4006d8:	4b0a      	ldr	r3, [pc, #40]	; (400704 <Reset_Handler+0xa0>)
  4006da:	4a0b      	ldr	r2, [pc, #44]	; (400708 <Reset_Handler+0xa4>)
  4006dc:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4006de:	4b0b      	ldr	r3, [pc, #44]	; (40070c <Reset_Handler+0xa8>)
  4006e0:	4798      	blx	r3

	/* Branch to main function */
	main();
  4006e2:	4b0b      	ldr	r3, [pc, #44]	; (400710 <Reset_Handler+0xac>)
  4006e4:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4006e6:	e7fe      	b.n	4006e6 <Reset_Handler+0x82>
  4006e8:	20000000 	.word	0x20000000
  4006ec:	0040516c 	.word	0x0040516c
  4006f0:	2000086c 	.word	0x2000086c
  4006f4:	00405168 	.word	0x00405168
  4006f8:	20000b60 	.word	0x20000b60
  4006fc:	2000086c 	.word	0x2000086c
  400700:	20000b63 	.word	0x20000b63
  400704:	e000ed00 	.word	0xe000ed00
  400708:	00400000 	.word	0x00400000
  40070c:	0040242d 	.word	0x0040242d
  400710:	00400a39 	.word	0x00400a39

00400714 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400714:	4b3d      	ldr	r3, [pc, #244]	; (40080c <SystemCoreClockUpdate+0xf8>)
  400716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400718:	f003 0303 	and.w	r3, r3, #3
  40071c:	2b03      	cmp	r3, #3
  40071e:	d85d      	bhi.n	4007dc <SystemCoreClockUpdate+0xc8>
  400720:	e8df f003 	tbb	[pc, r3]
  400724:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400728:	4b39      	ldr	r3, [pc, #228]	; (400810 <SystemCoreClockUpdate+0xfc>)
  40072a:	695b      	ldr	r3, [r3, #20]
  40072c:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400730:	bf14      	ite	ne
  400732:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400736:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40073a:	4b36      	ldr	r3, [pc, #216]	; (400814 <SystemCoreClockUpdate+0x100>)
  40073c:	601a      	str	r2, [r3, #0]
  40073e:	e04d      	b.n	4007dc <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400740:	4b32      	ldr	r3, [pc, #200]	; (40080c <SystemCoreClockUpdate+0xf8>)
  400742:	6a1b      	ldr	r3, [r3, #32]
  400744:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400748:	d003      	beq.n	400752 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40074a:	4a33      	ldr	r2, [pc, #204]	; (400818 <SystemCoreClockUpdate+0x104>)
  40074c:	4b31      	ldr	r3, [pc, #196]	; (400814 <SystemCoreClockUpdate+0x100>)
  40074e:	601a      	str	r2, [r3, #0]
  400750:	e044      	b.n	4007dc <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400752:	4a32      	ldr	r2, [pc, #200]	; (40081c <SystemCoreClockUpdate+0x108>)
  400754:	4b2f      	ldr	r3, [pc, #188]	; (400814 <SystemCoreClockUpdate+0x100>)
  400756:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400758:	4b2c      	ldr	r3, [pc, #176]	; (40080c <SystemCoreClockUpdate+0xf8>)
  40075a:	6a1b      	ldr	r3, [r3, #32]
  40075c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400760:	2b10      	cmp	r3, #16
  400762:	d002      	beq.n	40076a <SystemCoreClockUpdate+0x56>
  400764:	2b20      	cmp	r3, #32
  400766:	d004      	beq.n	400772 <SystemCoreClockUpdate+0x5e>
  400768:	e038      	b.n	4007dc <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40076a:	4a2d      	ldr	r2, [pc, #180]	; (400820 <SystemCoreClockUpdate+0x10c>)
  40076c:	4b29      	ldr	r3, [pc, #164]	; (400814 <SystemCoreClockUpdate+0x100>)
  40076e:	601a      	str	r2, [r3, #0]
			break;
  400770:	e034      	b.n	4007dc <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400772:	4a29      	ldr	r2, [pc, #164]	; (400818 <SystemCoreClockUpdate+0x104>)
  400774:	4b27      	ldr	r3, [pc, #156]	; (400814 <SystemCoreClockUpdate+0x100>)
  400776:	601a      	str	r2, [r3, #0]
			break;
  400778:	e030      	b.n	4007dc <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40077a:	4b24      	ldr	r3, [pc, #144]	; (40080c <SystemCoreClockUpdate+0xf8>)
  40077c:	6a1b      	ldr	r3, [r3, #32]
  40077e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400782:	d003      	beq.n	40078c <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400784:	4a24      	ldr	r2, [pc, #144]	; (400818 <SystemCoreClockUpdate+0x104>)
  400786:	4b23      	ldr	r3, [pc, #140]	; (400814 <SystemCoreClockUpdate+0x100>)
  400788:	601a      	str	r2, [r3, #0]
  40078a:	e012      	b.n	4007b2 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40078c:	4a23      	ldr	r2, [pc, #140]	; (40081c <SystemCoreClockUpdate+0x108>)
  40078e:	4b21      	ldr	r3, [pc, #132]	; (400814 <SystemCoreClockUpdate+0x100>)
  400790:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400792:	4b1e      	ldr	r3, [pc, #120]	; (40080c <SystemCoreClockUpdate+0xf8>)
  400794:	6a1b      	ldr	r3, [r3, #32]
  400796:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40079a:	2b10      	cmp	r3, #16
  40079c:	d002      	beq.n	4007a4 <SystemCoreClockUpdate+0x90>
  40079e:	2b20      	cmp	r3, #32
  4007a0:	d004      	beq.n	4007ac <SystemCoreClockUpdate+0x98>
  4007a2:	e006      	b.n	4007b2 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4007a4:	4a1e      	ldr	r2, [pc, #120]	; (400820 <SystemCoreClockUpdate+0x10c>)
  4007a6:	4b1b      	ldr	r3, [pc, #108]	; (400814 <SystemCoreClockUpdate+0x100>)
  4007a8:	601a      	str	r2, [r3, #0]
					break;
  4007aa:	e002      	b.n	4007b2 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4007ac:	4a1a      	ldr	r2, [pc, #104]	; (400818 <SystemCoreClockUpdate+0x104>)
  4007ae:	4b19      	ldr	r3, [pc, #100]	; (400814 <SystemCoreClockUpdate+0x100>)
  4007b0:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4007b2:	4b16      	ldr	r3, [pc, #88]	; (40080c <SystemCoreClockUpdate+0xf8>)
  4007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4007b6:	f003 0303 	and.w	r3, r3, #3
  4007ba:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4007bc:	4a13      	ldr	r2, [pc, #76]	; (40080c <SystemCoreClockUpdate+0xf8>)
  4007be:	bf07      	ittee	eq
  4007c0:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4007c2:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4007c4:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4007c6:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4007c8:	4812      	ldr	r0, [pc, #72]	; (400814 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4007ca:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4007ce:	6803      	ldr	r3, [r0, #0]
  4007d0:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  4007d4:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4007d6:	fbb3 f3f2 	udiv	r3, r3, r2
  4007da:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4007dc:	4b0b      	ldr	r3, [pc, #44]	; (40080c <SystemCoreClockUpdate+0xf8>)
  4007de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4007e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4007e4:	2b70      	cmp	r3, #112	; 0x70
  4007e6:	d107      	bne.n	4007f8 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  4007e8:	4a0a      	ldr	r2, [pc, #40]	; (400814 <SystemCoreClockUpdate+0x100>)
  4007ea:	6813      	ldr	r3, [r2, #0]
  4007ec:	490d      	ldr	r1, [pc, #52]	; (400824 <SystemCoreClockUpdate+0x110>)
  4007ee:	fba1 1303 	umull	r1, r3, r1, r3
  4007f2:	085b      	lsrs	r3, r3, #1
  4007f4:	6013      	str	r3, [r2, #0]
  4007f6:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4007f8:	4b04      	ldr	r3, [pc, #16]	; (40080c <SystemCoreClockUpdate+0xf8>)
  4007fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4007fc:	4905      	ldr	r1, [pc, #20]	; (400814 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4007fe:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400802:	680b      	ldr	r3, [r1, #0]
  400804:	40d3      	lsrs	r3, r2
  400806:	600b      	str	r3, [r1, #0]
  400808:	4770      	bx	lr
  40080a:	bf00      	nop
  40080c:	400e0400 	.word	0x400e0400
  400810:	400e1410 	.word	0x400e1410
  400814:	20000000 	.word	0x20000000
  400818:	00b71b00 	.word	0x00b71b00
  40081c:	003d0900 	.word	0x003d0900
  400820:	007a1200 	.word	0x007a1200
  400824:	aaaaaaab 	.word	0xaaaaaaab

00400828 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400828:	4b1a      	ldr	r3, [pc, #104]	; (400894 <system_init_flash+0x6c>)
  40082a:	4298      	cmp	r0, r3
  40082c:	d807      	bhi.n	40083e <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40082e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400832:	4a19      	ldr	r2, [pc, #100]	; (400898 <system_init_flash+0x70>)
  400834:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400836:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40083a:	6013      	str	r3, [r2, #0]
  40083c:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40083e:	4b17      	ldr	r3, [pc, #92]	; (40089c <system_init_flash+0x74>)
  400840:	4298      	cmp	r0, r3
  400842:	d806      	bhi.n	400852 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400844:	4b16      	ldr	r3, [pc, #88]	; (4008a0 <system_init_flash+0x78>)
  400846:	4a14      	ldr	r2, [pc, #80]	; (400898 <system_init_flash+0x70>)
  400848:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40084a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40084e:	6013      	str	r3, [r2, #0]
  400850:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400852:	4b14      	ldr	r3, [pc, #80]	; (4008a4 <system_init_flash+0x7c>)
  400854:	4298      	cmp	r0, r3
  400856:	d806      	bhi.n	400866 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400858:	4b13      	ldr	r3, [pc, #76]	; (4008a8 <system_init_flash+0x80>)
  40085a:	4a0f      	ldr	r2, [pc, #60]	; (400898 <system_init_flash+0x70>)
  40085c:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40085e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400862:	6013      	str	r3, [r2, #0]
  400864:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400866:	4b11      	ldr	r3, [pc, #68]	; (4008ac <system_init_flash+0x84>)
  400868:	4298      	cmp	r0, r3
  40086a:	d806      	bhi.n	40087a <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40086c:	4b10      	ldr	r3, [pc, #64]	; (4008b0 <system_init_flash+0x88>)
  40086e:	4a0a      	ldr	r2, [pc, #40]	; (400898 <system_init_flash+0x70>)
  400870:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400872:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400876:	6013      	str	r3, [r2, #0]
  400878:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40087a:	4b0e      	ldr	r3, [pc, #56]	; (4008b4 <system_init_flash+0x8c>)
  40087c:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40087e:	bf94      	ite	ls
  400880:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400884:	4b0c      	ldrhi	r3, [pc, #48]	; (4008b8 <system_init_flash+0x90>)
  400886:	4a04      	ldr	r2, [pc, #16]	; (400898 <system_init_flash+0x70>)
  400888:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40088a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40088e:	6013      	str	r3, [r2, #0]
  400890:	4770      	bx	lr
  400892:	bf00      	nop
  400894:	01312cff 	.word	0x01312cff
  400898:	400e0a00 	.word	0x400e0a00
  40089c:	026259ff 	.word	0x026259ff
  4008a0:	04000100 	.word	0x04000100
  4008a4:	039386ff 	.word	0x039386ff
  4008a8:	04000200 	.word	0x04000200
  4008ac:	04c4b3ff 	.word	0x04c4b3ff
  4008b0:	04000300 	.word	0x04000300
  4008b4:	05f5e0ff 	.word	0x05f5e0ff
  4008b8:	04000500 	.word	0x04000500

004008bc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4008bc:	4b09      	ldr	r3, [pc, #36]	; (4008e4 <_sbrk+0x28>)
  4008be:	681b      	ldr	r3, [r3, #0]
  4008c0:	b913      	cbnz	r3, 4008c8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4008c2:	4a09      	ldr	r2, [pc, #36]	; (4008e8 <_sbrk+0x2c>)
  4008c4:	4b07      	ldr	r3, [pc, #28]	; (4008e4 <_sbrk+0x28>)
  4008c6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4008c8:	4b06      	ldr	r3, [pc, #24]	; (4008e4 <_sbrk+0x28>)
  4008ca:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4008cc:	181a      	adds	r2, r3, r0
  4008ce:	4907      	ldr	r1, [pc, #28]	; (4008ec <_sbrk+0x30>)
  4008d0:	4291      	cmp	r1, r2
  4008d2:	db04      	blt.n	4008de <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4008d4:	4610      	mov	r0, r2
  4008d6:	4a03      	ldr	r2, [pc, #12]	; (4008e4 <_sbrk+0x28>)
  4008d8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4008da:	4618      	mov	r0, r3
  4008dc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4008de:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4008e2:	4770      	bx	lr
  4008e4:	200008fc 	.word	0x200008fc
  4008e8:	20003b60 	.word	0x20003b60
  4008ec:	20027ffc 	.word	0x20027ffc

004008f0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4008f0:	f04f 30ff 	mov.w	r0, #4294967295
  4008f4:	4770      	bx	lr
  4008f6:	bf00      	nop

004008f8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4008fc:	604b      	str	r3, [r1, #4]

	return 0;
}
  4008fe:	2000      	movs	r0, #0
  400900:	4770      	bx	lr
  400902:	bf00      	nop

00400904 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400904:	2001      	movs	r0, #1
  400906:	4770      	bx	lr

00400908 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400908:	2000      	movs	r0, #0
  40090a:	4770      	bx	lr

0040090c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40090c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40090e:	b083      	sub	sp, #12
  400910:	4605      	mov	r5, r0
  400912:	460c      	mov	r4, r1
	uint32_t val = 0;
  400914:	2300      	movs	r3, #0
  400916:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400918:	4b18      	ldr	r3, [pc, #96]	; (40097c <usart_serial_getchar+0x70>)
  40091a:	4298      	cmp	r0, r3
  40091c:	d107      	bne.n	40092e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40091e:	461f      	mov	r7, r3
  400920:	4e17      	ldr	r6, [pc, #92]	; (400980 <usart_serial_getchar+0x74>)
  400922:	4638      	mov	r0, r7
  400924:	4621      	mov	r1, r4
  400926:	47b0      	blx	r6
  400928:	2800      	cmp	r0, #0
  40092a:	d1fa      	bne.n	400922 <usart_serial_getchar+0x16>
  40092c:	e017      	b.n	40095e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40092e:	4b15      	ldr	r3, [pc, #84]	; (400984 <usart_serial_getchar+0x78>)
  400930:	4298      	cmp	r0, r3
  400932:	d107      	bne.n	400944 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400934:	461e      	mov	r6, r3
  400936:	4d12      	ldr	r5, [pc, #72]	; (400980 <usart_serial_getchar+0x74>)
  400938:	4630      	mov	r0, r6
  40093a:	4621      	mov	r1, r4
  40093c:	47a8      	blx	r5
  40093e:	2800      	cmp	r0, #0
  400940:	d1fa      	bne.n	400938 <usart_serial_getchar+0x2c>
  400942:	e018      	b.n	400976 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400944:	4b10      	ldr	r3, [pc, #64]	; (400988 <usart_serial_getchar+0x7c>)
  400946:	4298      	cmp	r0, r3
  400948:	d109      	bne.n	40095e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40094a:	461e      	mov	r6, r3
  40094c:	4d0f      	ldr	r5, [pc, #60]	; (40098c <usart_serial_getchar+0x80>)
  40094e:	4630      	mov	r0, r6
  400950:	a901      	add	r1, sp, #4
  400952:	47a8      	blx	r5
  400954:	2800      	cmp	r0, #0
  400956:	d1fa      	bne.n	40094e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  400958:	9b01      	ldr	r3, [sp, #4]
  40095a:	7023      	strb	r3, [r4, #0]
  40095c:	e00b      	b.n	400976 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40095e:	4b0c      	ldr	r3, [pc, #48]	; (400990 <usart_serial_getchar+0x84>)
  400960:	429d      	cmp	r5, r3
  400962:	d108      	bne.n	400976 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400964:	461e      	mov	r6, r3
  400966:	4d09      	ldr	r5, [pc, #36]	; (40098c <usart_serial_getchar+0x80>)
  400968:	4630      	mov	r0, r6
  40096a:	a901      	add	r1, sp, #4
  40096c:	47a8      	blx	r5
  40096e:	2800      	cmp	r0, #0
  400970:	d1fa      	bne.n	400968 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  400972:	9b01      	ldr	r3, [sp, #4]
  400974:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400976:	b003      	add	sp, #12
  400978:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40097a:	bf00      	nop
  40097c:	400e0600 	.word	0x400e0600
  400980:	00400619 	.word	0x00400619
  400984:	400e0800 	.word	0x400e0800
  400988:	40024000 	.word	0x40024000
  40098c:	00400641 	.word	0x00400641
  400990:	40028000 	.word	0x40028000

00400994 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400994:	b570      	push	{r4, r5, r6, lr}
  400996:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400998:	4b18      	ldr	r3, [pc, #96]	; (4009fc <usart_serial_putchar+0x68>)
  40099a:	4298      	cmp	r0, r3
  40099c:	d108      	bne.n	4009b0 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  40099e:	461e      	mov	r6, r3
  4009a0:	4d17      	ldr	r5, [pc, #92]	; (400a00 <usart_serial_putchar+0x6c>)
  4009a2:	4630      	mov	r0, r6
  4009a4:	4621      	mov	r1, r4
  4009a6:	47a8      	blx	r5
  4009a8:	2800      	cmp	r0, #0
  4009aa:	d1fa      	bne.n	4009a2 <usart_serial_putchar+0xe>
		return 1;
  4009ac:	2001      	movs	r0, #1
  4009ae:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4009b0:	4b14      	ldr	r3, [pc, #80]	; (400a04 <usart_serial_putchar+0x70>)
  4009b2:	4298      	cmp	r0, r3
  4009b4:	d108      	bne.n	4009c8 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  4009b6:	461e      	mov	r6, r3
  4009b8:	4d11      	ldr	r5, [pc, #68]	; (400a00 <usart_serial_putchar+0x6c>)
  4009ba:	4630      	mov	r0, r6
  4009bc:	4621      	mov	r1, r4
  4009be:	47a8      	blx	r5
  4009c0:	2800      	cmp	r0, #0
  4009c2:	d1fa      	bne.n	4009ba <usart_serial_putchar+0x26>
		return 1;
  4009c4:	2001      	movs	r0, #1
  4009c6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4009c8:	4b0f      	ldr	r3, [pc, #60]	; (400a08 <usart_serial_putchar+0x74>)
  4009ca:	4298      	cmp	r0, r3
  4009cc:	d108      	bne.n	4009e0 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4009ce:	461e      	mov	r6, r3
  4009d0:	4d0e      	ldr	r5, [pc, #56]	; (400a0c <usart_serial_putchar+0x78>)
  4009d2:	4630      	mov	r0, r6
  4009d4:	4621      	mov	r1, r4
  4009d6:	47a8      	blx	r5
  4009d8:	2800      	cmp	r0, #0
  4009da:	d1fa      	bne.n	4009d2 <usart_serial_putchar+0x3e>
		return 1;
  4009dc:	2001      	movs	r0, #1
  4009de:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4009e0:	4b0b      	ldr	r3, [pc, #44]	; (400a10 <usart_serial_putchar+0x7c>)
  4009e2:	4298      	cmp	r0, r3
  4009e4:	d108      	bne.n	4009f8 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4009e6:	461e      	mov	r6, r3
  4009e8:	4d08      	ldr	r5, [pc, #32]	; (400a0c <usart_serial_putchar+0x78>)
  4009ea:	4630      	mov	r0, r6
  4009ec:	4621      	mov	r1, r4
  4009ee:	47a8      	blx	r5
  4009f0:	2800      	cmp	r0, #0
  4009f2:	d1fa      	bne.n	4009ea <usart_serial_putchar+0x56>
		return 1;
  4009f4:	2001      	movs	r0, #1
  4009f6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4009f8:	2000      	movs	r0, #0
}
  4009fa:	bd70      	pop	{r4, r5, r6, pc}
  4009fc:	400e0600 	.word	0x400e0600
  400a00:	00400609 	.word	0x00400609
  400a04:	400e0800 	.word	0x400e0800
  400a08:	40024000 	.word	0x40024000
  400a0c:	0040062d 	.word	0x0040062d
  400a10:	40028000 	.word	0x40028000

00400a14 <SysTick_Handler>:
 * \brief Handler for Sytem Tick interrupt.
 */
void SysTick_Handler(void)
{
	/* Set flag: it's time to measure touch */
	time_to_measure_touch = 1u;
  400a14:	2201      	movs	r2, #1
  400a16:	4b05      	ldr	r3, [pc, #20]	; (400a2c <SysTick_Handler+0x18>)
  400a18:	701a      	strb	r2, [r3, #0]

	/* Update the current time */
	current_time_ms_touch += qt_measurement_period_msec;
  400a1a:	4a05      	ldr	r2, [pc, #20]	; (400a30 <SysTick_Handler+0x1c>)
  400a1c:	8813      	ldrh	r3, [r2, #0]
  400a1e:	4905      	ldr	r1, [pc, #20]	; (400a34 <SysTick_Handler+0x20>)
  400a20:	8809      	ldrh	r1, [r1, #0]
  400a22:	fa11 f383 	uxtah	r3, r1, r3
  400a26:	b29b      	uxth	r3, r3
  400a28:	8013      	strh	r3, [r2, #0]
  400a2a:	4770      	bx	lr
  400a2c:	20000900 	.word	0x20000900
  400a30:	20000902 	.word	0x20000902
  400a34:	20000004 	.word	0x20000004

00400a38 <main>:

/**
 * \brief Main code entry point.
 */
int main(void)
{
  400a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a3c:	b08b      	sub	sp, #44	; 0x2c
 * \brief initialise pins, watchdog, etc.
 */
static void init_system(void)
{
	/* Disable the watchdog */
	wdt_disable(WDT);
  400a3e:	489d      	ldr	r0, [pc, #628]	; (400cb4 <main+0x27c>)
  400a40:	4b9d      	ldr	r3, [pc, #628]	; (400cb8 <main+0x280>)
  400a42:	4798      	blx	r3

	sysclk_init();
  400a44:	4b9d      	ldr	r3, [pc, #628]	; (400cbc <main+0x284>)
  400a46:	4798      	blx	r3
		.baudrate = CONF_UART_BAUDRATE,
		.paritytype = CONF_UART_PARITY
	};

	/* Configure PIO */
	gpio_configure_group(CONF_UART_PIO, CONF_PINS_UART, CONF_PINS_UART_FLAGS);
  400a48:	489d      	ldr	r0, [pc, #628]	; (400cc0 <main+0x288>)
  400a4a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400a4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400a52:	4b9c      	ldr	r3, [pc, #624]	; (400cc4 <main+0x28c>)
  400a54:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400a56:	2008      	movs	r0, #8
  400a58:	4c9b      	ldr	r4, [pc, #620]	; (400cc8 <main+0x290>)
  400a5a:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400a5c:	4d9b      	ldr	r5, [pc, #620]	; (400ccc <main+0x294>)
  400a5e:	4b9c      	ldr	r3, [pc, #624]	; (400cd0 <main+0x298>)
  400a60:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400a62:	4a9c      	ldr	r2, [pc, #624]	; (400cd4 <main+0x29c>)
  400a64:	4b9c      	ldr	r3, [pc, #624]	; (400cd8 <main+0x2a0>)
  400a66:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400a68:	4a9c      	ldr	r2, [pc, #624]	; (400cdc <main+0x2a4>)
  400a6a:	4b9d      	ldr	r3, [pc, #628]	; (400ce0 <main+0x2a8>)
  400a6c:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400a6e:	4b9d      	ldr	r3, [pc, #628]	; (400ce4 <main+0x2ac>)
  400a70:	9307      	str	r3, [sp, #28]
	uart_settings.ul_baudrate = opt->baudrate;
  400a72:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400a76:	9308      	str	r3, [sp, #32]
	uart_settings.ul_mode = opt->paritytype;
  400a78:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400a7c:	9309      	str	r3, [sp, #36]	; 0x24
  400a7e:	2008      	movs	r0, #8
  400a80:	47a0      	blx	r4
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400a82:	4628      	mov	r0, r5
  400a84:	a907      	add	r1, sp, #28
  400a86:	4b98      	ldr	r3, [pc, #608]	; (400ce8 <main+0x2b0>)
  400a88:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400a8a:	4e98      	ldr	r6, [pc, #608]	; (400cec <main+0x2b4>)
  400a8c:	6833      	ldr	r3, [r6, #0]
  400a8e:	6898      	ldr	r0, [r3, #8]
  400a90:	2100      	movs	r1, #0
  400a92:	4d97      	ldr	r5, [pc, #604]	; (400cf0 <main+0x2b8>)
  400a94:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400a96:	6833      	ldr	r3, [r6, #0]
  400a98:	6858      	ldr	r0, [r3, #4]
  400a9a:	2100      	movs	r1, #0
  400a9c:	47a8      	blx	r5
	sysclk_init();

	configure_console();

	/* Output example information */
	printf(STRING_HEADER);
  400a9e:	4895      	ldr	r0, [pc, #596]	; (400cf4 <main+0x2bc>)
  400aa0:	4d95      	ldr	r5, [pc, #596]	; (400cf8 <main+0x2c0>)
  400aa2:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_PIOE);
	pmc_enable_periph_clk(ID_PIOF);
#elif SAM3N
	pmc_enable_periph_clk(ID_PIOC);
#else
	pmc_enable_periph_clk(ID_PIOA);
  400aa4:	200b      	movs	r0, #11
  400aa6:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOC);
  400aa8:	200d      	movs	r0, #13
  400aaa:	47a0      	blx	r4

	/* Initialise host app, pins, watchdog, etc */
	init_system();

	/* Reset touch sensing */
	qt_reset_sensing();
  400aac:	4b93      	ldr	r3, [pc, #588]	; (400cfc <main+0x2c4>)
  400aae:	4798      	blx	r3
	qt_enable_slider(BOARD_SLIDER_START_CHANNEL, BOARD_SLIDER_END_CHANNEL,
			AKS_GROUP_1, 16u, HYST_6_25, RES_8_BIT, 0u);
#endif

#if defined BOARD_KEY_NUM_5
	qt_enable_key(BOARD_VALID_KEY_CHANNEL, AKS_GROUP_1, 18u, HYST_6_25);
  400ab0:	200b      	movs	r0, #11
  400ab2:	2101      	movs	r1, #1
  400ab4:	2212      	movs	r2, #18
  400ab6:	2303      	movs	r3, #3
  400ab8:	4c91      	ldr	r4, [pc, #580]	; (400d00 <main+0x2c8>)
  400aba:	47a0      	blx	r4
	qt_enable_key(BOARD_UP_KEY_CHANNEL, AKS_GROUP_1, 18u, HYST_6_25);
  400abc:	200c      	movs	r0, #12
  400abe:	2101      	movs	r1, #1
  400ac0:	2212      	movs	r2, #18
  400ac2:	2303      	movs	r3, #3
  400ac4:	47a0      	blx	r4
	qt_enable_key(BOARD_DOWN_KEY_CHANNEL, AKS_GROUP_1, 18u, HYST_6_25);
  400ac6:	200d      	movs	r0, #13
  400ac8:	2101      	movs	r1, #1
  400aca:	2212      	movs	r2, #18
  400acc:	2303      	movs	r3, #3
  400ace:	47a0      	blx	r4
	qt_enable_key(BOARD_LEFT_KEY_CHANNEL, AKS_GROUP_1, 18u, HYST_6_25);
  400ad0:	200e      	movs	r0, #14
  400ad2:	2101      	movs	r1, #1
  400ad4:	2212      	movs	r2, #18
  400ad6:	2303      	movs	r3, #3
  400ad8:	47a0      	blx	r4
	qt_enable_key(BOARD_RIGHT_KEY_CHANNEL, AKS_GROUP_1, 18u, HYST_6_25);
  400ada:	200f      	movs	r0, #15
  400adc:	2101      	movs	r1, #1
  400ade:	2212      	movs	r2, #18
  400ae0:	2303      	movs	r3, #3
  400ae2:	47a0      	blx	r4
	qt_enable_key(BOARD_LEFT_KEY_CHANNEL, AKS_GROUP_1, 18u, HYST_6_25);
	qt_enable_key(BOARD_RIGHT_KEY_CHANNEL, AKS_GROUP_1, 18u, HYST_6_25);
#endif

#ifndef BOARD_SILDER_BEFOR_KEY
	qt_enable_slider(BOARD_SLIDER_START_CHANNEL, BOARD_SLIDER_END_CHANNEL,
  400ae4:	2403      	movs	r4, #3
  400ae6:	9400      	str	r4, [sp, #0]
  400ae8:	2307      	movs	r3, #7
  400aea:	9301      	str	r3, [sp, #4]
  400aec:	2600      	movs	r6, #0
  400aee:	9602      	str	r6, [sp, #8]
  400af0:	2010      	movs	r0, #16
  400af2:	2112      	movs	r1, #18
  400af4:	2201      	movs	r2, #1
  400af6:	4603      	mov	r3, r0
  400af8:	4f82      	ldr	r7, [pc, #520]	; (400d04 <main+0x2cc>)
  400afa:	47b8      	blx	r7

	/* Configure the Sensors as keys or Keys With Rotor/Sliders in this function */
	config_sensors();

	/* Initialise touch sensing */
	qt_init_sensing();
  400afc:	4882      	ldr	r0, [pc, #520]	; (400d08 <main+0x2d0>)
  400afe:	4983      	ldr	r1, [pc, #524]	; (400d0c <main+0x2d4>)
  400b00:	4b83      	ldr	r3, [pc, #524]	; (400d10 <main+0x2d8>)
  400b02:	4798      	blx	r3
 * \brief This will fill the default threshold values in the configuration
 * data structure.But User can change the values of these parameters.
 */
static void qt_set_parameters(void)
{
	qt_config_data.qt_di = DEF_QT_DI;
  400b04:	4b83      	ldr	r3, [pc, #524]	; (400d14 <main+0x2dc>)
  400b06:	2204      	movs	r2, #4
  400b08:	705a      	strb	r2, [r3, #1]
	qt_config_data.qt_neg_drift_rate = DEF_QT_NEG_DRIFT_RATE;
  400b0a:	2214      	movs	r2, #20
  400b0c:	711a      	strb	r2, [r3, #4]
	qt_config_data.qt_pos_drift_rate = DEF_QT_POS_DRIFT_RATE;
  400b0e:	2105      	movs	r1, #5
  400b10:	7159      	strb	r1, [r3, #5]
	qt_config_data.qt_max_on_duration = DEF_QT_MAX_ON_DURATION;
  400b12:	70de      	strb	r6, [r3, #3]
	qt_config_data.qt_drift_hold_time = DEF_QT_DRIFT_HOLD_TIME;
  400b14:	709a      	strb	r2, [r3, #2]
	qt_config_data.qt_recal_threshold = DEF_QT_RECAL_THRESHOLD;
  400b16:	2201      	movs	r2, #1
  400b18:	701a      	strb	r2, [r3, #0]
	qt_config_data.qt_pos_recal_delay = DEF_QT_POS_RECAL_DELAY;
  400b1a:	719c      	strb	r4, [r3, #6]
/**
 * \brief Configure timer ISR to fire regularly. Configure Timer Counter 0 to generate an interrupt every 25ms.
 */
static void init_timer_isr(void)
{
	printf("Configure sys tick to get %u ms tick period.\n\r",
  400b1c:	4c7e      	ldr	r4, [pc, #504]	; (400d18 <main+0x2e0>)
  400b1e:	487f      	ldr	r0, [pc, #508]	; (400d1c <main+0x2e4>)
  400b20:	8821      	ldrh	r1, [r4, #0]
  400b22:	47a8      	blx	r5
			qt_measurement_period_msec);
	if (SysTick_Config((sysclk_get_cpu_hz() / 1000) *
  400b24:	8822      	ldrh	r2, [r4, #0]
  400b26:	4b7e      	ldr	r3, [pc, #504]	; (400d20 <main+0x2e8>)
  400b28:	fb03 f302 	mul.w	r3, r3, r2
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  400b2c:	3b01      	subs	r3, #1
  400b2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  400b32:	f080 8146 	bcs.w	400dc2 <main+0x38a>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400b36:	4a7b      	ldr	r2, [pc, #492]	; (400d24 <main+0x2ec>)
  400b38:	6053      	str	r3, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400b3a:	21f0      	movs	r1, #240	; 0xf0
  400b3c:	4b7a      	ldr	r3, [pc, #488]	; (400d28 <main+0x2f0>)
  400b3e:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400b42:	6096      	str	r6, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400b44:	2307      	movs	r3, #7
  400b46:	6013      	str	r3, [r2, #0]

	/* Address to pass address of user functions */
	/* This function is called after the library has made capacitive measurements,
	 * but before it has processed them. The user can use this hook to apply filter
	 * functions to the measured signal values.(Possibly to fix sensor layout faults) */
	qt_filter_callback = 0;
  400b48:	2200      	movs	r2, #0
  400b4a:	4b78      	ldr	r3, [pc, #480]	; (400d2c <main+0x2f4>)
  400b4c:	601a      	str	r2, [r3, #0]
 */
static void trace_library_info(void)
{
	qt_lib_siginfo_t plib_sig;

	qt_measure_sensors(current_time_ms_touch);
  400b4e:	4b78      	ldr	r3, [pc, #480]	; (400d30 <main+0x2f8>)
  400b50:	8818      	ldrh	r0, [r3, #0]
  400b52:	b280      	uxth	r0, r0
  400b54:	4b77      	ldr	r3, [pc, #476]	; (400d34 <main+0x2fc>)
  400b56:	4798      	blx	r3
	qt_get_library_sig(&plib_sig);
  400b58:	a807      	add	r0, sp, #28
  400b5a:	4b77      	ldr	r3, [pc, #476]	; (400d38 <main+0x300>)
  400b5c:	4798      	blx	r3

	if ((plib_sig.lib_sig_lword & QTOUCH_LIB_TPYE_MASK) == 0) {
  400b5e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  400b62:	f013 0f01 	tst.w	r3, #1
		printf("Library QTouch ");
  400b66:	bf0c      	ite	eq
  400b68:	4874      	ldreq	r0, [pc, #464]	; (400d3c <main+0x304>)
	} else {
		printf("Library QMatrix ");
  400b6a:	4875      	ldrne	r0, [pc, #468]	; (400d40 <main+0x308>)
  400b6c:	4b62      	ldr	r3, [pc, #392]	; (400cf8 <main+0x2c0>)
  400b6e:	4798      	blx	r3
	}

	if (((plib_sig.lib_sig_lword >> QTOUCH_LIB_COMPILER_OFFSET) &
  400b70:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  400b74:	f013 0f04 	tst.w	r3, #4
					QTOUCH_LIB_COMPILER_MASK) == 0) {
		printf("for GCC\n\r");
  400b78:	bf0c      	ite	eq
  400b7a:	4872      	ldreq	r0, [pc, #456]	; (400d44 <main+0x30c>)
	} else {
		printf("for IAR\n\r");
  400b7c:	4872      	ldrne	r0, [pc, #456]	; (400d48 <main+0x310>)
  400b7e:	4b5e      	ldr	r3, [pc, #376]	; (400cf8 <main+0x2c0>)
  400b80:	4798      	blx	r3
	}

	printf("Max Channels %d\n\r",
  400b82:	f8bd 101c 	ldrh.w	r1, [sp, #28]
  400b86:	4871      	ldr	r0, [pc, #452]	; (400d4c <main+0x314>)
  400b88:	f3c1 01c6 	ubfx	r1, r1, #3, #7
  400b8c:	4b5a      	ldr	r3, [pc, #360]	; (400cf8 <main+0x2c0>)
  400b8e:	4798      	blx	r3
			(plib_sig.lib_sig_lword >>
					QTOUCH_LIB_MAX_CHANNEL_OFFSET) &
			QTOUCH_LIB_MAX_CHANNEL_MASK);

	if (((plib_sig.lib_sig_lword >> QTOUCH_LIB_KEY_ONLY_OFFSET) &
  400b90:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  400b94:	f413 6f80 	tst.w	r3, #1024	; 0x400
					QTOUCH_LIB_KEY_ONLY_MASK) == 0) {
		printf("supports only keys \n\r");
  400b98:	bf0c      	ite	eq
  400b9a:	486d      	ldreq	r0, [pc, #436]	; (400d50 <main+0x318>)
	} else {
		printf("supports keys and rotors/sliders\n\r");
  400b9c:	486d      	ldrne	r0, [pc, #436]	; (400d54 <main+0x31c>)
  400b9e:	4b56      	ldr	r3, [pc, #344]	; (400cf8 <main+0x2c0>)
  400ba0:	4798      	blx	r3
	}

	printf("Maximum number of Rotors/Sliders %d \n\r",
  400ba2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
  400ba6:	486c      	ldr	r0, [pc, #432]	; (400d58 <main+0x320>)
  400ba8:	0ac9      	lsrs	r1, r1, #11
  400baa:	4c53      	ldr	r4, [pc, #332]	; (400cf8 <main+0x2c0>)
  400bac:	47a0      	blx	r4
			(plib_sig.lib_sig_lword >> QTOUCH_LIB_ROTOR_NUM_OFFSET)
			& QTOUCH_LIB_ROTOR_NUM_MASK);

	printf("Version 0x%X\n\r", plib_sig.library_version);
  400bae:	486b      	ldr	r0, [pc, #428]	; (400d5c <main+0x324>)
  400bb0:	f8bd 1020 	ldrh.w	r1, [sp, #32]
  400bb4:	47a0      	blx	r4
	printf("\n\r");
  400bb6:	486a      	ldr	r0, [pc, #424]	; (400d60 <main+0x328>)
  400bb8:	47a0      	blx	r4
#if defined BOARD_KEY_NUM_5
	uint8_t vld_pressed = 0;
	uint8_t up_pressed = 0;
	uint8_t dwn_pressed = 0;
	uint8_t lft_pressed = 0;
	uint8_t rgt_pressed = 0;
  400bba:	f04f 0800 	mov.w	r8, #0

#if defined BOARD_KEY_NUM_5
	uint8_t vld_pressed = 0;
	uint8_t up_pressed = 0;
	uint8_t dwn_pressed = 0;
	uint8_t lft_pressed = 0;
  400bbe:	46c3      	mov	fp, r8
	uint16_t burst_flag = 0u;

#if defined BOARD_KEY_NUM_5
	uint8_t vld_pressed = 0;
	uint8_t up_pressed = 0;
	uint8_t dwn_pressed = 0;
  400bc0:	46c2      	mov	sl, r8
	uint16_t status_flag = 0u;
	uint16_t burst_flag = 0u;

#if defined BOARD_KEY_NUM_5
	uint8_t vld_pressed = 0;
	uint8_t up_pressed = 0;
  400bc2:	46c1      	mov	r9, r8
	/*Status flags to indicate the re-burst for library */
	uint16_t status_flag = 0u;
	uint16_t burst_flag = 0u;

#if defined BOARD_KEY_NUM_5
	uint8_t vld_pressed = 0;
  400bc4:	f8cd 8014 	str.w	r8, [sp, #20]
	trace_library_info();

	/* Loop forever */
	for (;;) {

		if (time_to_measure_touch) {
  400bc8:	4f66      	ldr	r7, [pc, #408]	; (400d64 <main+0x32c>)
			/* Clear flag: it's time to measure touch */
			time_to_measure_touch = 0u;

			do {
				/*  One time measure touch sensors    */
				status_flag = qt_measure_sensors
  400bca:	4d59      	ldr	r5, [pc, #356]	; (400d30 <main+0x2f8>)
  400bcc:	4c59      	ldr	r4, [pc, #356]	; (400d34 <main+0x2fc>)
			} while (burst_flag);
		}

		/*  Time Non-critical host application code goes here */
#if defined BOARD_KEY_NUM_5
		if ((GET_SENSOR_STATE(BOARD_VALID_KEY_ID) != 0)
  400bce:	4e66      	ldr	r6, [pc, #408]	; (400d68 <main+0x330>)
	trace_library_info();

	/* Loop forever */
	for (;;) {

		if (time_to_measure_touch) {
  400bd0:	783b      	ldrb	r3, [r7, #0]
  400bd2:	f013 0fff 	tst.w	r3, #255	; 0xff
  400bd6:	d009      	beq.n	400bec <main+0x1b4>

			/* Clear flag: it's time to measure touch */
			time_to_measure_touch = 0u;
  400bd8:	2300      	movs	r3, #0
  400bda:	703b      	strb	r3, [r7, #0]

			do {
				/*  One time measure touch sensors    */
				status_flag = qt_measure_sensors
  400bdc:	8828      	ldrh	r0, [r5, #0]
  400bde:	b280      	uxth	r0, r0
  400be0:	47a0      	blx	r4
						(current_time_ms_touch);

				burst_flag = status_flag & QTLIB_BURST_AGAIN;
  400be2:	f400 7080 	and.w	r0, r0, #256	; 0x100

				/*Time critical host application code goes here */

			} while (burst_flag);
  400be6:	b280      	uxth	r0, r0
  400be8:	2800      	cmp	r0, #0
  400bea:	d1f7      	bne.n	400bdc <main+0x1a4>
		}

		/*  Time Non-critical host application code goes here */
#if defined BOARD_KEY_NUM_5
		if ((GET_SENSOR_STATE(BOARD_VALID_KEY_ID) != 0)
  400bec:	f896 3080 	ldrb.w	r3, [r6, #128]	; 0x80
  400bf0:	f013 0f01 	tst.w	r3, #1
  400bf4:	d007      	beq.n	400c06 <main+0x1ce>
				&& (vld_pressed == 0)) {
  400bf6:	9b05      	ldr	r3, [sp, #20]
  400bf8:	b963      	cbnz	r3, 400c14 <main+0x1dc>
			vld_pressed = 1;
			printf("Valid Press \n\r");
  400bfa:	485c      	ldr	r0, [pc, #368]	; (400d6c <main+0x334>)
  400bfc:	4b3e      	ldr	r3, [pc, #248]	; (400cf8 <main+0x2c0>)
  400bfe:	4798      	blx	r3

		/*  Time Non-critical host application code goes here */
#if defined BOARD_KEY_NUM_5
		if ((GET_SENSOR_STATE(BOARD_VALID_KEY_ID) != 0)
				&& (vld_pressed == 0)) {
			vld_pressed = 1;
  400c00:	2301      	movs	r3, #1
  400c02:	9305      	str	r3, [sp, #20]
			printf("Valid Press \n\r");
  400c04:	e006      	b.n	400c14 <main+0x1dc>
		} else {
			if ((GET_SENSOR_STATE(BOARD_VALID_KEY_ID) == 0)
					&& (vld_pressed == 1)) {
  400c06:	9b05      	ldr	r3, [sp, #20]
  400c08:	b123      	cbz	r3, 400c14 <main+0x1dc>
				printf("Valid Release \n\r");
  400c0a:	4859      	ldr	r0, [pc, #356]	; (400d70 <main+0x338>)
  400c0c:	4b3a      	ldr	r3, [pc, #232]	; (400cf8 <main+0x2c0>)
  400c0e:	4798      	blx	r3
				vld_pressed = 0;
  400c10:	2300      	movs	r3, #0
  400c12:	9305      	str	r3, [sp, #20]
			}
		}
		if ((GET_SENSOR_STATE(BOARD_UP_KEY_ID) != 0)
  400c14:	f896 3080 	ldrb.w	r3, [r6, #128]	; 0x80
  400c18:	f013 0f02 	tst.w	r3, #2
  400c1c:	d008      	beq.n	400c30 <main+0x1f8>
				&& (up_pressed == 0)) {
  400c1e:	f1b9 0f00 	cmp.w	r9, #0
  400c22:	d10d      	bne.n	400c40 <main+0x208>
			up_pressed = 1;
			printf("Up Key Press \n\r");
  400c24:	4853      	ldr	r0, [pc, #332]	; (400d74 <main+0x33c>)
  400c26:	4b34      	ldr	r3, [pc, #208]	; (400cf8 <main+0x2c0>)
  400c28:	4798      	blx	r3
				vld_pressed = 0;
			}
		}
		if ((GET_SENSOR_STATE(BOARD_UP_KEY_ID) != 0)
				&& (up_pressed == 0)) {
			up_pressed = 1;
  400c2a:	f04f 0901 	mov.w	r9, #1
			printf("Up Key Press \n\r");
  400c2e:	e007      	b.n	400c40 <main+0x208>
		} else {
			if ((GET_SENSOR_STATE(BOARD_UP_KEY_ID) == 0)
					&& (up_pressed == 1)) {
  400c30:	f1b9 0f00 	cmp.w	r9, #0
  400c34:	d004      	beq.n	400c40 <main+0x208>
				printf("Up Key Release \n\r");
  400c36:	4850      	ldr	r0, [pc, #320]	; (400d78 <main+0x340>)
  400c38:	4b2f      	ldr	r3, [pc, #188]	; (400cf8 <main+0x2c0>)
  400c3a:	4798      	blx	r3
				up_pressed = 0;
  400c3c:	f04f 0900 	mov.w	r9, #0
			}
		}
		if ((GET_SENSOR_STATE(BOARD_DOWN_KEY_ID) != 0)
  400c40:	f896 3080 	ldrb.w	r3, [r6, #128]	; 0x80
  400c44:	f013 0f04 	tst.w	r3, #4
  400c48:	d008      	beq.n	400c5c <main+0x224>
				&& (dwn_pressed == 0)) {
  400c4a:	f1ba 0f00 	cmp.w	sl, #0
  400c4e:	d10d      	bne.n	400c6c <main+0x234>
			dwn_pressed = 1;
			printf("Down Key Press \n\r");
  400c50:	484a      	ldr	r0, [pc, #296]	; (400d7c <main+0x344>)
  400c52:	4b29      	ldr	r3, [pc, #164]	; (400cf8 <main+0x2c0>)
  400c54:	4798      	blx	r3
				up_pressed = 0;
			}
		}
		if ((GET_SENSOR_STATE(BOARD_DOWN_KEY_ID) != 0)
				&& (dwn_pressed == 0)) {
			dwn_pressed = 1;
  400c56:	f04f 0a01 	mov.w	sl, #1
			printf("Down Key Press \n\r");
  400c5a:	e007      	b.n	400c6c <main+0x234>
		} else {
			if ((GET_SENSOR_STATE(BOARD_DOWN_KEY_ID) == 0)
					&& (dwn_pressed == 1)) {
  400c5c:	f1ba 0f00 	cmp.w	sl, #0
  400c60:	d004      	beq.n	400c6c <main+0x234>
				printf("Down Key Release \n\r");
  400c62:	4847      	ldr	r0, [pc, #284]	; (400d80 <main+0x348>)
  400c64:	4b24      	ldr	r3, [pc, #144]	; (400cf8 <main+0x2c0>)
  400c66:	4798      	blx	r3
				dwn_pressed = 0;
  400c68:	f04f 0a00 	mov.w	sl, #0
			}
		}
		if ((GET_SENSOR_STATE(BOARD_LEFT_KEY_ID) != 0)
  400c6c:	f896 3080 	ldrb.w	r3, [r6, #128]	; 0x80
  400c70:	f013 0f08 	tst.w	r3, #8
  400c74:	d008      	beq.n	400c88 <main+0x250>
				&& (lft_pressed == 0)) {
  400c76:	f1bb 0f00 	cmp.w	fp, #0
  400c7a:	d10d      	bne.n	400c98 <main+0x260>
			lft_pressed = 1;
			printf("Left Key Press \n\r");
  400c7c:	4841      	ldr	r0, [pc, #260]	; (400d84 <main+0x34c>)
  400c7e:	4b1e      	ldr	r3, [pc, #120]	; (400cf8 <main+0x2c0>)
  400c80:	4798      	blx	r3
				dwn_pressed = 0;
			}
		}
		if ((GET_SENSOR_STATE(BOARD_LEFT_KEY_ID) != 0)
				&& (lft_pressed == 0)) {
			lft_pressed = 1;
  400c82:	f04f 0b01 	mov.w	fp, #1
			printf("Left Key Press \n\r");
  400c86:	e007      	b.n	400c98 <main+0x260>
		} else {
			if ((GET_SENSOR_STATE(BOARD_LEFT_KEY_ID) == 0)
					&& (lft_pressed == 1)) {
  400c88:	f1bb 0f00 	cmp.w	fp, #0
  400c8c:	d004      	beq.n	400c98 <main+0x260>
				printf("Left Key Release \n\r");
  400c8e:	483e      	ldr	r0, [pc, #248]	; (400d88 <main+0x350>)
  400c90:	4b19      	ldr	r3, [pc, #100]	; (400cf8 <main+0x2c0>)
  400c92:	4798      	blx	r3
				lft_pressed = 0;
  400c94:	f04f 0b00 	mov.w	fp, #0
			}
		}
		if ((GET_SENSOR_STATE(BOARD_RIGHT_KEY_ID) != 0)
  400c98:	f896 3080 	ldrb.w	r3, [r6, #128]	; 0x80
  400c9c:	f013 0f10 	tst.w	r3, #16
  400ca0:	d076      	beq.n	400d90 <main+0x358>
				&& (rgt_pressed == 0)) {
  400ca2:	f1b8 0f00 	cmp.w	r8, #0
  400ca6:	d17b      	bne.n	400da0 <main+0x368>
			rgt_pressed = 1;
			printf("Right Key Press \n\r");
  400ca8:	4838      	ldr	r0, [pc, #224]	; (400d8c <main+0x354>)
  400caa:	4b13      	ldr	r3, [pc, #76]	; (400cf8 <main+0x2c0>)
  400cac:	4798      	blx	r3
				lft_pressed = 0;
			}
		}
		if ((GET_SENSOR_STATE(BOARD_RIGHT_KEY_ID) != 0)
				&& (rgt_pressed == 0)) {
			rgt_pressed = 1;
  400cae:	f04f 0801 	mov.w	r8, #1
			printf("Right Key Press \n\r");
  400cb2:	e075      	b.n	400da0 <main+0x368>
  400cb4:	400e1450 	.word	0x400e1450
  400cb8:	00400659 	.word	0x00400659
  400cbc:	00400129 	.word	0x00400129
  400cc0:	400e0e00 	.word	0x400e0e00
  400cc4:	00400311 	.word	0x00400311
  400cc8:	0040057d 	.word	0x0040057d
  400ccc:	400e0600 	.word	0x400e0600
  400cd0:	20000b54 	.word	0x20000b54
  400cd4:	00400995 	.word	0x00400995
  400cd8:	20000b50 	.word	0x20000b50
  400cdc:	0040090d 	.word	0x0040090d
  400ce0:	20000b4c 	.word	0x20000b4c
  400ce4:	07270e00 	.word	0x07270e00
  400ce8:	004005d1 	.word	0x004005d1
  400cec:	20000430 	.word	0x20000430
  400cf0:	00402a91 	.word	0x00402a91
  400cf4:	00404eb8 	.word	0x00404eb8
  400cf8:	0040247d 	.word	0x0040247d
  400cfc:	00401341 	.word	0x00401341
  400d00:	00401459 	.word	0x00401459
  400d04:	00401c55 	.word	0x00401c55
  400d08:	00400de9 	.word	0x00400de9
  400d0c:	00401a21 	.word	0x00401a21
  400d10:	004012f5 	.word	0x004012f5
  400d14:	20000910 	.word	0x20000910
  400d18:	20000004 	.word	0x20000004
  400d1c:	00404f08 	.word	0x00404f08
  400d20:	0001d4c0 	.word	0x0001d4c0
  400d24:	e000e010 	.word	0xe000e010
  400d28:	e000ed00 	.word	0xe000ed00
  400d2c:	20000918 	.word	0x20000918
  400d30:	20000902 	.word	0x20000902
  400d34:	0040137d 	.word	0x0040137d
  400d38:	0040132d 	.word	0x0040132d
  400d3c:	00404f38 	.word	0x00404f38
  400d40:	00404f48 	.word	0x00404f48
  400d44:	00404f5c 	.word	0x00404f5c
  400d48:	00404f68 	.word	0x00404f68
  400d4c:	00404f74 	.word	0x00404f74
  400d50:	00404f88 	.word	0x00404f88
  400d54:	00404fa0 	.word	0x00404fa0
  400d58:	00404fc4 	.word	0x00404fc4
  400d5c:	00404fec 	.word	0x00404fec
  400d60:	00404fe8 	.word	0x00404fe8
  400d64:	20000900 	.word	0x20000900
  400d68:	20000920 	.word	0x20000920
  400d6c:	00404ffc 	.word	0x00404ffc
  400d70:	0040500c 	.word	0x0040500c
  400d74:	00405020 	.word	0x00405020
  400d78:	00405030 	.word	0x00405030
  400d7c:	00405044 	.word	0x00405044
  400d80:	00405058 	.word	0x00405058
  400d84:	0040506c 	.word	0x0040506c
  400d88:	00405080 	.word	0x00405080
  400d8c:	00405094 	.word	0x00405094
		} else {
			if ((GET_SENSOR_STATE(BOARD_RIGHT_KEY_ID) == 0)
					&& (rgt_pressed == 1)) {
  400d90:	f1b8 0f00 	cmp.w	r8, #0
  400d94:	d004      	beq.n	400da0 <main+0x368>
				printf("Right Key Release \n\r");
  400d96:	480d      	ldr	r0, [pc, #52]	; (400dcc <main+0x394>)
  400d98:	4b0d      	ldr	r3, [pc, #52]	; (400dd0 <main+0x398>)
  400d9a:	4798      	blx	r3
				rgt_pressed = 0;
  400d9c:	f04f 0800 	mov.w	r8, #0
				rgt_pressed = 0;
			}
		}
#endif

		if (GET_ROTOR_SLIDER_POSITION(0) != old_position) {
  400da0:	f896 1084 	ldrb.w	r1, [r6, #132]	; 0x84
  400da4:	4b0b      	ldr	r3, [pc, #44]	; (400dd4 <main+0x39c>)
  400da6:	781b      	ldrb	r3, [r3, #0]
  400da8:	428b      	cmp	r3, r1
  400daa:	d004      	beq.n	400db6 <main+0x37e>
			old_position = GET_ROTOR_SLIDER_POSITION(0);
  400dac:	4b09      	ldr	r3, [pc, #36]	; (400dd4 <main+0x39c>)
  400dae:	7019      	strb	r1, [r3, #0]
			printf("%d ", old_position);
  400db0:	4809      	ldr	r0, [pc, #36]	; (400dd8 <main+0x3a0>)
  400db2:	4b07      	ldr	r3, [pc, #28]	; (400dd0 <main+0x398>)
  400db4:	4798      	blx	r3
		}
#if defined (  __GNUC__  )
		fflush(stdout);
  400db6:	4b09      	ldr	r3, [pc, #36]	; (400ddc <main+0x3a4>)
  400db8:	681b      	ldr	r3, [r3, #0]
  400dba:	6898      	ldr	r0, [r3, #8]
  400dbc:	4b08      	ldr	r3, [pc, #32]	; (400de0 <main+0x3a8>)
  400dbe:	4798      	blx	r3
#endif
	}
  400dc0:	e706      	b.n	400bd0 <main+0x198>
{
	printf("Configure sys tick to get %u ms tick period.\n\r",
			qt_measurement_period_msec);
	if (SysTick_Config((sysclk_get_cpu_hz() / 1000) *
					qt_measurement_period_msec)) {
		printf("-F- Systick configuration error\n\r");
  400dc2:	4808      	ldr	r0, [pc, #32]	; (400de4 <main+0x3ac>)
  400dc4:	4b02      	ldr	r3, [pc, #8]	; (400dd0 <main+0x398>)
  400dc6:	4798      	blx	r3
  400dc8:	e6be      	b.n	400b48 <main+0x110>
  400dca:	bf00      	nop
  400dcc:	004050a8 	.word	0x004050a8
  400dd0:	0040247d 	.word	0x0040247d
  400dd4:	20000901 	.word	0x20000901
  400dd8:	004050c0 	.word	0x004050c0
  400ddc:	20000430 	.word	0x20000430
  400de0:	00402059 	.word	0x00402059
  400de4:	004050c4 	.word	0x004050c4

00400de8 <burst_5_CC_AA>:
  400de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400dec:	b097      	sub	sp, #92	; 0x5c
  400dee:	4605      	mov	r5, r0
  400df0:	f000 fb8a 	bl	401508 <q_get_PRIMASK>
  400df4:	4a8b      	ldr	r2, [pc, #556]	; (401024 <burst_5_CC_AA+0x23c>)
  400df6:	9003      	str	r0, [sp, #12]
  400df8:	7811      	ldrb	r1, [r2, #0]
  400dfa:	4c8b      	ldr	r4, [pc, #556]	; (401028 <burst_5_CC_AA+0x240>)
  400dfc:	f8df 9254 	ldr.w	r9, [pc, #596]	; 401054 <burst_5_CC_AA+0x26c>
  400e00:	2300      	movs	r3, #0
  400e02:	2901      	cmp	r1, #1
  400e04:	9315      	str	r3, [sp, #84]	; 0x54
  400e06:	4692      	mov	sl, r2
  400e08:	d03d      	beq.n	400e86 <burst_5_CC_AA+0x9e>
  400e0a:	f8b9 0002 	ldrh.w	r0, [r9, #2]
  400e0e:	6861      	ldr	r1, [r4, #4]
  400e10:	f8c9 0008 	str.w	r0, [r9, #8]
  400e14:	2201      	movs	r2, #1
  400e16:	f8b9 0006 	ldrh.w	r0, [r9, #6]
  400e1a:	f88a 2000 	strb.w	r2, [sl]
  400e1e:	6822      	ldr	r2, [r4, #0]
  400e20:	f8c9 000c 	str.w	r0, [r9, #12]
  400e24:	0c10      	lsrs	r0, r2, #16
  400e26:	ea40 4011 	orr.w	r0, r0, r1, lsr #16
  400e2a:	60a0      	str	r0, [r4, #8]
  400e2c:	60e3      	str	r3, [r4, #12]
  400e2e:	9315      	str	r3, [sp, #84]	; 0x54
  400e30:	2601      	movs	r6, #1
  400e32:	409e      	lsls	r6, r3
  400e34:	9f15      	ldr	r7, [sp, #84]	; 0x54
  400e36:	4006      	ands	r6, r0
  400e38:	409e      	lsls	r6, r3
  400e3a:	3301      	adds	r3, #1
  400e3c:	433e      	orrs	r6, r7
  400e3e:	2b10      	cmp	r3, #16
  400e40:	9615      	str	r6, [sp, #84]	; 0x54
  400e42:	d1f5      	bne.n	400e30 <burst_5_CC_AA+0x48>
  400e44:	9b15      	ldr	r3, [sp, #84]	; 0x54
  400e46:	60a3      	str	r3, [r4, #8]
  400e48:	9b15      	ldr	r3, [sp, #84]	; 0x54
  400e4a:	005b      	lsls	r3, r3, #1
  400e4c:	f8c9 3008 	str.w	r3, [r9, #8]
  400e50:	ea41 0202 	orr.w	r2, r1, r2
  400e54:	2300      	movs	r3, #0
  400e56:	f8c9 300c 	str.w	r3, [r9, #12]
  400e5a:	6022      	str	r2, [r4, #0]
  400e5c:	6063      	str	r3, [r4, #4]
  400e5e:	9315      	str	r3, [sp, #84]	; 0x54
  400e60:	2101      	movs	r1, #1
  400e62:	4099      	lsls	r1, r3
  400e64:	9815      	ldr	r0, [sp, #84]	; 0x54
  400e66:	4011      	ands	r1, r2
  400e68:	4099      	lsls	r1, r3
  400e6a:	3301      	adds	r3, #1
  400e6c:	4301      	orrs	r1, r0
  400e6e:	2b10      	cmp	r3, #16
  400e70:	9115      	str	r1, [sp, #84]	; 0x54
  400e72:	d1f5      	bne.n	400e60 <burst_5_CC_AA+0x78>
  400e74:	9b15      	ldr	r3, [sp, #84]	; 0x54
  400e76:	6023      	str	r3, [r4, #0]
  400e78:	9b15      	ldr	r3, [sp, #84]	; 0x54
  400e7a:	005b      	lsls	r3, r3, #1
  400e7c:	f8c9 3000 	str.w	r3, [r9]
  400e80:	2300      	movs	r3, #0
  400e82:	f8c9 3004 	str.w	r3, [r9, #4]
  400e86:	6862      	ldr	r2, [r4, #4]
  400e88:	6823      	ldr	r3, [r4, #0]
  400e8a:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
  400e8e:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
  400e92:	4f65      	ldr	r7, [pc, #404]	; (401028 <burst_5_CC_AA+0x240>)
  400e94:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  400e98:	ea42 0303 	orr.w	r3, r2, r3
  400e9c:	930f      	str	r3, [sp, #60]	; 0x3c
  400e9e:	1cab      	adds	r3, r5, #2
  400ea0:	f04f 0b00 	mov.w	fp, #0
  400ea4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
  400ea8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
  400eac:	9214      	str	r2, [sp, #80]	; 0x50
  400eae:	9312      	str	r3, [sp, #72]	; 0x48
  400eb0:	68e2      	ldr	r2, [r4, #12]
  400eb2:	68a3      	ldr	r3, [r4, #8]
  400eb4:	9611      	str	r6, [sp, #68]	; 0x44
  400eb6:	ea42 0303 	orr.w	r3, r2, r3
  400eba:	2001      	movs	r0, #1
  400ebc:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  400ec0:	9310      	str	r3, [sp, #64]	; 0x40
  400ec2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  400ec6:	f000 fb22 	bl	40150e <q_set_PRIMASK>
  400eca:	f1b8 0f00 	cmp.w	r8, #0
  400ece:	f000 81ab 	beq.w	401228 <burst_5_CC_AA+0x440>
  400ed2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
  400ed6:	4a55      	ldr	r2, [pc, #340]	; (40102c <burst_5_CC_AA+0x244>)
  400ed8:	6013      	str	r3, [r2, #0]
  400eda:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
  400ede:	4b54      	ldr	r3, [pc, #336]	; (401030 <burst_5_CC_AA+0x248>)
  400ee0:	6019      	str	r1, [r3, #0]
  400ee2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  400ee6:	4953      	ldr	r1, [pc, #332]	; (401034 <burst_5_CC_AA+0x24c>)
  400ee8:	6008      	str	r0, [r1, #0]
  400eea:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  400eee:	465f      	mov	r7, fp
  400ef0:	6008      	str	r0, [r1, #0]
  400ef2:	f841 8c04 	str.w	r8, [r1, #-4]
  400ef6:	f841 6c04 	str.w	r6, [r1, #-4]
  400efa:	f841 8c50 	str.w	r8, [r1, #-80]
  400efe:	f841 6c50 	str.w	r6, [r1, #-80]
  400f02:	f841 8c34 	str.w	r8, [r1, #-52]
  400f06:	6016      	str	r6, [r2, #0]
  400f08:	601e      	str	r6, [r3, #0]
  400f0a:	f417 5b00 	ands.w	fp, r7, #8192	; 0x2000
  400f0e:	d164      	bne.n	400fda <burst_5_CC_AA+0x1f2>
  400f10:	9803      	ldr	r0, [sp, #12]
  400f12:	f000 fafc 	bl	40150e <q_set_PRIMASK>
  400f16:	bf00      	nop
  400f18:	2001      	movs	r0, #1
  400f1a:	f000 faf8 	bl	40150e <q_set_PRIMASK>
  400f1e:	4a46      	ldr	r2, [pc, #280]	; (401038 <burst_5_CC_AA+0x250>)
  400f20:	4b43      	ldr	r3, [pc, #268]	; (401030 <burst_5_CC_AA+0x248>)
  400f22:	6016      	str	r6, [r2, #0]
  400f24:	f8c3 8000 	str.w	r8, [r3]
  400f28:	bf00      	nop
  400f2a:	bf00      	nop
  400f2c:	bf00      	nop
  400f2e:	bf00      	nop
  400f30:	bf00      	nop
  400f32:	f8c2 8000 	str.w	r8, [r2]
  400f36:	4a41      	ldr	r2, [pc, #260]	; (40103c <burst_5_CC_AA+0x254>)
  400f38:	601e      	str	r6, [r3, #0]
  400f3a:	7813      	ldrb	r3, [r2, #0]
  400f3c:	3301      	adds	r3, #1
  400f3e:	b2db      	uxtb	r3, r3
  400f40:	3701      	adds	r7, #1
  400f42:	2b01      	cmp	r3, #1
  400f44:	b2bf      	uxth	r7, r7
  400f46:	7013      	strb	r3, [r2, #0]
  400f48:	d905      	bls.n	400f56 <burst_5_CC_AA+0x16e>
  400f4a:	2b02      	cmp	r3, #2
  400f4c:	d003      	beq.n	400f56 <burst_5_CC_AA+0x16e>
  400f4e:	2b03      	cmp	r3, #3
  400f50:	bf18      	it	ne
  400f52:	f882 b000 	strbne.w	fp, [r2]
  400f56:	4b3a      	ldr	r3, [pc, #232]	; (401040 <burst_5_CC_AA+0x258>)
  400f58:	681a      	ldr	r2, [r3, #0]
  400f5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  400f5c:	ea02 0303 	and.w	r3, r2, r3
  400f60:	930d      	str	r3, [sp, #52]	; 0x34
  400f62:	2b00      	cmp	r3, #0
  400f64:	d0d1      	beq.n	400f0a <burst_5_CC_AA+0x122>
  400f66:	6862      	ldr	r2, [r4, #4]
  400f68:	6823      	ldr	r3, [r4, #0]
  400f6a:	ea42 0303 	orr.w	r3, r2, r3
  400f6e:	930f      	str	r3, [sp, #60]	; 0x3c
  400f70:	e092      	b.n	401098 <burst_5_CC_AA+0x2b0>
  400f72:	f417 5b00 	ands.w	fp, r7, #8192	; 0x2000
  400f76:	d130      	bne.n	400fda <burst_5_CC_AA+0x1f2>
  400f78:	9803      	ldr	r0, [sp, #12]
  400f7a:	f000 fac8 	bl	40150e <q_set_PRIMASK>
  400f7e:	bf00      	nop
  400f80:	2001      	movs	r0, #1
  400f82:	f000 fac4 	bl	40150e <q_set_PRIMASK>
  400f86:	4a2f      	ldr	r2, [pc, #188]	; (401044 <burst_5_CC_AA+0x25c>)
  400f88:	4b2f      	ldr	r3, [pc, #188]	; (401048 <burst_5_CC_AA+0x260>)
  400f8a:	6016      	str	r6, [r2, #0]
  400f8c:	f8c3 8000 	str.w	r8, [r3]
  400f90:	bf00      	nop
  400f92:	bf00      	nop
  400f94:	bf00      	nop
  400f96:	bf00      	nop
  400f98:	bf00      	nop
  400f9a:	f8c2 8000 	str.w	r8, [r2]
  400f9e:	4a27      	ldr	r2, [pc, #156]	; (40103c <burst_5_CC_AA+0x254>)
  400fa0:	601e      	str	r6, [r3, #0]
  400fa2:	7813      	ldrb	r3, [r2, #0]
  400fa4:	3301      	adds	r3, #1
  400fa6:	b2db      	uxtb	r3, r3
  400fa8:	3701      	adds	r7, #1
  400faa:	2b01      	cmp	r3, #1
  400fac:	b2bf      	uxth	r7, r7
  400fae:	7013      	strb	r3, [r2, #0]
  400fb0:	d905      	bls.n	400fbe <burst_5_CC_AA+0x1d6>
  400fb2:	2b02      	cmp	r3, #2
  400fb4:	d003      	beq.n	400fbe <burst_5_CC_AA+0x1d6>
  400fb6:	2b03      	cmp	r3, #3
  400fb8:	bf18      	it	ne
  400fba:	f882 b000 	strbne.w	fp, [r2]
  400fbe:	4b23      	ldr	r3, [pc, #140]	; (40104c <burst_5_CC_AA+0x264>)
  400fc0:	681a      	ldr	r2, [r3, #0]
  400fc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  400fc4:	ea02 0303 	and.w	r3, r2, r3
  400fc8:	930e      	str	r3, [sp, #56]	; 0x38
  400fca:	2b00      	cmp	r3, #0
  400fcc:	d0d1      	beq.n	400f72 <burst_5_CC_AA+0x18a>
  400fce:	68e2      	ldr	r2, [r4, #12]
  400fd0:	68a3      	ldr	r3, [r4, #8]
  400fd2:	ea42 0303 	orr.w	r3, r2, r3
  400fd6:	9310      	str	r3, [sp, #64]	; 0x40
  400fd8:	e05e      	b.n	401098 <burst_5_CC_AA+0x2b0>
  400fda:	2300      	movs	r3, #0
  400fdc:	4912      	ldr	r1, [pc, #72]	; (401028 <burst_5_CC_AA+0x240>)
  400fde:	461a      	mov	r2, r3
  400fe0:	f8d1 e004 	ldr.w	lr, [r1, #4]
  400fe4:	6808      	ldr	r0, [r1, #0]
  400fe6:	ea4e 0000 	orr.w	r0, lr, r0
  400fea:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
  400fee:	f84e 0003 	str.w	r0, [lr, r3]
  400ff2:	f10d 0e4c 	add.w	lr, sp, #76	; 0x4c
  400ff6:	f85e c003 	ldr.w	ip, [lr, r3]
  400ffa:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
  400ffe:	f84e c003 	str.w	ip, [lr, r3]
  401002:	2800      	cmp	r0, #0
  401004:	d03f      	beq.n	401086 <burst_5_CC_AA+0x29e>
  401006:	e03a      	b.n	40107e <burst_5_CC_AA+0x296>
  401008:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
  40100c:	f85e e003 	ldr.w	lr, [lr, r3]
  401010:	f01e 0f01 	tst.w	lr, #1
  401014:	d020      	beq.n	401058 <burst_5_CC_AA+0x270>
  401016:	480e      	ldr	r0, [pc, #56]	; (401050 <burst_5_CC_AA+0x268>)
  401018:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
  40101c:	f820 c012 	strh.w	ip, [r0, r2, lsl #1]
  401020:	e01d      	b.n	40105e <burst_5_CC_AA+0x276>
  401022:	bf00      	nop
  401024:	20000904 	.word	0x20000904
  401028:	20000ad0 	.word	0x20000ad0
  40102c:	400e1234 	.word	0x400e1234
  401030:	400e1210 	.word	0x400e1210
  401034:	400e1264 	.word	0x400e1264
  401038:	400e1214 	.word	0x400e1214
  40103c:	20000006 	.word	0x20000006
  401040:	400e123c 	.word	0x400e123c
  401044:	400e0e14 	.word	0x400e0e14
  401048:	400e0e10 	.word	0x400e0e10
  40104c:	400e0e3c 	.word	0x400e0e3c
  401050:	20000920 	.word	0x20000920
  401054:	20000ae0 	.word	0x20000ae0
  401058:	f010 0f01 	tst.w	r0, #1
  40105c:	d001      	beq.n	401062 <burst_5_CC_AA+0x27a>
  40105e:	3201      	adds	r2, #1
  401060:	b2d2      	uxtb	r2, r2
  401062:	a80f      	add	r0, sp, #60	; 0x3c
  401064:	f850 e003 	ldr.w	lr, [r0, r3]
  401068:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
  40106c:	f840 e003 	str.w	lr, [r0, r3]
  401070:	a80b      	add	r0, sp, #44	; 0x2c
  401072:	f850 e003 	ldr.w	lr, [r0, r3]
  401076:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
  40107a:	f840 e003 	str.w	lr, [r0, r3]
  40107e:	a80f      	add	r0, sp, #60	; 0x3c
  401080:	58c0      	ldr	r0, [r0, r3]
  401082:	2800      	cmp	r0, #0
  401084:	d1c0      	bne.n	401008 <burst_5_CC_AA+0x220>
  401086:	3304      	adds	r3, #4
  401088:	3108      	adds	r1, #8
  40108a:	2b08      	cmp	r3, #8
  40108c:	d1a8      	bne.n	400fe0 <burst_5_CC_AA+0x1f8>
  40108e:	3b08      	subs	r3, #8
  401090:	9313      	str	r3, [sp, #76]	; 0x4c
  401092:	9311      	str	r3, [sp, #68]	; 0x44
  401094:	9314      	str	r3, [sp, #80]	; 0x50
  401096:	9312      	str	r3, [sp, #72]	; 0x48
  401098:	9803      	ldr	r0, [sp, #12]
  40109a:	f000 fa38 	bl	40150e <q_set_PRIMASK>
  40109e:	2200      	movs	r2, #0
  4010a0:	f88a 2001 	strb.w	r2, [sl, #1]
  4010a4:	4613      	mov	r3, r2
  4010a6:	4611      	mov	r1, r2
  4010a8:	9205      	str	r2, [sp, #20]
  4010aa:	9204      	str	r2, [sp, #16]
  4010ac:	4610      	mov	r0, r2
  4010ae:	f8cd 8018 	str.w	r8, [sp, #24]
  4010b2:	9607      	str	r6, [sp, #28]
  4010b4:	46ab      	mov	fp, r5
  4010b6:	ad0f      	add	r5, sp, #60	; 0x3c
  4010b8:	58ed      	ldr	r5, [r5, r3]
  4010ba:	2d00      	cmp	r5, #0
  4010bc:	f000 8093 	beq.w	4011e6 <burst_5_CC_AA+0x3fe>
  4010c0:	ad13      	add	r5, sp, #76	; 0x4c
  4010c2:	58ed      	ldr	r5, [r5, r3]
  4010c4:	2d00      	cmp	r5, #0
  4010c6:	f000 808e 	beq.w	4011e6 <burst_5_CC_AA+0x3fe>
  4010ca:	ad0d      	add	r5, sp, #52	; 0x34
  4010cc:	9201      	str	r2, [sp, #4]
  4010ce:	58ee      	ldr	r6, [r5, r3]
  4010d0:	ad0b      	add	r5, sp, #44	; 0x2c
  4010d2:	50ee      	str	r6, [r5, r3]
  4010d4:	eb09 0502 	add.w	r5, r9, r2
  4010d8:	686e      	ldr	r6, [r5, #4]
  4010da:	f859 5002 	ldr.w	r5, [r9, r2]
  4010de:	ea46 0e05 	orr.w	lr, r6, r5
  4010e2:	00dd      	lsls	r5, r3, #3
  4010e4:	086d      	lsrs	r5, r5, #1
  4010e6:	9508      	str	r5, [sp, #32]
  4010e8:	2600      	movs	r6, #0
  4010ea:	e053      	b.n	401194 <burst_5_CC_AA+0x3ac>
  4010ec:	f015 0f01 	tst.w	r5, #1
  4010f0:	d037      	beq.n	401162 <burst_5_CC_AA+0x37a>
  4010f2:	f8dd c010 	ldr.w	ip, [sp, #16]
  4010f6:	9a01      	ldr	r2, [sp, #4]
  4010f8:	e02c      	b.n	401154 <burst_5_CC_AA+0x36c>
  4010fa:	f01e 0f01 	tst.w	lr, #1
  4010fe:	d025      	beq.n	40114c <burst_5_CC_AA+0x364>
  401100:	4560      	cmp	r0, ip
  401102:	d11f      	bne.n	401144 <burst_5_CC_AA+0x35c>
  401104:	f8cd c010 	str.w	ip, [sp, #16]
  401108:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
  40110c:	9201      	str	r2, [sp, #4]
  40110e:	f04f 0801 	mov.w	r8, #1
  401112:	f85c 2003 	ldr.w	r2, [ip, r3]
  401116:	fa08 f806 	lsl.w	r8, r8, r6
  40111a:	ea22 0208 	bic.w	r2, r2, r8
  40111e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  401122:	f84c 2003 	str.w	r2, [ip, r3]
  401126:	f015 0ffe 	tst.w	r5, #254	; 0xfe
  40112a:	9d05      	ldr	r5, [sp, #20]
  40112c:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 4012f0 <burst_5_CC_AA+0x508>
  401130:	eb08 0856 	add.w	r8, r8, r6, lsr #1
  401134:	bf08      	it	eq
  401136:	2501      	moveq	r5, #1
  401138:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  40113c:	f82c 7018 	strh.w	r7, [ip, r8, lsl #1]
  401140:	9505      	str	r5, [sp, #20]
  401142:	e011      	b.n	401168 <burst_5_CC_AA+0x380>
  401144:	f10c 0c01 	add.w	ip, ip, #1
  401148:	fa5f fc8c 	uxtb.w	ip, ip
  40114c:	3601      	adds	r6, #1
  40114e:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
  401152:	b2f6      	uxtb	r6, r6
  401154:	f1be 0f00 	cmp.w	lr, #0
  401158:	d1cf      	bne.n	4010fa <burst_5_CC_AA+0x312>
  40115a:	f8cd c010 	str.w	ip, [sp, #16]
  40115e:	9201      	str	r2, [sp, #4]
  401160:	e002      	b.n	401168 <burst_5_CC_AA+0x380>
  401162:	f01c 0f01 	tst.w	ip, #1
  401166:	d001      	beq.n	40116c <burst_5_CC_AA+0x384>
  401168:	3001      	adds	r0, #1
  40116a:	b2c0      	uxtb	r0, r0
  40116c:	ad0f      	add	r5, sp, #60	; 0x3c
  40116e:	58ed      	ldr	r5, [r5, r3]
  401170:	f015 0f01 	tst.w	r5, #1
  401174:	d001      	beq.n	40117a <burst_5_CC_AA+0x392>
  401176:	3101      	adds	r1, #1
  401178:	b2c9      	uxtb	r1, r1
  40117a:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
  40117e:	086d      	lsrs	r5, r5, #1
  401180:	f85c 8003 	ldr.w	r8, [ip, r3]
  401184:	ea4f 0858 	mov.w	r8, r8, lsr #1
  401188:	f84c 8003 	str.w	r8, [ip, r3]
  40118c:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
  401190:	f84c 5003 	str.w	r5, [ip, r3]
  401194:	ad0f      	add	r5, sp, #60	; 0x3c
  401196:	f855 c003 	ldr.w	ip, [r5, r3]
  40119a:	f1bc 0f00 	cmp.w	ip, #0
  40119e:	d003      	beq.n	4011a8 <burst_5_CC_AA+0x3c0>
  4011a0:	ad0b      	add	r5, sp, #44	; 0x2c
  4011a2:	58ed      	ldr	r5, [r5, r3]
  4011a4:	2d00      	cmp	r5, #0
  4011a6:	d1a1      	bne.n	4010ec <burst_5_CC_AA+0x304>
  4011a8:	ae13      	add	r6, sp, #76	; 0x4c
  4011aa:	ad0d      	add	r5, sp, #52	; 0x34
  4011ac:	f856 c003 	ldr.w	ip, [r6, r3]
  4011b0:	f855 e003 	ldr.w	lr, [r5, r3]
  4011b4:	f8dd 8014 	ldr.w	r8, [sp, #20]
  4011b8:	9a01      	ldr	r2, [sp, #4]
  4011ba:	ea2c 0e0e 	bic.w	lr, ip, lr
  4011be:	f846 e003 	str.w	lr, [r6, r3]
  4011c2:	2600      	movs	r6, #0
  4011c4:	50ee      	str	r6, [r5, r3]
  4011c6:	ad0f      	add	r5, sp, #60	; 0x3c
  4011c8:	f1b8 0f01 	cmp.w	r8, #1
  4011cc:	50ee      	str	r6, [r5, r3]
  4011ce:	d11c      	bne.n	40120a <burst_5_CC_AA+0x422>
  4011d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4011d4:	9e07      	ldr	r6, [sp, #28]
  4011d6:	f88a 1001 	strb.w	r1, [sl, #1]
  4011da:	465d      	mov	r5, fp
  4011dc:	f1be 0f00 	cmp.w	lr, #0
  4011e0:	bf08      	it	eq
  4011e2:	2700      	moveq	r7, #0
  4011e4:	e01c      	b.n	401220 <burst_5_CC_AA+0x438>
  4011e6:	18a5      	adds	r5, r4, r2
  4011e8:	686e      	ldr	r6, [r5, #4]
  4011ea:	58a5      	ldr	r5, [r4, r2]
  4011ec:	ea46 0505 	orr.w	r5, r6, r5
  4011f0:	e007      	b.n	401202 <burst_5_CC_AA+0x41a>
  4011f2:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4011f4:	f015 0f01 	tst.w	r5, #1
  4011f8:	d001      	beq.n	4011fe <burst_5_CC_AA+0x416>
  4011fa:	3101      	adds	r1, #1
  4011fc:	b2c9      	uxtb	r1, r1
  4011fe:	9d15      	ldr	r5, [sp, #84]	; 0x54
  401200:	086d      	lsrs	r5, r5, #1
  401202:	9515      	str	r5, [sp, #84]	; 0x54
  401204:	9d15      	ldr	r5, [sp, #84]	; 0x54
  401206:	2d00      	cmp	r5, #0
  401208:	d1f3      	bne.n	4011f2 <burst_5_CC_AA+0x40a>
  40120a:	3304      	adds	r3, #4
  40120c:	3208      	adds	r2, #8
  40120e:	2b08      	cmp	r3, #8
  401210:	f47f af51 	bne.w	4010b6 <burst_5_CC_AA+0x2ce>
  401214:	f8dd 8018 	ldr.w	r8, [sp, #24]
  401218:	9e07      	ldr	r6, [sp, #28]
  40121a:	f88a 1001 	strb.w	r1, [sl, #1]
  40121e:	465d      	mov	r5, fp
  401220:	2001      	movs	r0, #1
  401222:	f000 f974 	bl	40150e <q_set_PRIMASK>
  401226:	e001      	b.n	40122c <burst_5_CC_AA+0x444>
  401228:	4646      	mov	r6, r8
  40122a:	4647      	mov	r7, r8
  40122c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40122e:	2b00      	cmp	r3, #0
  401230:	f47f ae6b 	bne.w	400f0a <burst_5_CC_AA+0x122>
  401234:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401236:	b1eb      	cbz	r3, 401274 <burst_5_CC_AA+0x48c>
  401238:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
  40123c:	4a29      	ldr	r2, [pc, #164]	; (4012e4 <burst_5_CC_AA+0x4fc>)
  40123e:	6011      	str	r1, [r2, #0]
  401240:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
  401244:	f842 1c24 	str.w	r1, [r2, #-36]
  401248:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
  40124c:	6311      	str	r1, [r2, #48]	; 0x30
  40124e:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
  401252:	6311      	str	r1, [r2, #48]	; 0x30
  401254:	9e12      	ldr	r6, [sp, #72]	; 0x48
  401256:	4a24      	ldr	r2, [pc, #144]	; (4012e8 <burst_5_CC_AA+0x500>)
  401258:	4698      	mov	r8, r3
  40125a:	6013      	str	r3, [r2, #0]
  40125c:	6016      	str	r6, [r2, #0]
  40125e:	f842 3c4c 	str.w	r3, [r2, #-76]
  401262:	f842 6c4c 	str.w	r6, [r2, #-76]
  401266:	f842 3c30 	str.w	r3, [r2, #-48]
  40126a:	f842 6c2c 	str.w	r6, [r2, #-44]
  40126e:	f842 6c50 	str.w	r6, [r2, #-80]
  401272:	e00e      	b.n	401292 <burst_5_CC_AA+0x4aa>
  401274:	1cab      	adds	r3, r5, #2
  401276:	4a1d      	ldr	r2, [pc, #116]	; (4012ec <burst_5_CC_AA+0x504>)
  401278:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
  40127c:	6011      	str	r1, [r2, #0]
  40127e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
  401282:	f842 1c24 	str.w	r1, [r2, #-36]
  401286:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
  40128a:	6311      	str	r1, [r2, #48]	; 0x30
  40128c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  401290:	6313      	str	r3, [r2, #48]	; 0x30
  401292:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401294:	2b00      	cmp	r3, #0
  401296:	f47f ae6c 	bne.w	400f72 <burst_5_CC_AA+0x18a>
  40129a:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
  40129e:	4a11      	ldr	r2, [pc, #68]	; (4012e4 <burst_5_CC_AA+0x4fc>)
  4012a0:	9803      	ldr	r0, [sp, #12]
  4012a2:	6011      	str	r1, [r2, #0]
  4012a4:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
  4012a8:	f842 1c24 	str.w	r1, [r2, #-36]
  4012ac:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
  4012b0:	6311      	str	r1, [r2, #48]	; 0x30
  4012b2:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
  4012b6:	3502      	adds	r5, #2
  4012b8:	6311      	str	r1, [r2, #48]	; 0x30
  4012ba:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
  4012be:	4a0b      	ldr	r2, [pc, #44]	; (4012ec <burst_5_CC_AA+0x504>)
  4012c0:	6011      	str	r1, [r2, #0]
  4012c2:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
  4012c6:	f842 1c24 	str.w	r1, [r2, #-36]
  4012ca:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
  4012ce:	6311      	str	r1, [r2, #48]	; 0x30
  4012d0:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
  4012d4:	6311      	str	r1, [r2, #48]	; 0x30
  4012d6:	f88a 3002 	strb.w	r3, [sl, #2]
  4012da:	b017      	add	sp, #92	; 0x5c
  4012dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012e0:	f000 b915 	b.w	40150e <q_set_PRIMASK>
  4012e4:	400e1234 	.word	0x400e1234
  4012e8:	400e0e60 	.word	0x400e0e60
  4012ec:	400e0e34 	.word	0x400e0e34
  4012f0:	20000920 	.word	0x20000920

004012f4 <qt_init_sensing_with_burst>:
  4012f4:	b570      	push	{r4, r5, r6, lr}
  4012f6:	4604      	mov	r4, r0
  4012f8:	460e      	mov	r6, r1
  4012fa:	2500      	movs	r5, #0
  4012fc:	e004      	b.n	401308 <qt_init_sensing_with_burst+0x14>
  4012fe:	4628      	mov	r0, r5
  401300:	f000 f938 	bl	401574 <start_cal_sensor>
  401304:	3501      	adds	r5, #1
  401306:	b2ed      	uxtb	r5, r5
  401308:	4b06      	ldr	r3, [pc, #24]	; (401324 <qt_init_sensing_with_burst+0x30>)
  40130a:	781b      	ldrb	r3, [r3, #0]
  40130c:	42ab      	cmp	r3, r5
  40130e:	d8f6      	bhi.n	4012fe <qt_init_sensing_with_burst+0xa>
  401310:	4b05      	ldr	r3, [pc, #20]	; (401328 <qt_init_sensing_with_burst+0x34>)
  401312:	2200      	movs	r2, #0
  401314:	4630      	mov	r0, r6
  401316:	801a      	strh	r2, [r3, #0]
  401318:	605c      	str	r4, [r3, #4]
  40131a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  40131e:	f000 bb53 	b.w	4019c8 <burst_init>
  401322:	bf00      	nop
  401324:	20000acd 	.word	0x20000acd
  401328:	20000908 	.word	0x20000908

0040132c <qt_get_library_sig>:
  40132c:	f44f 438a 	mov.w	r3, #17664	; 0x4500
  401330:	8003      	strh	r3, [r0, #0]
  401332:	2300      	movs	r3, #0
  401334:	8043      	strh	r3, [r0, #2]
  401336:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  40133a:	8083      	strh	r3, [r0, #4]
  40133c:	4770      	bx	lr
	...

00401340 <qt_reset_sensing>:
  401340:	b538      	push	{r3, r4, r5, lr}
  401342:	4b0b      	ldr	r3, [pc, #44]	; (401370 <qt_reset_sensing+0x30>)
  401344:	4c0b      	ldr	r4, [pc, #44]	; (401374 <qt_reset_sensing+0x34>)
  401346:	2500      	movs	r5, #0
  401348:	701d      	strb	r5, [r3, #0]
  40134a:	4b0b      	ldr	r3, [pc, #44]	; (401378 <qt_reset_sensing+0x38>)
  40134c:	72e5      	strb	r5, [r4, #11]
  40134e:	701d      	strb	r5, [r3, #0]
  401350:	2304      	movs	r3, #4
  401352:	7263      	strb	r3, [r4, #9]
  401354:	3310      	adds	r3, #16
  401356:	7323      	strb	r3, [r4, #12]
  401358:	72a3      	strb	r3, [r4, #10]
  40135a:	3b13      	subs	r3, #19
  40135c:	2205      	movs	r2, #5
  40135e:	7223      	strb	r3, [r4, #8]
  401360:	3302      	adds	r3, #2
  401362:	7362      	strb	r2, [r4, #13]
  401364:	73a3      	strb	r3, [r4, #14]
  401366:	f000 fb33 	bl	4019d0 <burst_reset>
  40136a:	6125      	str	r5, [r4, #16]
  40136c:	bd38      	pop	{r3, r4, r5, pc}
  40136e:	bf00      	nop
  401370:	20000acd 	.word	0x20000acd
  401374:	20000908 	.word	0x20000908
  401378:	20000af0 	.word	0x20000af0

0040137c <qt_measure_sensors>:
  40137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40137e:	4c31      	ldr	r4, [pc, #196]	; (401444 <qt_measure_sensors+0xc8>)
  401380:	2300      	movs	r3, #0
  401382:	82a3      	strh	r3, [r4, #20]
  401384:	8ae2      	ldrh	r2, [r4, #22]
  401386:	8823      	ldrh	r3, [r4, #0]
  401388:	8020      	strh	r0, [r4, #0]
  40138a:	1ad3      	subs	r3, r2, r3
  40138c:	18c0      	adds	r0, r0, r3
  40138e:	b280      	uxth	r0, r0
  401390:	2500      	movs	r5, #0
  401392:	e003      	b.n	40139c <qt_measure_sensors+0x20>
  401394:	38c8      	subs	r0, #200	; 0xc8
  401396:	3501      	adds	r5, #1
  401398:	b280      	uxth	r0, r0
  40139a:	b2ed      	uxtb	r5, r5
  40139c:	28c7      	cmp	r0, #199	; 0xc7
  40139e:	d8f9      	bhi.n	401394 <qt_measure_sensors+0x18>
  4013a0:	4b29      	ldr	r3, [pc, #164]	; (401448 <qt_measure_sensors+0xcc>)
  4013a2:	82e0      	strh	r0, [r4, #22]
  4013a4:	781a      	ldrb	r2, [r3, #0]
  4013a6:	b12a      	cbz	r2, 4013b4 <qt_measure_sensors+0x38>
  4013a8:	4295      	cmp	r5, r2
  4013aa:	d901      	bls.n	4013b0 <qt_measure_sensors+0x34>
  4013ac:	2200      	movs	r2, #0
  4013ae:	e000      	b.n	4013b2 <qt_measure_sensors+0x36>
  4013b0:	1b52      	subs	r2, r2, r5
  4013b2:	701a      	strb	r2, [r3, #0]
  4013b4:	4b25      	ldr	r3, [pc, #148]	; (40144c <qt_measure_sensors+0xd0>)
  4013b6:	681b      	ldr	r3, [r3, #0]
  4013b8:	f003 637f 	and.w	r3, r3, #267386880	; 0xff00000
  4013bc:	089b      	lsrs	r3, r3, #2
  4013be:	f1b3 7f1a 	cmp.w	r3, #40370176	; 0x2680000
  4013c2:	d002      	beq.n	4013ca <qt_measure_sensors+0x4e>
  4013c4:	f1b3 7f0a 	cmp.w	r3, #36175872	; 0x2280000
  4013c8:	d101      	bne.n	4013ce <qt_measure_sensors+0x52>
  4013ca:	f000 fb0f 	bl	4019ec <burst>
  4013ce:	6923      	ldr	r3, [r4, #16]
  4013d0:	b103      	cbz	r3, 4013d4 <qt_measure_sensors+0x58>
  4013d2:	4798      	blx	r3
  4013d4:	2600      	movs	r6, #0
  4013d6:	4637      	mov	r7, r6
  4013d8:	e008      	b.n	4013ec <qt_measure_sensors+0x70>
  4013da:	4638      	mov	r0, r7
  4013dc:	4629      	mov	r1, r5
  4013de:	f000 f8d9 	bl	401594 <process_sensor>
  4013e2:	3701      	adds	r7, #1
  4013e4:	ea40 0606 	orr.w	r6, r0, r6
  4013e8:	b2f6      	uxtb	r6, r6
  4013ea:	b2ff      	uxtb	r7, r7
  4013ec:	4b18      	ldr	r3, [pc, #96]	; (401450 <qt_measure_sensors+0xd4>)
  4013ee:	7819      	ldrb	r1, [r3, #0]
  4013f0:	428f      	cmp	r7, r1
  4013f2:	d3f2      	bcc.n	4013da <qt_measure_sensors+0x5e>
  4013f4:	b11e      	cbz	r6, 4013fe <qt_measure_sensors+0x82>
  4013f6:	8aa3      	ldrh	r3, [r4, #20]
  4013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4013fc:	82a3      	strh	r3, [r4, #20]
  4013fe:	2300      	movs	r3, #0
  401400:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  401404:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  401408:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  40140c:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  401410:	461a      	mov	r2, r3
  401412:	e013      	b.n	40143c <qt_measure_sensors+0xc0>
  401414:	480f      	ldr	r0, [pc, #60]	; (401454 <qt_measure_sensors+0xd8>)
  401416:	5c10      	ldrb	r0, [r2, r0]
  401418:	f010 0f18 	tst.w	r0, #24
  40141c:	d00b      	beq.n	401436 <qt_measure_sensors+0xba>
  40141e:	eb04 00d3 	add.w	r0, r4, r3, lsr #3
  401422:	2601      	movs	r6, #1
  401424:	f003 0507 	and.w	r5, r3, #7
  401428:	fa16 f505 	lsls.w	r5, r6, r5
  40142c:	f890 6098 	ldrb.w	r6, [r0, #152]	; 0x98
  401430:	4335      	orrs	r5, r6
  401432:	f880 5098 	strb.w	r5, [r0, #152]	; 0x98
  401436:	3301      	adds	r3, #1
  401438:	b2db      	uxtb	r3, r3
  40143a:	3208      	adds	r2, #8
  40143c:	428b      	cmp	r3, r1
  40143e:	d1e9      	bne.n	401414 <qt_measure_sensors+0x98>
  401440:	8aa0      	ldrh	r0, [r4, #20]
  401442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401444:	20000908 	.word	0x20000908
  401448:	20000acc 	.word	0x20000acc
  40144c:	400e0740 	.word	0x400e0740
  401450:	20000acd 	.word	0x20000acd
  401454:	200009ac 	.word	0x200009ac

00401458 <qt_enable_key>:
  401458:	b570      	push	{r4, r5, r6, lr}
  40145a:	4d09      	ldr	r5, [pc, #36]	; (401480 <qt_enable_key+0x28>)
  40145c:	4c09      	ldr	r4, [pc, #36]	; (401484 <qt_enable_key+0x2c>)
  40145e:	782e      	ldrb	r6, [r5, #0]
  401460:	f001 0107 	and.w	r1, r1, #7
  401464:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  401468:	f003 0303 	and.w	r3, r3, #3
  40146c:	ea43 01c1 	orr.w	r1, r3, r1, lsl #3
  401470:	3601      	adds	r6, #1
  401472:	70e2      	strb	r2, [r4, #3]
  401474:	7160      	strb	r0, [r4, #5]
  401476:	71a0      	strb	r0, [r4, #6]
  401478:	7121      	strb	r1, [r4, #4]
  40147a:	702e      	strb	r6, [r5, #0]
  40147c:	bd70      	pop	{r4, r5, r6, pc}
  40147e:	bf00      	nop
  401480:	20000acd 	.word	0x20000acd
  401484:	200009ac 	.word	0x200009ac

00401488 <qt_get_sensor_delta>:
  401488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40148c:	4b1b      	ldr	r3, [pc, #108]	; (4014fc <qt_get_sensor_delta+0x74>)
  40148e:	4a1c      	ldr	r2, [pc, #112]	; (401500 <qt_get_sensor_delta+0x78>)
  401490:	eb03 05c0 	add.w	r5, r3, r0, lsl #3
  401494:	7a12      	ldrb	r2, [r2, #8]
  401496:	78ec      	ldrb	r4, [r5, #3]
  401498:	7969      	ldrb	r1, [r5, #5]
  40149a:	461f      	mov	r7, r3
  40149c:	4b19      	ldr	r3, [pc, #100]	; (401504 <qt_get_sensor_delta+0x7c>)
  40149e:	4114      	asrs	r4, r2
  4014a0:	781b      	ldrb	r3, [r3, #0]
  4014a2:	b2e4      	uxtb	r4, r4
  4014a4:	2c03      	cmp	r4, #3
  4014a6:	bf98      	it	ls
  4014a8:	2404      	movls	r4, #4
  4014aa:	4283      	cmp	r3, r0
  4014ac:	4606      	mov	r6, r0
  4014ae:	d921      	bls.n	4014f4 <qt_get_sensor_delta+0x6c>
  4014b0:	792b      	ldrb	r3, [r5, #4]
  4014b2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  4014b6:	d115      	bne.n	4014e4 <qt_get_sensor_delta+0x5c>
  4014b8:	4608      	mov	r0, r1
  4014ba:	f000 fa79 	bl	4019b0 <get_channel_delta>
  4014be:	ebc4 0394 	rsb	r3, r4, r4, lsr #2
  4014c2:	4298      	cmp	r0, r3
  4014c4:	dd03      	ble.n	4014ce <qt_get_sensor_delta+0x46>
  4014c6:	792b      	ldrb	r3, [r5, #4]
  4014c8:	f023 0304 	bic.w	r3, r3, #4
  4014cc:	712b      	strb	r3, [r5, #4]
  4014ce:	4264      	negs	r4, r4
  4014d0:	b224      	sxth	r4, r4
  4014d2:	42a0      	cmp	r0, r4
  4014d4:	dc0f      	bgt.n	4014f6 <qt_get_sensor_delta+0x6e>
  4014d6:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
  4014da:	7933      	ldrb	r3, [r6, #4]
  4014dc:	f043 0304 	orr.w	r3, r3, #4
  4014e0:	7133      	strb	r3, [r6, #4]
  4014e2:	e008      	b.n	4014f6 <qt_get_sensor_delta+0x6e>
  4014e4:	f023 0304 	bic.w	r3, r3, #4
  4014e8:	4622      	mov	r2, r4
  4014ea:	712b      	strb	r3, [r5, #4]
  4014ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4014f0:	f000 bbcc 	b.w	401c8c <calc_rotor_slider_sensor_delta>
  4014f4:	2000      	movs	r0, #0
  4014f6:	b200      	sxth	r0, r0
  4014f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014fc:	200009ac 	.word	0x200009ac
  401500:	20000908 	.word	0x20000908
  401504:	20000acd 	.word	0x20000acd

00401508 <q_get_PRIMASK>:
  401508:	f3ef 8010 	mrs	r0, PRIMASK
  40150c:	4770      	bx	lr

0040150e <q_set_PRIMASK>:
  40150e:	f380 8810 	msr	PRIMASK, r0
  401512:	4770      	bx	lr

00401514 <goto_no_detect>:
  401514:	4a0c      	ldr	r2, [pc, #48]	; (401548 <goto_no_detect+0x34>)
  401516:	b530      	push	{r4, r5, lr}
  401518:	2402      	movs	r4, #2
  40151a:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
  40151e:	f802 4030 	strb.w	r4, [r2, r0, lsl #3]
  401522:	480a      	ldr	r0, [pc, #40]	; (40154c <goto_no_detect+0x38>)
  401524:	794b      	ldrb	r3, [r1, #5]
  401526:	8804      	ldrh	r4, [r0, #0]
  401528:	798d      	ldrb	r5, [r1, #6]
  40152a:	f044 0402 	orr.w	r4, r4, #2
  40152e:	8004      	strh	r4, [r0, #0]
  401530:	2000      	movs	r0, #0
  401532:	7088      	strb	r0, [r1, #2]
  401534:	e005      	b.n	401542 <goto_no_detect+0x2e>
  401536:	18d1      	adds	r1, r2, r3
  401538:	2080      	movs	r0, #128	; 0x80
  40153a:	3301      	adds	r3, #1
  40153c:	f881 0100 	strb.w	r0, [r1, #256]	; 0x100
  401540:	b2db      	uxtb	r3, r3
  401542:	42ab      	cmp	r3, r5
  401544:	d9f7      	bls.n	401536 <goto_no_detect+0x22>
  401546:	bd30      	pop	{r4, r5, pc}
  401548:	200009ac 	.word	0x200009ac
  40154c:	2000091c 	.word	0x2000091c

00401550 <pos_delta>:
  401550:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  401554:	b280      	uxth	r0, r0
  401556:	4770      	bx	lr

00401558 <enter_state_pos_recal>:
  401558:	4b05      	ldr	r3, [pc, #20]	; (401570 <enter_state_pos_recal+0x18>)
  40155a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
  40155e:	7952      	ldrb	r2, [r2, #5]
  401560:	189a      	adds	r2, r3, r2
  401562:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
  401566:	2220      	movs	r2, #32
  401568:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
  40156c:	2001      	movs	r0, #1
  40156e:	4770      	bx	lr
  401570:	200009ac 	.word	0x200009ac

00401574 <start_cal_sensor>:
  401574:	b510      	push	{r4, lr}
  401576:	4604      	mov	r4, r0
  401578:	f7ff ffcc 	bl	401514 <goto_no_detect>
  40157c:	4b04      	ldr	r3, [pc, #16]	; (401590 <start_cal_sensor+0x1c>)
  40157e:	2201      	movs	r2, #1
  401580:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
  401584:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
  401588:	230f      	movs	r3, #15
  40158a:	7063      	strb	r3, [r4, #1]
  40158c:	bd10      	pop	{r4, pc}
  40158e:	bf00      	nop
  401590:	200009ac 	.word	0x200009ac

00401594 <process_sensor>:
  401594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401598:	4604      	mov	r4, r0
  40159a:	4faf      	ldr	r7, [pc, #700]	; (401858 <process_sensor+0x2c4>)
  40159c:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
  4015a0:	eb07 060b 	add.w	r6, r7, fp
  4015a4:	4688      	mov	r8, r1
  4015a6:	f7ff ff6f 	bl	401488 <qt_get_sensor_delta>
  4015aa:	7933      	ldrb	r3, [r6, #4]
  4015ac:	f896 9003 	ldrb.w	r9, [r6, #3]
  4015b0:	f817 2034 	ldrb.w	r2, [r7, r4, lsl #3]
  4015b4:	9001      	str	r0, [sp, #4]
  4015b6:	f003 0a03 	and.w	sl, r3, #3
  4015ba:	f10a 0a01 	add.w	sl, sl, #1
  4015be:	fa49 fa0a 	asr.w	sl, r9, sl
  4015c2:	fa5f fa8a 	uxtb.w	sl, sl
  4015c6:	f1ba 0f01 	cmp.w	sl, #1
  4015ca:	bf98      	it	ls
  4015cc:	f04f 0a02 	movls.w	sl, #2
  4015d0:	ebca 0a09 	rsb	sl, sl, r9
  4015d4:	2a04      	cmp	r2, #4
  4015d6:	463d      	mov	r5, r7
  4015d8:	fa1f fa8a 	uxth.w	sl, sl
  4015dc:	f000 80c7 	beq.w	40176e <process_sensor+0x1da>
  4015e0:	d805      	bhi.n	4015ee <process_sensor+0x5a>
  4015e2:	2a01      	cmp	r2, #1
  4015e4:	d00d      	beq.n	401602 <process_sensor+0x6e>
  4015e6:	2a02      	cmp	r2, #2
  4015e8:	f040 81d6 	bne.w	401998 <process_sensor+0x404>
  4015ec:	e03f      	b.n	40166e <process_sensor+0xda>
  4015ee:	2a10      	cmp	r2, #16
  4015f0:	f000 813a 	beq.w	401868 <process_sensor+0x2d4>
  4015f4:	2a20      	cmp	r2, #32
  4015f6:	f000 81a8 	beq.w	40194a <process_sensor+0x3b6>
  4015fa:	2a08      	cmp	r2, #8
  4015fc:	f040 81cc 	bne.w	401998 <process_sensor+0x404>
  401600:	e17f      	b.n	401902 <process_sensor+0x36e>
  401602:	4996      	ldr	r1, [pc, #600]	; (40185c <process_sensor+0x2c8>)
  401604:	7972      	ldrb	r2, [r6, #5]
  401606:	880b      	ldrh	r3, [r1, #0]
  401608:	f896 c006 	ldrb.w	ip, [r6, #6]
  40160c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  401610:	460f      	mov	r7, r1
  401612:	e019      	b.n	401648 <process_sensor+0xb4>
  401614:	1869      	adds	r1, r5, r1
  401616:	f102 0020 	add.w	r0, r2, #32
  40161a:	7849      	ldrb	r1, [r1, #1]
  40161c:	2909      	cmp	r1, #9
  40161e:	4990      	ldr	r1, [pc, #576]	; (401860 <process_sensor+0x2cc>)
  401620:	d902      	bls.n	401628 <process_sensor+0x94>
  401622:	f831 6012 	ldrh.w	r6, [r1, r2, lsl #1]
  401626:	e009      	b.n	40163c <process_sensor+0xa8>
  401628:	f831 6010 	ldrh.w	r6, [r1, r0, lsl #1]
  40162c:	f831 8012 	ldrh.w	r8, [r1, r2, lsl #1]
  401630:	4546      	cmp	r6, r8
  401632:	d901      	bls.n	401638 <process_sensor+0xa4>
  401634:	3e01      	subs	r6, #1
  401636:	e001      	b.n	40163c <process_sensor+0xa8>
  401638:	d204      	bcs.n	401644 <process_sensor+0xb0>
  40163a:	3601      	adds	r6, #1
  40163c:	f821 6010 	strh.w	r6, [r1, r0, lsl #1]
  401640:	f043 0308 	orr.w	r3, r3, #8
  401644:	3201      	adds	r2, #1
  401646:	b2d2      	uxtb	r2, r2
  401648:	4562      	cmp	r2, ip
  40164a:	ea4f 01c4 	mov.w	r1, r4, lsl #3
  40164e:	d9e1      	bls.n	401614 <process_sensor+0x80>
  401650:	186a      	adds	r2, r5, r1
  401652:	803b      	strh	r3, [r7, #0]
  401654:	7853      	ldrb	r3, [r2, #1]
  401656:	3b01      	subs	r3, #1
  401658:	b2db      	uxtb	r3, r3
  40165a:	7053      	strb	r3, [r2, #1]
  40165c:	b913      	cbnz	r3, 401664 <process_sensor+0xd0>
  40165e:	4620      	mov	r0, r4
  401660:	f7ff ff58 	bl	401514 <goto_no_detect>
  401664:	4b7f      	ldr	r3, [pc, #508]	; (401864 <process_sensor+0x2d0>)
  401666:	789b      	ldrb	r3, [r3, #2]
  401668:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
  40166c:	e01b      	b.n	4016a6 <process_sensor+0x112>
  40166e:	f013 0a04 	ands.w	sl, r3, #4
  401672:	d00a      	beq.n	40168a <process_sensor+0xf6>
  401674:	4620      	mov	r0, r4
  401676:	2100      	movs	r1, #0
  401678:	f7ff ff6e 	bl	401558 <enter_state_pos_recal>
  40167c:	4b77      	ldr	r3, [pc, #476]	; (40185c <process_sensor+0x2c8>)
  40167e:	881a      	ldrh	r2, [r3, #0]
  401680:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  401684:	4680      	mov	r8, r0
  401686:	801a      	strh	r2, [r3, #0]
  401688:	e18a      	b.n	4019a0 <process_sensor+0x40c>
  40168a:	f7ff ff61 	bl	401550 <pos_delta>
  40168e:	4548      	cmp	r0, r9
  401690:	d30c      	bcc.n	4016ac <process_sensor+0x118>
  401692:	2304      	movs	r3, #4
  401694:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
  401698:	4b70      	ldr	r3, [pc, #448]	; (40185c <process_sensor+0x2c8>)
  40169a:	f886 a002 	strb.w	sl, [r6, #2]
  40169e:	881a      	ldrh	r2, [r3, #0]
  4016a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  4016a4:	801a      	strh	r2, [r3, #0]
  4016a6:	f04f 0801 	mov.w	r8, #1
  4016aa:	e179      	b.n	4019a0 <process_sensor+0x40c>
  4016ac:	f1b8 0f00 	cmp.w	r8, #0
  4016b0:	f000 8176 	beq.w	4019a0 <process_sensor+0x40c>
  4016b4:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
  4016b8:	2b00      	cmp	r3, #0
  4016ba:	f040 8170 	bne.w	40199e <process_sensor+0x40a>
  4016be:	4a69      	ldr	r2, [pc, #420]	; (401864 <process_sensor+0x2d0>)
  4016c0:	4966      	ldr	r1, [pc, #408]	; (40185c <process_sensor+0x2c8>)
  4016c2:	f892 c005 	ldrb.w	ip, [r2, #5]
  4016c6:	7912      	ldrb	r2, [r2, #4]
  4016c8:	7973      	ldrb	r3, [r6, #5]
  4016ca:	f896 9006 	ldrb.w	r9, [r6, #6]
  4016ce:	f06f 077f 	mvn.w	r7, #127	; 0x7f
  4016d2:	1abf      	subs	r7, r7, r2
  4016d4:	f08c 0c80 	eor.w	ip, ip, #128	; 0x80
  4016d8:	b2ff      	uxtb	r7, r7
  4016da:	880a      	ldrh	r2, [r1, #0]
  4016dc:	468b      	mov	fp, r1
  4016de:	e041      	b.n	401764 <process_sensor+0x1d0>
  4016e0:	495f      	ldr	r1, [pc, #380]	; (401860 <process_sensor+0x2cc>)
  4016e2:	f103 0020 	add.w	r0, r3, #32
  4016e6:	f831 6013 	ldrh.w	r6, [r1, r3, lsl #1]
  4016ea:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
  4016ee:	42b4      	cmp	r4, r6
  4016f0:	d20f      	bcs.n	401712 <process_sensor+0x17e>
  4016f2:	18ee      	adds	r6, r5, r3
  4016f4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
  4016f8:	44c2      	add	sl, r8
  4016fa:	fa5f fa8a 	uxtb.w	sl, sl
  4016fe:	45e2      	cmp	sl, ip
  401700:	f886 a100 	strb.w	sl, [r6, #256]	; 0x100
  401704:	d32c      	bcc.n	401760 <process_sensor+0x1cc>
  401706:	f04f 0a80 	mov.w	sl, #128	; 0x80
  40170a:	f886 a100 	strb.w	sl, [r6, #256]	; 0x100
  40170e:	3401      	adds	r4, #1
  401710:	e010      	b.n	401734 <process_sensor+0x1a0>
  401712:	d914      	bls.n	40173e <process_sensor+0x1aa>
  401714:	18ee      	adds	r6, r5, r3
  401716:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
  40171a:	ebc8 0a0a 	rsb	sl, r8, sl
  40171e:	fa5f fa8a 	uxtb.w	sl, sl
  401722:	45ba      	cmp	sl, r7
  401724:	f886 a100 	strb.w	sl, [r6, #256]	; 0x100
  401728:	d81a      	bhi.n	401760 <process_sensor+0x1cc>
  40172a:	f04f 0a80 	mov.w	sl, #128	; 0x80
  40172e:	f886 a100 	strb.w	sl, [r6, #256]	; 0x100
  401732:	3c01      	subs	r4, #1
  401734:	f821 4010 	strh.w	r4, [r1, r0, lsl #1]
  401738:	f042 0208 	orr.w	r2, r2, #8
  40173c:	e010      	b.n	401760 <process_sensor+0x1cc>
  40173e:	18e9      	adds	r1, r5, r3
  401740:	f891 0100 	ldrb.w	r0, [r1, #256]	; 0x100
  401744:	2880      	cmp	r0, #128	; 0x80
  401746:	d902      	bls.n	40174e <process_sensor+0x1ba>
  401748:	3801      	subs	r0, #1
  40174a:	f881 0100 	strb.w	r0, [r1, #256]	; 0x100
  40174e:	18e9      	adds	r1, r5, r3
  401750:	f891 0100 	ldrb.w	r0, [r1, #256]	; 0x100
  401754:	f010 0f80 	tst.w	r0, #128	; 0x80
  401758:	d102      	bne.n	401760 <process_sensor+0x1cc>
  40175a:	3001      	adds	r0, #1
  40175c:	f881 0100 	strb.w	r0, [r1, #256]	; 0x100
  401760:	3301      	adds	r3, #1
  401762:	b2db      	uxtb	r3, r3
  401764:	454b      	cmp	r3, r9
  401766:	d9bb      	bls.n	4016e0 <process_sensor+0x14c>
  401768:	f8ab 2000 	strh.w	r2, [fp]
  40176c:	e114      	b.n	401998 <process_sensor+0x404>
  40176e:	f7ff feef 	bl	401550 <pos_delta>
  401772:	4548      	cmp	r0, r9
  401774:	d36b      	bcc.n	40184e <process_sensor+0x2ba>
  401776:	4a3b      	ldr	r2, [pc, #236]	; (401864 <process_sensor+0x2d0>)
  401778:	7893      	ldrb	r3, [r2, #2]
  40177a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
  40177e:	78b3      	ldrb	r3, [r6, #2]
  401780:	3301      	adds	r3, #1
  401782:	70b3      	strb	r3, [r6, #2]
  401784:	7933      	ldrb	r3, [r6, #4]
  401786:	f003 0338 	and.w	r3, r3, #56	; 0x38
  40178a:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
  40178e:	4691      	mov	r9, r2
  401790:	2b00      	cmp	r3, #0
  401792:	d031      	beq.n	4017f8 <process_sensor+0x264>
  401794:	2700      	movs	r7, #0
  401796:	463e      	mov	r6, r7
  401798:	e027      	b.n	4017ea <process_sensor+0x256>
  40179a:	42a6      	cmp	r6, r4
  40179c:	d023      	beq.n	4017e6 <process_sensor+0x252>
  40179e:	eb08 0ac6 	add.w	sl, r8, r6, lsl #3
  4017a2:	f89a 3004 	ldrb.w	r3, [sl, #4]
  4017a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
  4017aa:	ebbb 0fd3 	cmp.w	fp, r3, lsr #3
  4017ae:	d11a      	bne.n	4017e6 <process_sensor+0x252>
  4017b0:	4630      	mov	r0, r6
  4017b2:	f7ff fe69 	bl	401488 <qt_get_sensor_delta>
  4017b6:	f89a 3003 	ldrb.w	r3, [sl, #3]
  4017ba:	eb08 02c4 	add.w	r2, r8, r4, lsl #3
  4017be:	1ac3      	subs	r3, r0, r3
  4017c0:	78d1      	ldrb	r1, [r2, #3]
  4017c2:	9801      	ldr	r0, [sp, #4]
  4017c4:	1a41      	subs	r1, r0, r1
  4017c6:	428b      	cmp	r3, r1
  4017c8:	dd02      	ble.n	4017d0 <process_sensor+0x23c>
  4017ca:	2300      	movs	r3, #0
  4017cc:	7093      	strb	r3, [r2, #2]
  4017ce:	e009      	b.n	4017e4 <process_sensor+0x250>
  4017d0:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
  4017d4:	2b10      	cmp	r3, #16
  4017d6:	d001      	beq.n	4017dc <process_sensor+0x248>
  4017d8:	2b08      	cmp	r3, #8
  4017da:	d104      	bne.n	4017e6 <process_sensor+0x252>
  4017dc:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
  4017e0:	2200      	movs	r2, #0
  4017e2:	709a      	strb	r2, [r3, #2]
  4017e4:	2701      	movs	r7, #1
  4017e6:	3601      	adds	r6, #1
  4017e8:	b2f6      	uxtb	r6, r6
  4017ea:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
  4017ee:	f8df 8068 	ldr.w	r8, [pc, #104]	; 401858 <process_sensor+0x2c4>
  4017f2:	42b3      	cmp	r3, r6
  4017f4:	d8d1      	bhi.n	40179a <process_sensor+0x206>
  4017f6:	b967      	cbnz	r7, 401812 <process_sensor+0x27e>
  4017f8:	f899 8001 	ldrb.w	r8, [r9, #1]
  4017fc:	f1b8 0f00 	cmp.w	r8, #0
  401800:	d009      	beq.n	401816 <process_sensor+0x282>
  401802:	4b16      	ldr	r3, [pc, #88]	; (40185c <process_sensor+0x2c8>)
  401804:	881a      	ldrh	r2, [r3, #0]
  401806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40180a:	801a      	strh	r2, [r3, #0]
  40180c:	f04f 0801 	mov.w	r8, #1
  401810:	e001      	b.n	401816 <process_sensor+0x282>
  401812:	f04f 0800 	mov.w	r8, #0
  401816:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
  40181a:	f899 3001 	ldrb.w	r3, [r9, #1]
  40181e:	78aa      	ldrb	r2, [r5, #2]
  401820:	429a      	cmp	r2, r3
  401822:	f0c0 80bd 	bcc.w	4019a0 <process_sensor+0x40c>
  401826:	4b0d      	ldr	r3, [pc, #52]	; (40185c <process_sensor+0x2c8>)
  401828:	881a      	ldrh	r2, [r3, #0]
  40182a:	f042 0203 	orr.w	r2, r2, #3
  40182e:	801a      	strh	r2, [r3, #0]
  401830:	4b09      	ldr	r3, [pc, #36]	; (401858 <process_sensor+0x2c4>)
  401832:	2210      	movs	r2, #16
  401834:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
  401838:	2300      	movs	r3, #0
  40183a:	706b      	strb	r3, [r5, #1]
  40183c:	792b      	ldrb	r3, [r5, #4]
  40183e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  401842:	f000 80ad 	beq.w	4019a0 <process_sensor+0x40c>
  401846:	4620      	mov	r0, r4
  401848:	f000 fb36 	bl	401eb8 <rotor_slider_enter_detect>
  40184c:	e0a8      	b.n	4019a0 <process_sensor+0x40c>
  40184e:	4620      	mov	r0, r4
  401850:	f7ff fe60 	bl	401514 <goto_no_detect>
  401854:	e0a0      	b.n	401998 <process_sensor+0x404>
  401856:	bf00      	nop
  401858:	200009ac 	.word	0x200009ac
  40185c:	2000091c 	.word	0x2000091c
  401860:	20000920 	.word	0x20000920
  401864:	20000910 	.word	0x20000910
  401868:	f013 0f04 	tst.w	r3, #4
  40186c:	4f4e      	ldr	r7, [pc, #312]	; (4019a8 <process_sensor+0x414>)
  40186e:	f8df 913c 	ldr.w	r9, [pc, #316]	; 4019ac <process_sensor+0x418>
  401872:	d009      	beq.n	401888 <process_sensor+0x2f4>
  401874:	4620      	mov	r0, r4
  401876:	2180      	movs	r1, #128	; 0x80
  401878:	f7ff fe6e 	bl	401558 <enter_state_pos_recal>
  40187c:	883b      	ldrh	r3, [r7, #0]
  40187e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401882:	4680      	mov	r8, r0
  401884:	803b      	strh	r3, [r7, #0]
  401886:	e037      	b.n	4018f8 <process_sensor+0x364>
  401888:	f7ff fe62 	bl	401550 <pos_delta>
  40188c:	4550      	cmp	r0, sl
  40188e:	d206      	bcs.n	40189e <process_sensor+0x30a>
  401890:	2308      	movs	r3, #8
  401892:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
  401896:	883b      	ldrh	r3, [r7, #0]
  401898:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40189c:	e027      	b.n	4018ee <process_sensor+0x35a>
  40189e:	883b      	ldrh	r3, [r7, #0]
  4018a0:	f899 2001 	ldrb.w	r2, [r9, #1]
  4018a4:	f043 0301 	orr.w	r3, r3, #1
  4018a8:	803b      	strh	r3, [r7, #0]
  4018aa:	78b3      	ldrb	r3, [r6, #2]
  4018ac:	429a      	cmp	r2, r3
  4018ae:	d901      	bls.n	4018b4 <process_sensor+0x320>
  4018b0:	3301      	adds	r3, #1
  4018b2:	70b3      	strb	r3, [r6, #2]
  4018b4:	eb05 030b 	add.w	r3, r5, fp
  4018b8:	791b      	ldrb	r3, [r3, #4]
  4018ba:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  4018be:	d002      	beq.n	4018c6 <process_sensor+0x332>
  4018c0:	4620      	mov	r0, r4
  4018c2:	f000 fa0f 	bl	401ce4 <calc_rotor_slider_value>
  4018c6:	f899 3003 	ldrb.w	r3, [r9, #3]
  4018ca:	b1a3      	cbz	r3, 4018f6 <process_sensor+0x362>
  4018cc:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
  4018d0:	7851      	ldrb	r1, [r2, #1]
  4018d2:	4299      	cmp	r1, r3
  4018d4:	d205      	bcs.n	4018e2 <process_sensor+0x34e>
  4018d6:	4488      	add	r8, r1
  4018d8:	f882 8001 	strb.w	r8, [r2, #1]
  4018dc:	f04f 0800 	mov.w	r8, #0
  4018e0:	e00a      	b.n	4018f8 <process_sensor+0x364>
  4018e2:	4620      	mov	r0, r4
  4018e4:	f7ff fe46 	bl	401574 <start_cal_sensor>
  4018e8:	883b      	ldrh	r3, [r7, #0]
  4018ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4018ee:	803b      	strh	r3, [r7, #0]
  4018f0:	f04f 0801 	mov.w	r8, #1
  4018f4:	e000      	b.n	4018f8 <process_sensor+0x364>
  4018f6:	4698      	mov	r8, r3
  4018f8:	f899 3002 	ldrb.w	r3, [r9, #2]
  4018fc:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
  401900:	e04e      	b.n	4019a0 <process_sensor+0x40c>
  401902:	4b2a      	ldr	r3, [pc, #168]	; (4019ac <process_sensor+0x418>)
  401904:	789b      	ldrb	r3, [r3, #2]
  401906:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
  40190a:	f896 8002 	ldrb.w	r8, [r6, #2]
  40190e:	f1b8 0f00 	cmp.w	r8, #0
  401912:	d02c      	beq.n	40196e <process_sensor+0x3da>
  401914:	f7ff fe1c 	bl	401550 <pos_delta>
  401918:	4550      	cmp	r0, sl
  40191a:	4b23      	ldr	r3, [pc, #140]	; (4019a8 <process_sensor+0x414>)
  40191c:	d909      	bls.n	401932 <process_sensor+0x39e>
  40191e:	2210      	movs	r2, #16
  401920:	f807 2034 	strb.w	r2, [r7, r4, lsl #3]
  401924:	881a      	ldrh	r2, [r3, #0]
  401926:	f042 0201 	orr.w	r2, r2, #1
  40192a:	801a      	strh	r2, [r3, #0]
  40192c:	f04f 0800 	mov.w	r8, #0
  401930:	e005      	b.n	40193e <process_sensor+0x3aa>
  401932:	881a      	ldrh	r2, [r3, #0]
  401934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  401938:	801a      	strh	r2, [r3, #0]
  40193a:	f04f 0801 	mov.w	r8, #1
  40193e:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
  401942:	78a3      	ldrb	r3, [r4, #2]
  401944:	3b01      	subs	r3, #1
  401946:	70a3      	strb	r3, [r4, #2]
  401948:	e02a      	b.n	4019a0 <process_sensor+0x40c>
  40194a:	7971      	ldrb	r1, [r6, #5]
  40194c:	1879      	adds	r1, r7, r1
  40194e:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
  401952:	3201      	adds	r2, #1
  401954:	b2d2      	uxtb	r2, r2
  401956:	f013 0804 	ands.w	r8, r3, #4
  40195a:	f881 2100 	strb.w	r2, [r1, #256]	; 0x100
  40195e:	d10a      	bne.n	401976 <process_sensor+0x3e2>
  401960:	f012 0f80 	tst.w	r2, #128	; 0x80
  401964:	d003      	beq.n	40196e <process_sensor+0x3da>
  401966:	2310      	movs	r3, #16
  401968:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
  40196c:	e018      	b.n	4019a0 <process_sensor+0x40c>
  40196e:	4620      	mov	r0, r4
  401970:	f7ff fdd0 	bl	401514 <goto_no_detect>
  401974:	e014      	b.n	4019a0 <process_sensor+0x40c>
  401976:	4b0d      	ldr	r3, [pc, #52]	; (4019ac <process_sensor+0x418>)
  401978:	4d0b      	ldr	r5, [pc, #44]	; (4019a8 <process_sensor+0x414>)
  40197a:	799b      	ldrb	r3, [r3, #6]
  40197c:	4293      	cmp	r3, r2
  40197e:	d806      	bhi.n	40198e <process_sensor+0x3fa>
  401980:	4620      	mov	r0, r4
  401982:	f7ff fdf7 	bl	401574 <start_cal_sensor>
  401986:	882b      	ldrh	r3, [r5, #0]
  401988:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40198c:	e002      	b.n	401994 <process_sensor+0x400>
  40198e:	882b      	ldrh	r3, [r5, #0]
  401990:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  401994:	802b      	strh	r3, [r5, #0]
  401996:	e686      	b.n	4016a6 <process_sensor+0x112>
  401998:	f04f 0800 	mov.w	r8, #0
  40199c:	e000      	b.n	4019a0 <process_sensor+0x40c>
  40199e:	46d0      	mov	r8, sl
  4019a0:	4640      	mov	r0, r8
  4019a2:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019a6:	bf00      	nop
  4019a8:	2000091c 	.word	0x2000091c
  4019ac:	20000910 	.word	0x20000910

004019b0 <get_channel_delta>:
  4019b0:	4b04      	ldr	r3, [pc, #16]	; (4019c4 <get_channel_delta+0x14>)
  4019b2:	f100 0220 	add.w	r2, r0, #32
  4019b6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
  4019ba:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
  4019be:	1ad0      	subs	r0, r2, r3
  4019c0:	b200      	sxth	r0, r0
  4019c2:	4770      	bx	lr
  4019c4:	20000920 	.word	0x20000920

004019c8 <burst_init>:
  4019c8:	b508      	push	{r3, lr}
  4019ca:	b100      	cbz	r0, 4019ce <burst_init+0x6>
  4019cc:	4780      	blx	r0
  4019ce:	bd08      	pop	{r3, pc}

004019d0 <burst_reset>:
  4019d0:	4b05      	ldr	r3, [pc, #20]	; (4019e8 <burst_reset+0x18>)
  4019d2:	2200      	movs	r2, #0
  4019d4:	601a      	str	r2, [r3, #0]
  4019d6:	605a      	str	r2, [r3, #4]
  4019d8:	611a      	str	r2, [r3, #16]
  4019da:	615a      	str	r2, [r3, #20]
  4019dc:	609a      	str	r2, [r3, #8]
  4019de:	60da      	str	r2, [r3, #12]
  4019e0:	619a      	str	r2, [r3, #24]
  4019e2:	61da      	str	r2, [r3, #28]
  4019e4:	4770      	bx	lr
  4019e6:	bf00      	nop
  4019e8:	20000ad0 	.word	0x20000ad0

004019ec <burst>:
  4019ec:	b510      	push	{r4, lr}
  4019ee:	4c0a      	ldr	r4, [pc, #40]	; (401a18 <burst+0x2c>)
  4019f0:	68a2      	ldr	r2, [r4, #8]
  4019f2:	6823      	ldr	r3, [r4, #0]
  4019f4:	4313      	orrs	r3, r2
  4019f6:	d004      	beq.n	401a02 <burst+0x16>
  4019f8:	4b08      	ldr	r3, [pc, #32]	; (401a1c <burst+0x30>)
  4019fa:	681b      	ldr	r3, [r3, #0]
  4019fc:	b10b      	cbz	r3, 401a02 <burst+0x16>
  4019fe:	2000      	movs	r0, #0
  401a00:	4798      	blx	r3
  401a02:	68e2      	ldr	r2, [r4, #12]
  401a04:	6863      	ldr	r3, [r4, #4]
  401a06:	4313      	orrs	r3, r2
  401a08:	d004      	beq.n	401a14 <burst+0x28>
  401a0a:	4b04      	ldr	r3, [pc, #16]	; (401a1c <burst+0x30>)
  401a0c:	681b      	ldr	r3, [r3, #0]
  401a0e:	b10b      	cbz	r3, 401a14 <burst+0x28>
  401a10:	2001      	movs	r0, #1
  401a12:	4798      	blx	r3
  401a14:	bd10      	pop	{r4, pc}
  401a16:	bf00      	nop
  401a18:	20000ad0 	.word	0x20000ad0
  401a1c:	2000090c 	.word	0x2000090c

00401a20 <calc_masks>:
  401a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401a22:	f7ff ffd5 	bl	4019d0 <burst_reset>
  401a26:	4b3f      	ldr	r3, [pc, #252]	; (401b24 <calc_masks+0x104>)
  401a28:	781e      	ldrb	r6, [r3, #0]
  401a2a:	2300      	movs	r3, #0
  401a2c:	461c      	mov	r4, r3
  401a2e:	4618      	mov	r0, r3
  401a30:	4619      	mov	r1, r3
  401a32:	e017      	b.n	401a64 <calc_masks+0x44>
  401a34:	4d3c      	ldr	r5, [pc, #240]	; (401b28 <calc_masks+0x108>)
  401a36:	195d      	adds	r5, r3, r5
  401a38:	792a      	ldrb	r2, [r5, #4]
  401a3a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
  401a3e:	796a      	ldrb	r2, [r5, #5]
  401a40:	d104      	bne.n	401a4c <calc_masks+0x2c>
  401a42:	2501      	movs	r5, #1
  401a44:	fa15 f202 	lsls.w	r2, r5, r2
  401a48:	4310      	orrs	r0, r2
  401a4a:	e008      	b.n	401a5e <calc_masks+0x3e>
  401a4c:	79ad      	ldrb	r5, [r5, #6]
  401a4e:	e004      	b.n	401a5a <calc_masks+0x3a>
  401a50:	2701      	movs	r7, #1
  401a52:	4097      	lsls	r7, r2
  401a54:	3201      	adds	r2, #1
  401a56:	433c      	orrs	r4, r7
  401a58:	b2d2      	uxtb	r2, r2
  401a5a:	42aa      	cmp	r2, r5
  401a5c:	d9f8      	bls.n	401a50 <calc_masks+0x30>
  401a5e:	3101      	adds	r1, #1
  401a60:	b2c9      	uxtb	r1, r1
  401a62:	3308      	adds	r3, #8
  401a64:	42b1      	cmp	r1, r6
  401a66:	d1e5      	bne.n	401a34 <calc_masks+0x14>
  401a68:	2200      	movs	r2, #0
  401a6a:	4613      	mov	r3, r2
  401a6c:	fa34 f103 	lsrs.w	r1, r4, r3
  401a70:	f011 0f01 	tst.w	r1, #1
  401a74:	d033      	beq.n	401ade <calc_masks+0xbe>
  401a76:	492d      	ldr	r1, [pc, #180]	; (401b2c <calc_masks+0x10c>)
  401a78:	2601      	movs	r6, #1
  401a7a:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
  401a7e:	fa16 f703 	lsls.w	r7, r6, r3
  401a82:	ea47 0505 	orr.w	r5, r7, r5
  401a86:	2b1f      	cmp	r3, #31
  401a88:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
  401a8c:	d006      	beq.n	401a9c <calc_masks+0x7c>
  401a8e:	199f      	adds	r7, r3, r6
  401a90:	40be      	lsls	r6, r7
  401a92:	ea46 0505 	orr.w	r5, r6, r5
  401a96:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
  401a9a:	e006      	b.n	401aaa <calc_masks+0x8a>
  401a9c:	1c95      	adds	r5, r2, #2
  401a9e:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
  401aa2:	f046 0601 	orr.w	r6, r6, #1
  401aa6:	f841 6025 	str.w	r6, [r1, r5, lsl #2]
  401aaa:	1c9d      	adds	r5, r3, #2
  401aac:	2d1f      	cmp	r5, #31
  401aae:	f04f 0701 	mov.w	r7, #1
  401ab2:	d807      	bhi.n	401ac4 <calc_masks+0xa4>
  401ab4:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
  401ab8:	fa17 f505 	lsls.w	r5, r7, r5
  401abc:	4335      	orrs	r5, r6
  401abe:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
  401ac2:	e008      	b.n	401ad6 <calc_masks+0xb6>
  401ac4:	1c96      	adds	r6, r2, #2
  401ac6:	f005 051f 	and.w	r5, r5, #31
  401aca:	40af      	lsls	r7, r5
  401acc:	f851 5026 	ldr.w	r5, [r1, r6, lsl #2]
  401ad0:	432f      	orrs	r7, r5
  401ad2:	f841 7026 	str.w	r7, [r1, r6, lsl #2]
  401ad6:	3302      	adds	r3, #2
  401ad8:	b2db      	uxtb	r3, r3
  401ada:	2101      	movs	r1, #1
  401adc:	e00e      	b.n	401afc <calc_masks+0xdc>
  401ade:	fa30 f103 	lsrs.w	r1, r0, r3
  401ae2:	f011 0101 	ands.w	r1, r1, #1
  401ae6:	d009      	beq.n	401afc <calc_masks+0xdc>
  401ae8:	4d10      	ldr	r5, [pc, #64]	; (401b2c <calc_masks+0x10c>)
  401aea:	2101      	movs	r1, #1
  401aec:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
  401af0:	fa11 f703 	lsls.w	r7, r1, r3
  401af4:	ea47 0606 	orr.w	r6, r7, r6
  401af8:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
  401afc:	2a00      	cmp	r2, #0
  401afe:	bf0c      	ite	eq
  401b00:	460a      	moveq	r2, r1
  401b02:	2200      	movne	r2, #0
  401b04:	3301      	adds	r3, #1
  401b06:	b2db      	uxtb	r3, r3
  401b08:	2b1f      	cmp	r3, #31
  401b0a:	d9af      	bls.n	401a6c <calc_masks+0x4c>
  401b0c:	4a07      	ldr	r2, [pc, #28]	; (401b2c <calc_masks+0x10c>)
  401b0e:	4b08      	ldr	r3, [pc, #32]	; (401b30 <calc_masks+0x110>)
  401b10:	6811      	ldr	r1, [r2, #0]
  401b12:	6019      	str	r1, [r3, #0]
  401b14:	6851      	ldr	r1, [r2, #4]
  401b16:	6059      	str	r1, [r3, #4]
  401b18:	6891      	ldr	r1, [r2, #8]
  401b1a:	68d2      	ldr	r2, [r2, #12]
  401b1c:	6099      	str	r1, [r3, #8]
  401b1e:	60da      	str	r2, [r3, #12]
  401b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401b22:	bf00      	nop
  401b24:	20000acd 	.word	0x20000acd
  401b28:	200009ac 	.word	0x200009ac
  401b2c:	20000ad0 	.word	0x20000ad0
  401b30:	20000ae0 	.word	0x20000ae0

00401b34 <init_rotor_slider>:
  401b34:	b570      	push	{r4, r5, r6, lr}
  401b36:	4c0e      	ldr	r4, [pc, #56]	; (401b70 <init_rotor_slider+0x3c>)
  401b38:	f89d 5010 	ldrb.w	r5, [sp, #16]
  401b3c:	7826      	ldrb	r6, [r4, #0]
  401b3e:	4c0d      	ldr	r4, [pc, #52]	; (401b74 <init_rotor_slider+0x40>)
  401b40:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  401b44:	f003 0307 	and.w	r3, r3, #7
  401b48:	70e2      	strb	r2, [r4, #3]
  401b4a:	4a0b      	ldr	r2, [pc, #44]	; (401b78 <init_rotor_slider+0x44>)
  401b4c:	7160      	strb	r0, [r4, #5]
  401b4e:	7816      	ldrb	r6, [r2, #0]
  401b50:	71a1      	strb	r1, [r4, #6]
  401b52:	71e6      	strb	r6, [r4, #7]
  401b54:	f89d 1014 	ldrb.w	r1, [sp, #20]
  401b58:	f001 0103 	and.w	r1, r1, #3
  401b5c:	ea41 03c3 	orr.w	r3, r1, r3, lsl #3
  401b60:	7123      	strb	r3, [r4, #4]
  401b62:	eb02 0386 	add.w	r3, r2, r6, lsl #2
  401b66:	016d      	lsls	r5, r5, #5
  401b68:	3601      	adds	r6, #1
  401b6a:	711d      	strb	r5, [r3, #4]
  401b6c:	7016      	strb	r6, [r2, #0]
  401b6e:	bd70      	pop	{r4, r5, r6, pc}
  401b70:	20000acd 	.word	0x20000acd
  401b74:	200009ac 	.word	0x200009ac
  401b78:	20000af0 	.word	0x20000af0

00401b7c <divide>:
  401b7c:	4603      	mov	r3, r0
  401b7e:	b339      	cbz	r1, 401bd0 <divide+0x54>
  401b80:	3201      	adds	r2, #1
  401b82:	b2d2      	uxtb	r2, r2
  401b84:	e003      	b.n	401b8e <divide+0x12>
  401b86:	3a01      	subs	r2, #1
  401b88:	005b      	lsls	r3, r3, #1
  401b8a:	b2d2      	uxtb	r2, r2
  401b8c:	b29b      	uxth	r3, r3
  401b8e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401b92:	d106      	bne.n	401ba2 <divide+0x26>
  401b94:	2a00      	cmp	r2, #0
  401b96:	d1f6      	bne.n	401b86 <divide+0xa>
  401b98:	e003      	b.n	401ba2 <divide+0x26>
  401b9a:	3201      	adds	r2, #1
  401b9c:	0049      	lsls	r1, r1, #1
  401b9e:	b2d2      	uxtb	r2, r2
  401ba0:	b289      	uxth	r1, r1
  401ba2:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  401ba6:	d0f8      	beq.n	401b9a <divide+0x1e>
  401ba8:	2000      	movs	r0, #0
  401baa:	e00a      	b.n	401bc2 <divide+0x46>
  401bac:	0040      	lsls	r0, r0, #1
  401bae:	3a01      	subs	r2, #1
  401bb0:	428b      	cmp	r3, r1
  401bb2:	b280      	uxth	r0, r0
  401bb4:	b2d2      	uxtb	r2, r2
  401bb6:	d303      	bcc.n	401bc0 <divide+0x44>
  401bb8:	1a5b      	subs	r3, r3, r1
  401bba:	3001      	adds	r0, #1
  401bbc:	b29b      	uxth	r3, r3
  401bbe:	b280      	uxth	r0, r0
  401bc0:	0849      	lsrs	r1, r1, #1
  401bc2:	b13a      	cbz	r2, 401bd4 <divide+0x58>
  401bc4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  401bc8:	d0f0      	beq.n	401bac <divide+0x30>
  401bca:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401bce:	4770      	bx	lr
  401bd0:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401bd4:	4770      	bx	lr
	...

00401bd8 <fill_out_rotor_slider_deltas>:
  401bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401bdc:	4c1b      	ldr	r4, [pc, #108]	; (401c4c <fill_out_rotor_slider_deltas+0x74>)
  401bde:	f100 0620 	add.w	r6, r0, #32
  401be2:	f100 0321 	add.w	r3, r0, #33	; 0x21
  401be6:	f834 7016 	ldrh.w	r7, [r4, r6, lsl #1]
  401bea:	4605      	mov	r5, r0
  401bec:	f100 0801 	add.w	r8, r0, #1
  401bf0:	4639      	mov	r1, r7
  401bf2:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
  401bf6:	220c      	movs	r2, #12
  401bf8:	f7ff ffc0 	bl	401b7c <divide>
  401bfc:	220c      	movs	r2, #12
  401bfe:	4601      	mov	r1, r0
  401c00:	f834 0018 	ldrh.w	r0, [r4, r8, lsl #1]
  401c04:	f7ff ffba 	bl	401b7c <divide>
  401c08:	f105 0322 	add.w	r3, r5, #34	; 0x22
  401c0c:	4639      	mov	r1, r7
  401c0e:	4680      	mov	r8, r0
  401c10:	220c      	movs	r2, #12
  401c12:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
  401c16:	f7ff ffb1 	bl	401b7c <divide>
  401c1a:	f105 0902 	add.w	r9, r5, #2
  401c1e:	4601      	mov	r1, r0
  401c20:	220c      	movs	r2, #12
  401c22:	f834 0019 	ldrh.w	r0, [r4, r9, lsl #1]
  401c26:	f7ff ffa9 	bl	401b7c <divide>
  401c2a:	4607      	mov	r7, r0
  401c2c:	4628      	mov	r0, r5
  401c2e:	f7ff febf 	bl	4019b0 <get_channel_delta>
  401c32:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
  401c36:	4b06      	ldr	r3, [pc, #24]	; (401c50 <fill_out_rotor_slider_deltas+0x78>)
  401c38:	ebc8 0802 	rsb	r8, r8, r2
  401c3c:	1bd7      	subs	r7, r2, r7
  401c3e:	8458      	strh	r0, [r3, #34]	; 0x22
  401c40:	f8a3 8024 	strh.w	r8, [r3, #36]	; 0x24
  401c44:	84df      	strh	r7, [r3, #38]	; 0x26
  401c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401c4a:	bf00      	nop
  401c4c:	20000920 	.word	0x20000920
  401c50:	20000af0 	.word	0x20000af0

00401c54 <qt_enable_slider>:
  401c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  401c56:	4614      	mov	r4, r2
  401c58:	f89d 2018 	ldrb.w	r2, [sp, #24]
  401c5c:	f89d 501c 	ldrb.w	r5, [sp, #28]
  401c60:	9201      	str	r2, [sp, #4]
  401c62:	461a      	mov	r2, r3
  401c64:	4623      	mov	r3, r4
  401c66:	9500      	str	r5, [sp, #0]
  401c68:	f7ff ff64 	bl	401b34 <init_rotor_slider>
  401c6c:	4b05      	ldr	r3, [pc, #20]	; (401c84 <qt_enable_slider+0x30>)
  401c6e:	4906      	ldr	r1, [pc, #24]	; (401c88 <qt_enable_slider+0x34>)
  401c70:	781a      	ldrb	r2, [r3, #0]
  401c72:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  401c76:	3201      	adds	r2, #1
  401c78:	7908      	ldrb	r0, [r1, #4]
  401c7a:	701a      	strb	r2, [r3, #0]
  401c7c:	f060 007f 	orn	r0, r0, #127	; 0x7f
  401c80:	7108      	strb	r0, [r1, #4]
  401c82:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  401c84:	20000acd 	.word	0x20000acd
  401c88:	200009ac 	.word	0x200009ac

00401c8c <calc_rotor_slider_sensor_delta>:
  401c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401c8e:	4604      	mov	r4, r0
  401c90:	4608      	mov	r0, r1
  401c92:	4615      	mov	r5, r2
  401c94:	f7ff ffa0 	bl	401bd8 <fill_out_rotor_slider_deltas>
  401c98:	4a10      	ldr	r2, [pc, #64]	; (401cdc <calc_rotor_slider_sensor_delta+0x50>)
  401c9a:	8c50      	ldrh	r0, [r2, #34]	; 0x22
  401c9c:	8c96      	ldrh	r6, [r2, #36]	; 0x24
  401c9e:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
  401ca0:	b237      	sxth	r7, r6
  401ca2:	b203      	sxth	r3, r0
  401ca4:	b20a      	sxth	r2, r1
  401ca6:	429f      	cmp	r7, r3
  401ca8:	bfb8      	it	lt
  401caa:	463b      	movlt	r3, r7
  401cac:	4293      	cmp	r3, r2
  401cae:	bfa8      	it	ge
  401cb0:	4613      	movge	r3, r2
  401cb2:	1832      	adds	r2, r6, r0
  401cb4:	1852      	adds	r2, r2, r1
  401cb6:	b292      	uxth	r2, r2
  401cb8:	426d      	negs	r5, r5
  401cba:	b211      	sxth	r1, r2
  401cbc:	42a9      	cmp	r1, r5
  401cbe:	dc06      	bgt.n	401cce <calc_rotor_slider_sensor_delta+0x42>
  401cc0:	4907      	ldr	r1, [pc, #28]	; (401ce0 <calc_rotor_slider_sensor_delta+0x54>)
  401cc2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
  401cc6:	7921      	ldrb	r1, [r4, #4]
  401cc8:	f041 0104 	orr.w	r1, r1, #4
  401ccc:	7121      	strb	r1, [r4, #4]
  401cce:	b29b      	uxth	r3, r3
  401cd0:	1ad2      	subs	r2, r2, r3
  401cd2:	1ad2      	subs	r2, r2, r3
  401cd4:	1ad3      	subs	r3, r2, r3
  401cd6:	b218      	sxth	r0, r3
  401cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401cda:	bf00      	nop
  401cdc:	20000af0 	.word	0x20000af0
  401ce0:	200009ac 	.word	0x200009ac

00401ce4 <calc_rotor_slider_value>:
  401ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401ce8:	4c6f      	ldr	r4, [pc, #444]	; (401ea8 <calc_rotor_slider_value+0x1c4>)
  401cea:	4f70      	ldr	r7, [pc, #448]	; (401eac <calc_rotor_slider_value+0x1c8>)
  401cec:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
  401cf0:	4680      	mov	r8, r0
  401cf2:	79dd      	ldrb	r5, [r3, #7]
  401cf4:	7958      	ldrb	r0, [r3, #5]
  401cf6:	eb07 0285 	add.w	r2, r7, r5, lsl #2
  401cfa:	46a1      	mov	r9, r4
  401cfc:	7916      	ldrb	r6, [r2, #4]
  401cfe:	f7ff ff6b 	bl	401bd8 <fill_out_rotor_slider_deltas>
  401d02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  401d04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  401d06:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
  401d08:	b218      	sxth	r0, r3
  401d0a:	b211      	sxth	r1, r2
  401d0c:	4288      	cmp	r0, r1
  401d0e:	db07      	blt.n	401d20 <calc_rotor_slider_value+0x3c>
  401d10:	b220      	sxth	r0, r4
  401d12:	4281      	cmp	r1, r0
  401d14:	da0e      	bge.n	401d34 <calc_rotor_slider_value+0x50>
  401d16:	4618      	mov	r0, r3
  401d18:	4611      	mov	r1, r2
  401d1a:	4623      	mov	r3, r4
  401d1c:	2400      	movs	r4, #0
  401d1e:	e00f      	b.n	401d40 <calc_rotor_slider_value+0x5c>
  401d20:	4621      	mov	r1, r4
  401d22:	b224      	sxth	r4, r4
  401d24:	42a0      	cmp	r0, r4
  401d26:	dc08      	bgt.n	401d3a <calc_rotor_slider_value+0x56>
  401d28:	4608      	mov	r0, r1
  401d2a:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  401d2e:	4619      	mov	r1, r3
  401d30:	4613      	mov	r3, r2
  401d32:	e005      	b.n	401d40 <calc_rotor_slider_value+0x5c>
  401d34:	4610      	mov	r0, r2
  401d36:	4621      	mov	r1, r4
  401d38:	e000      	b.n	401d3c <calc_rotor_slider_value+0x58>
  401d3a:	4610      	mov	r0, r2
  401d3c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  401d40:	b289      	uxth	r1, r1
  401d42:	b280      	uxth	r0, r0
  401d44:	1a42      	subs	r2, r0, r1
  401d46:	18c0      	adds	r0, r0, r3
  401d48:	1a40      	subs	r0, r0, r1
  401d4a:	1a41      	subs	r1, r0, r1
  401d4c:	b289      	uxth	r1, r1
  401d4e:	b290      	uxth	r0, r2
  401d50:	220c      	movs	r2, #12
  401d52:	f7ff ff13 	bl	401b7c <divide>
  401d56:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
  401d5a:	1904      	adds	r4, r0, r4
  401d5c:	f893 9004 	ldrb.w	r9, [r3, #4]
  401d60:	f009 09c0 	and.w	r9, r9, #192	; 0xc0
  401d64:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
  401d68:	b2a4      	uxth	r4, r4
  401d6a:	d112      	bne.n	401d92 <calc_rotor_slider_value+0xae>
  401d6c:	f5a4 7318 	sub.w	r3, r4, #608	; 0x260
  401d70:	3b07      	subs	r3, #7
  401d72:	b29b      	uxth	r3, r3
  401d74:	f642 3231 	movw	r2, #11057	; 0x2b31
  401d78:	4293      	cmp	r3, r2
  401d7a:	f200 8093 	bhi.w	401ea4 <calc_rotor_slider_value+0x1c0>
  401d7e:	f240 7332 	movw	r3, #1842	; 0x732
  401d82:	429c      	cmp	r4, r3
  401d84:	f240 8089 	bls.w	401e9a <calc_rotor_slider_value+0x1b6>
  401d88:	f5a4 64e6 	sub.w	r4, r4, #1840	; 0x730
  401d8c:	3c02      	subs	r4, #2
  401d8e:	b2a4      	uxth	r4, r4
  401d90:	e084      	b.n	401e9c <calc_rotor_slider_value+0x1b8>
  401d92:	f642 78ff 	movw	r8, #12287	; 0x2fff
  401d96:	f44f 5040 	mov.w	r0, #12288	; 0x3000
  401d9a:	0973      	lsrs	r3, r6, #5
  401d9c:	1c5a      	adds	r2, r3, #1
  401d9e:	f44f 7680 	mov.w	r6, #256	; 0x100
  401da2:	e000      	b.n	401da6 <calc_rotor_slider_value+0xc2>
  401da4:	0876      	lsrs	r6, r6, #1
  401da6:	3301      	adds	r3, #1
  401da8:	b2db      	uxtb	r3, r3
  401daa:	2b07      	cmp	r3, #7
  401dac:	d9fa      	bls.n	401da4 <calc_rotor_slider_value+0xc0>
  401dae:	f106 3aff 	add.w	sl, r6, #4294967295
  401db2:	2a04      	cmp	r2, #4
  401db4:	fa5f fa8a 	uxtb.w	sl, sl
  401db8:	d802      	bhi.n	401dc0 <calc_rotor_slider_value+0xdc>
  401dba:	0071      	lsls	r1, r6, #1
  401dbc:	b289      	uxth	r1, r1
  401dbe:	e004      	b.n	401dca <calc_rotor_slider_value+0xe6>
  401dc0:	2a06      	cmp	r2, #6
  401dc2:	d901      	bls.n	401dc8 <calc_rotor_slider_value+0xe4>
  401dc4:	0871      	lsrs	r1, r6, #1
  401dc6:	e000      	b.n	401dca <calc_rotor_slider_value+0xe6>
  401dc8:	4631      	mov	r1, r6
  401dca:	2200      	movs	r2, #0
  401dcc:	f7ff fed6 	bl	401b7c <divide>
  401dd0:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
  401dd4:	d116      	bne.n	401e04 <calc_rotor_slider_value+0x120>
  401dd6:	eb07 0285 	add.w	r2, r7, r5, lsl #2
  401dda:	8853      	ldrh	r3, [r2, #2]
  401ddc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
  401de0:	d308      	bcc.n	401df4 <calc_rotor_slider_value+0x110>
  401de2:	f5a3 53c0 	sub.w	r3, r3, #6144	; 0x1800
  401de6:	b29b      	uxth	r3, r3
  401de8:	42a3      	cmp	r3, r4
  401dea:	d90b      	bls.n	401e04 <calc_rotor_slider_value+0x120>
  401dec:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
  401df0:	b2a4      	uxth	r4, r4
  401df2:	e007      	b.n	401e04 <calc_rotor_slider_value+0x120>
  401df4:	f503 51c0 	add.w	r1, r3, #6144	; 0x1800
  401df8:	b289      	uxth	r1, r1
  401dfa:	42a1      	cmp	r1, r4
  401dfc:	bf3c      	itt	cc
  401dfe:	f503 5340 	addcc.w	r3, r3, #12288	; 0x3000
  401e02:	8053      	strhcc	r3, [r2, #2]
  401e04:	eb07 0285 	add.w	r2, r7, r5, lsl #2
  401e08:	7913      	ldrb	r3, [r2, #4]
  401e0a:	f013 0101 	ands.w	r1, r3, #1
  401e0e:	d005      	beq.n	401e1c <calc_rotor_slider_value+0x138>
  401e10:	f023 0301 	bic.w	r3, r3, #1
  401e14:	2000      	movs	r0, #0
  401e16:	7113      	strb	r3, [r2, #4]
  401e18:	4602      	mov	r2, r0
  401e1a:	e004      	b.n	401e26 <calc_rotor_slider_value+0x142>
  401e1c:	f013 0202 	ands.w	r2, r3, #2
  401e20:	bf1c      	itt	ne
  401e22:	4602      	movne	r2, r0
  401e24:	4608      	movne	r0, r1
  401e26:	eb07 0385 	add.w	r3, r7, r5, lsl #2
  401e2a:	8859      	ldrh	r1, [r3, #2]
  401e2c:	1852      	adds	r2, r2, r1
  401e2e:	4294      	cmp	r4, r2
  401e30:	db03      	blt.n	401e3a <calc_rotor_slider_value+0x156>
  401e32:	791a      	ldrb	r2, [r3, #4]
  401e34:	f022 0202 	bic.w	r2, r2, #2
  401e38:	e005      	b.n	401e46 <calc_rotor_slider_value+0x162>
  401e3a:	1900      	adds	r0, r0, r4
  401e3c:	4288      	cmp	r0, r1
  401e3e:	dc04      	bgt.n	401e4a <calc_rotor_slider_value+0x166>
  401e40:	791a      	ldrb	r2, [r3, #4]
  401e42:	f042 0202 	orr.w	r2, r2, #2
  401e46:	711a      	strb	r2, [r3, #4]
  401e48:	805c      	strh	r4, [r3, #2]
  401e4a:	eb07 0385 	add.w	r3, r7, r5, lsl #2
  401e4e:	4631      	mov	r1, r6
  401e50:	885a      	ldrh	r2, [r3, #2]
  401e52:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
  401e56:	bf24      	itt	cs
  401e58:	f5a2 5240 	subcs.w	r2, r2, #12288	; 0x3000
  401e5c:	805a      	strhcs	r2, [r3, #2]
  401e5e:	4640      	mov	r0, r8
  401e60:	2200      	movs	r2, #0
  401e62:	f7ff fe8b 	bl	401b7c <divide>
  401e66:	eb07 0785 	add.w	r7, r7, r5, lsl #2
  401e6a:	2200      	movs	r2, #0
  401e6c:	4601      	mov	r1, r0
  401e6e:	8878      	ldrh	r0, [r7, #2]
  401e70:	f7ff fe84 	bl	401b7c <divide>
  401e74:	4a0e      	ldr	r2, [pc, #56]	; (401eb0 <calc_rotor_slider_value+0x1cc>)
  401e76:	1955      	adds	r5, r2, r5
  401e78:	4550      	cmp	r0, sl
  401e7a:	bf28      	it	cs
  401e7c:	4650      	movcs	r0, sl
  401e7e:	f895 2084 	ldrb.w	r2, [r5, #132]	; 0x84
  401e82:	b2c3      	uxtb	r3, r0
  401e84:	429a      	cmp	r2, r3
  401e86:	d00d      	beq.n	401ea4 <calc_rotor_slider_value+0x1c0>
  401e88:	4b0a      	ldr	r3, [pc, #40]	; (401eb4 <calc_rotor_slider_value+0x1d0>)
  401e8a:	f885 0084 	strb.w	r0, [r5, #132]	; 0x84
  401e8e:	881a      	ldrh	r2, [r3, #0]
  401e90:	f042 0204 	orr.w	r2, r2, #4
  401e94:	801a      	strh	r2, [r3, #0]
  401e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e9a:	2400      	movs	r4, #0
  401e9c:	f242 189b 	movw	r8, #8603	; 0x219b
  401ea0:	4640      	mov	r0, r8
  401ea2:	e77a      	b.n	401d9a <calc_rotor_slider_value+0xb6>
  401ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401ea8:	200009ac 	.word	0x200009ac
  401eac:	20000af0 	.word	0x20000af0
  401eb0:	20000920 	.word	0x20000920
  401eb4:	2000091c 	.word	0x2000091c

00401eb8 <rotor_slider_enter_detect>:
  401eb8:	4b05      	ldr	r3, [pc, #20]	; (401ed0 <rotor_slider_enter_detect+0x18>)
  401eba:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  401ebe:	79da      	ldrb	r2, [r3, #7]
  401ec0:	4b04      	ldr	r3, [pc, #16]	; (401ed4 <rotor_slider_enter_detect+0x1c>)
  401ec2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401ec6:	791a      	ldrb	r2, [r3, #4]
  401ec8:	f042 0201 	orr.w	r2, r2, #1
  401ecc:	711a      	strb	r2, [r3, #4]
  401ece:	4770      	bx	lr
  401ed0:	200009ac 	.word	0x200009ac
  401ed4:	20000af0 	.word	0x20000af0

00401ed8 <__sflush_r>:
  401ed8:	898b      	ldrh	r3, [r1, #12]
  401eda:	b29a      	uxth	r2, r3
  401edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ee0:	460d      	mov	r5, r1
  401ee2:	0711      	lsls	r1, r2, #28
  401ee4:	4680      	mov	r8, r0
  401ee6:	d43c      	bmi.n	401f62 <__sflush_r+0x8a>
  401ee8:	686a      	ldr	r2, [r5, #4]
  401eea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401eee:	2a00      	cmp	r2, #0
  401ef0:	81ab      	strh	r3, [r5, #12]
  401ef2:	dd65      	ble.n	401fc0 <__sflush_r+0xe8>
  401ef4:	6aae      	ldr	r6, [r5, #40]	; 0x28
  401ef6:	2e00      	cmp	r6, #0
  401ef8:	d04b      	beq.n	401f92 <__sflush_r+0xba>
  401efa:	b29b      	uxth	r3, r3
  401efc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  401f00:	2100      	movs	r1, #0
  401f02:	b292      	uxth	r2, r2
  401f04:	f8d8 4000 	ldr.w	r4, [r8]
  401f08:	f8c8 1000 	str.w	r1, [r8]
  401f0c:	2a00      	cmp	r2, #0
  401f0e:	d05b      	beq.n	401fc8 <__sflush_r+0xf0>
  401f10:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401f12:	075f      	lsls	r7, r3, #29
  401f14:	d505      	bpl.n	401f22 <__sflush_r+0x4a>
  401f16:	6869      	ldr	r1, [r5, #4]
  401f18:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401f1a:	1a52      	subs	r2, r2, r1
  401f1c:	b10b      	cbz	r3, 401f22 <__sflush_r+0x4a>
  401f1e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  401f20:	1ad2      	subs	r2, r2, r3
  401f22:	4640      	mov	r0, r8
  401f24:	69e9      	ldr	r1, [r5, #28]
  401f26:	2300      	movs	r3, #0
  401f28:	47b0      	blx	r6
  401f2a:	1c46      	adds	r6, r0, #1
  401f2c:	d056      	beq.n	401fdc <__sflush_r+0x104>
  401f2e:	89ab      	ldrh	r3, [r5, #12]
  401f30:	692a      	ldr	r2, [r5, #16]
  401f32:	602a      	str	r2, [r5, #0]
  401f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401f38:	b29b      	uxth	r3, r3
  401f3a:	2200      	movs	r2, #0
  401f3c:	606a      	str	r2, [r5, #4]
  401f3e:	04da      	lsls	r2, r3, #19
  401f40:	81ab      	strh	r3, [r5, #12]
  401f42:	d43b      	bmi.n	401fbc <__sflush_r+0xe4>
  401f44:	6b29      	ldr	r1, [r5, #48]	; 0x30
  401f46:	f8c8 4000 	str.w	r4, [r8]
  401f4a:	b311      	cbz	r1, 401f92 <__sflush_r+0xba>
  401f4c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  401f50:	4299      	cmp	r1, r3
  401f52:	d002      	beq.n	401f5a <__sflush_r+0x82>
  401f54:	4640      	mov	r0, r8
  401f56:	f000 f967 	bl	402228 <_free_r>
  401f5a:	2000      	movs	r0, #0
  401f5c:	6328      	str	r0, [r5, #48]	; 0x30
  401f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f62:	692e      	ldr	r6, [r5, #16]
  401f64:	b1ae      	cbz	r6, 401f92 <__sflush_r+0xba>
  401f66:	682c      	ldr	r4, [r5, #0]
  401f68:	602e      	str	r6, [r5, #0]
  401f6a:	0791      	lsls	r1, r2, #30
  401f6c:	bf0c      	ite	eq
  401f6e:	696b      	ldreq	r3, [r5, #20]
  401f70:	2300      	movne	r3, #0
  401f72:	1ba4      	subs	r4, r4, r6
  401f74:	60ab      	str	r3, [r5, #8]
  401f76:	e00a      	b.n	401f8e <__sflush_r+0xb6>
  401f78:	4632      	mov	r2, r6
  401f7a:	4623      	mov	r3, r4
  401f7c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  401f7e:	69e9      	ldr	r1, [r5, #28]
  401f80:	4640      	mov	r0, r8
  401f82:	47b8      	blx	r7
  401f84:	2800      	cmp	r0, #0
  401f86:	eba4 0400 	sub.w	r4, r4, r0
  401f8a:	4406      	add	r6, r0
  401f8c:	dd04      	ble.n	401f98 <__sflush_r+0xc0>
  401f8e:	2c00      	cmp	r4, #0
  401f90:	dcf2      	bgt.n	401f78 <__sflush_r+0xa0>
  401f92:	2000      	movs	r0, #0
  401f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f98:	89ab      	ldrh	r3, [r5, #12]
  401f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401f9e:	81ab      	strh	r3, [r5, #12]
  401fa0:	f04f 30ff 	mov.w	r0, #4294967295
  401fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401fa8:	89ab      	ldrh	r3, [r5, #12]
  401faa:	692a      	ldr	r2, [r5, #16]
  401fac:	6069      	str	r1, [r5, #4]
  401fae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401fb2:	b29b      	uxth	r3, r3
  401fb4:	81ab      	strh	r3, [r5, #12]
  401fb6:	04db      	lsls	r3, r3, #19
  401fb8:	602a      	str	r2, [r5, #0]
  401fba:	d5c3      	bpl.n	401f44 <__sflush_r+0x6c>
  401fbc:	6528      	str	r0, [r5, #80]	; 0x50
  401fbe:	e7c1      	b.n	401f44 <__sflush_r+0x6c>
  401fc0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401fc2:	2a00      	cmp	r2, #0
  401fc4:	dc96      	bgt.n	401ef4 <__sflush_r+0x1c>
  401fc6:	e7e4      	b.n	401f92 <__sflush_r+0xba>
  401fc8:	2301      	movs	r3, #1
  401fca:	4640      	mov	r0, r8
  401fcc:	69e9      	ldr	r1, [r5, #28]
  401fce:	47b0      	blx	r6
  401fd0:	1c43      	adds	r3, r0, #1
  401fd2:	4602      	mov	r2, r0
  401fd4:	d019      	beq.n	40200a <__sflush_r+0x132>
  401fd6:	89ab      	ldrh	r3, [r5, #12]
  401fd8:	6aae      	ldr	r6, [r5, #40]	; 0x28
  401fda:	e79a      	b.n	401f12 <__sflush_r+0x3a>
  401fdc:	f8d8 1000 	ldr.w	r1, [r8]
  401fe0:	2900      	cmp	r1, #0
  401fe2:	d0e1      	beq.n	401fa8 <__sflush_r+0xd0>
  401fe4:	291d      	cmp	r1, #29
  401fe6:	d007      	beq.n	401ff8 <__sflush_r+0x120>
  401fe8:	2916      	cmp	r1, #22
  401fea:	d005      	beq.n	401ff8 <__sflush_r+0x120>
  401fec:	89ab      	ldrh	r3, [r5, #12]
  401fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401ff2:	81ab      	strh	r3, [r5, #12]
  401ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401ff8:	89ab      	ldrh	r3, [r5, #12]
  401ffa:	692a      	ldr	r2, [r5, #16]
  401ffc:	602a      	str	r2, [r5, #0]
  401ffe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402002:	2200      	movs	r2, #0
  402004:	81ab      	strh	r3, [r5, #12]
  402006:	606a      	str	r2, [r5, #4]
  402008:	e79c      	b.n	401f44 <__sflush_r+0x6c>
  40200a:	f8d8 3000 	ldr.w	r3, [r8]
  40200e:	2b00      	cmp	r3, #0
  402010:	d0e1      	beq.n	401fd6 <__sflush_r+0xfe>
  402012:	2b1d      	cmp	r3, #29
  402014:	d007      	beq.n	402026 <__sflush_r+0x14e>
  402016:	2b16      	cmp	r3, #22
  402018:	d005      	beq.n	402026 <__sflush_r+0x14e>
  40201a:	89ab      	ldrh	r3, [r5, #12]
  40201c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402020:	81ab      	strh	r3, [r5, #12]
  402022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402026:	f8c8 4000 	str.w	r4, [r8]
  40202a:	e7b2      	b.n	401f92 <__sflush_r+0xba>

0040202c <_fflush_r>:
  40202c:	b510      	push	{r4, lr}
  40202e:	4604      	mov	r4, r0
  402030:	b082      	sub	sp, #8
  402032:	b108      	cbz	r0, 402038 <_fflush_r+0xc>
  402034:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402036:	b153      	cbz	r3, 40204e <_fflush_r+0x22>
  402038:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40203c:	b908      	cbnz	r0, 402042 <_fflush_r+0x16>
  40203e:	b002      	add	sp, #8
  402040:	bd10      	pop	{r4, pc}
  402042:	4620      	mov	r0, r4
  402044:	b002      	add	sp, #8
  402046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40204a:	f7ff bf45 	b.w	401ed8 <__sflush_r>
  40204e:	9101      	str	r1, [sp, #4]
  402050:	f000 f892 	bl	402178 <__sinit>
  402054:	9901      	ldr	r1, [sp, #4]
  402056:	e7ef      	b.n	402038 <_fflush_r+0xc>

00402058 <fflush>:
  402058:	b120      	cbz	r0, 402064 <fflush+0xc>
  40205a:	4b05      	ldr	r3, [pc, #20]	; (402070 <fflush+0x18>)
  40205c:	4601      	mov	r1, r0
  40205e:	6818      	ldr	r0, [r3, #0]
  402060:	f7ff bfe4 	b.w	40202c <_fflush_r>
  402064:	4b03      	ldr	r3, [pc, #12]	; (402074 <fflush+0x1c>)
  402066:	4904      	ldr	r1, [pc, #16]	; (402078 <fflush+0x20>)
  402068:	6818      	ldr	r0, [r3, #0]
  40206a:	f000 b9b5 	b.w	4023d8 <_fwalk_reent>
  40206e:	bf00      	nop
  402070:	20000430 	.word	0x20000430
  402074:	004050ec 	.word	0x004050ec
  402078:	0040202d 	.word	0x0040202d

0040207c <_cleanup_r>:
  40207c:	4901      	ldr	r1, [pc, #4]	; (402084 <_cleanup_r+0x8>)
  40207e:	f000 b9ab 	b.w	4023d8 <_fwalk_reent>
  402082:	bf00      	nop
  402084:	00403a4d 	.word	0x00403a4d

00402088 <__sinit.part.1>:
  402088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40208c:	4b35      	ldr	r3, [pc, #212]	; (402164 <__sinit.part.1+0xdc>)
  40208e:	6845      	ldr	r5, [r0, #4]
  402090:	63c3      	str	r3, [r0, #60]	; 0x3c
  402092:	2400      	movs	r4, #0
  402094:	4607      	mov	r7, r0
  402096:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40209a:	2304      	movs	r3, #4
  40209c:	2103      	movs	r1, #3
  40209e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4020a2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4020a6:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4020aa:	b083      	sub	sp, #12
  4020ac:	602c      	str	r4, [r5, #0]
  4020ae:	606c      	str	r4, [r5, #4]
  4020b0:	60ac      	str	r4, [r5, #8]
  4020b2:	666c      	str	r4, [r5, #100]	; 0x64
  4020b4:	81ec      	strh	r4, [r5, #14]
  4020b6:	612c      	str	r4, [r5, #16]
  4020b8:	616c      	str	r4, [r5, #20]
  4020ba:	61ac      	str	r4, [r5, #24]
  4020bc:	81ab      	strh	r3, [r5, #12]
  4020be:	4621      	mov	r1, r4
  4020c0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4020c4:	2208      	movs	r2, #8
  4020c6:	f000 fc7f 	bl	4029c8 <memset>
  4020ca:	68be      	ldr	r6, [r7, #8]
  4020cc:	f8df b098 	ldr.w	fp, [pc, #152]	; 402168 <__sinit.part.1+0xe0>
  4020d0:	f8df a098 	ldr.w	sl, [pc, #152]	; 40216c <__sinit.part.1+0xe4>
  4020d4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 402170 <__sinit.part.1+0xe8>
  4020d8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 402174 <__sinit.part.1+0xec>
  4020dc:	f8c5 b020 	str.w	fp, [r5, #32]
  4020e0:	2301      	movs	r3, #1
  4020e2:	2209      	movs	r2, #9
  4020e4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4020e8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4020ec:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4020f0:	61ed      	str	r5, [r5, #28]
  4020f2:	4621      	mov	r1, r4
  4020f4:	81f3      	strh	r3, [r6, #14]
  4020f6:	81b2      	strh	r2, [r6, #12]
  4020f8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4020fc:	6034      	str	r4, [r6, #0]
  4020fe:	6074      	str	r4, [r6, #4]
  402100:	60b4      	str	r4, [r6, #8]
  402102:	6674      	str	r4, [r6, #100]	; 0x64
  402104:	6134      	str	r4, [r6, #16]
  402106:	6174      	str	r4, [r6, #20]
  402108:	61b4      	str	r4, [r6, #24]
  40210a:	2208      	movs	r2, #8
  40210c:	9301      	str	r3, [sp, #4]
  40210e:	f000 fc5b 	bl	4029c8 <memset>
  402112:	68fd      	ldr	r5, [r7, #12]
  402114:	61f6      	str	r6, [r6, #28]
  402116:	2012      	movs	r0, #18
  402118:	2202      	movs	r2, #2
  40211a:	f8c6 b020 	str.w	fp, [r6, #32]
  40211e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  402122:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  402126:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40212a:	4621      	mov	r1, r4
  40212c:	81a8      	strh	r0, [r5, #12]
  40212e:	81ea      	strh	r2, [r5, #14]
  402130:	602c      	str	r4, [r5, #0]
  402132:	606c      	str	r4, [r5, #4]
  402134:	60ac      	str	r4, [r5, #8]
  402136:	666c      	str	r4, [r5, #100]	; 0x64
  402138:	612c      	str	r4, [r5, #16]
  40213a:	616c      	str	r4, [r5, #20]
  40213c:	61ac      	str	r4, [r5, #24]
  40213e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402142:	2208      	movs	r2, #8
  402144:	f000 fc40 	bl	4029c8 <memset>
  402148:	9b01      	ldr	r3, [sp, #4]
  40214a:	61ed      	str	r5, [r5, #28]
  40214c:	f8c5 b020 	str.w	fp, [r5, #32]
  402150:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402154:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402158:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40215c:	63bb      	str	r3, [r7, #56]	; 0x38
  40215e:	b003      	add	sp, #12
  402160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402164:	0040207d 	.word	0x0040207d
  402168:	00402b99 	.word	0x00402b99
  40216c:	00402bbd 	.word	0x00402bbd
  402170:	00402bf5 	.word	0x00402bf5
  402174:	00402c15 	.word	0x00402c15

00402178 <__sinit>:
  402178:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40217a:	b103      	cbz	r3, 40217e <__sinit+0x6>
  40217c:	4770      	bx	lr
  40217e:	f7ff bf83 	b.w	402088 <__sinit.part.1>
  402182:	bf00      	nop

00402184 <__sfp_lock_acquire>:
  402184:	4770      	bx	lr
  402186:	bf00      	nop

00402188 <__sfp_lock_release>:
  402188:	4770      	bx	lr
  40218a:	bf00      	nop

0040218c <_malloc_trim_r>:
  40218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40218e:	4f23      	ldr	r7, [pc, #140]	; (40221c <_malloc_trim_r+0x90>)
  402190:	460c      	mov	r4, r1
  402192:	4606      	mov	r6, r0
  402194:	f000 fc66 	bl	402a64 <__malloc_lock>
  402198:	68bb      	ldr	r3, [r7, #8]
  40219a:	685d      	ldr	r5, [r3, #4]
  40219c:	f025 0503 	bic.w	r5, r5, #3
  4021a0:	1b29      	subs	r1, r5, r4
  4021a2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4021a6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4021aa:	f021 010f 	bic.w	r1, r1, #15
  4021ae:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4021b2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4021b6:	db07      	blt.n	4021c8 <_malloc_trim_r+0x3c>
  4021b8:	4630      	mov	r0, r6
  4021ba:	2100      	movs	r1, #0
  4021bc:	f000 fc56 	bl	402a6c <_sbrk_r>
  4021c0:	68bb      	ldr	r3, [r7, #8]
  4021c2:	442b      	add	r3, r5
  4021c4:	4298      	cmp	r0, r3
  4021c6:	d004      	beq.n	4021d2 <_malloc_trim_r+0x46>
  4021c8:	4630      	mov	r0, r6
  4021ca:	f000 fc4d 	bl	402a68 <__malloc_unlock>
  4021ce:	2000      	movs	r0, #0
  4021d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021d2:	4630      	mov	r0, r6
  4021d4:	4261      	negs	r1, r4
  4021d6:	f000 fc49 	bl	402a6c <_sbrk_r>
  4021da:	3001      	adds	r0, #1
  4021dc:	d00d      	beq.n	4021fa <_malloc_trim_r+0x6e>
  4021de:	4b10      	ldr	r3, [pc, #64]	; (402220 <_malloc_trim_r+0x94>)
  4021e0:	68ba      	ldr	r2, [r7, #8]
  4021e2:	6819      	ldr	r1, [r3, #0]
  4021e4:	1b2d      	subs	r5, r5, r4
  4021e6:	f045 0501 	orr.w	r5, r5, #1
  4021ea:	4630      	mov	r0, r6
  4021ec:	1b09      	subs	r1, r1, r4
  4021ee:	6055      	str	r5, [r2, #4]
  4021f0:	6019      	str	r1, [r3, #0]
  4021f2:	f000 fc39 	bl	402a68 <__malloc_unlock>
  4021f6:	2001      	movs	r0, #1
  4021f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021fa:	4630      	mov	r0, r6
  4021fc:	2100      	movs	r1, #0
  4021fe:	f000 fc35 	bl	402a6c <_sbrk_r>
  402202:	68ba      	ldr	r2, [r7, #8]
  402204:	1a83      	subs	r3, r0, r2
  402206:	2b0f      	cmp	r3, #15
  402208:	ddde      	ble.n	4021c8 <_malloc_trim_r+0x3c>
  40220a:	4c06      	ldr	r4, [pc, #24]	; (402224 <_malloc_trim_r+0x98>)
  40220c:	4904      	ldr	r1, [pc, #16]	; (402220 <_malloc_trim_r+0x94>)
  40220e:	6824      	ldr	r4, [r4, #0]
  402210:	f043 0301 	orr.w	r3, r3, #1
  402214:	1b00      	subs	r0, r0, r4
  402216:	6053      	str	r3, [r2, #4]
  402218:	6008      	str	r0, [r1, #0]
  40221a:	e7d5      	b.n	4021c8 <_malloc_trim_r+0x3c>
  40221c:	20000434 	.word	0x20000434
  402220:	20000b24 	.word	0x20000b24
  402224:	20000840 	.word	0x20000840

00402228 <_free_r>:
  402228:	2900      	cmp	r1, #0
  40222a:	d04e      	beq.n	4022ca <_free_r+0xa2>
  40222c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402230:	460c      	mov	r4, r1
  402232:	4680      	mov	r8, r0
  402234:	f000 fc16 	bl	402a64 <__malloc_lock>
  402238:	f854 7c04 	ldr.w	r7, [r4, #-4]
  40223c:	4962      	ldr	r1, [pc, #392]	; (4023c8 <_free_r+0x1a0>)
  40223e:	f027 0201 	bic.w	r2, r7, #1
  402242:	f1a4 0508 	sub.w	r5, r4, #8
  402246:	18ab      	adds	r3, r5, r2
  402248:	688e      	ldr	r6, [r1, #8]
  40224a:	6858      	ldr	r0, [r3, #4]
  40224c:	429e      	cmp	r6, r3
  40224e:	f020 0003 	bic.w	r0, r0, #3
  402252:	d05a      	beq.n	40230a <_free_r+0xe2>
  402254:	07fe      	lsls	r6, r7, #31
  402256:	6058      	str	r0, [r3, #4]
  402258:	d40b      	bmi.n	402272 <_free_r+0x4a>
  40225a:	f854 7c08 	ldr.w	r7, [r4, #-8]
  40225e:	1bed      	subs	r5, r5, r7
  402260:	f101 0e08 	add.w	lr, r1, #8
  402264:	68ac      	ldr	r4, [r5, #8]
  402266:	4574      	cmp	r4, lr
  402268:	443a      	add	r2, r7
  40226a:	d067      	beq.n	40233c <_free_r+0x114>
  40226c:	68ef      	ldr	r7, [r5, #12]
  40226e:	60e7      	str	r7, [r4, #12]
  402270:	60bc      	str	r4, [r7, #8]
  402272:	181c      	adds	r4, r3, r0
  402274:	6864      	ldr	r4, [r4, #4]
  402276:	07e4      	lsls	r4, r4, #31
  402278:	d40c      	bmi.n	402294 <_free_r+0x6c>
  40227a:	4f54      	ldr	r7, [pc, #336]	; (4023cc <_free_r+0x1a4>)
  40227c:	689c      	ldr	r4, [r3, #8]
  40227e:	42bc      	cmp	r4, r7
  402280:	4402      	add	r2, r0
  402282:	d07c      	beq.n	40237e <_free_r+0x156>
  402284:	68d8      	ldr	r0, [r3, #12]
  402286:	60e0      	str	r0, [r4, #12]
  402288:	f042 0301 	orr.w	r3, r2, #1
  40228c:	6084      	str	r4, [r0, #8]
  40228e:	606b      	str	r3, [r5, #4]
  402290:	50aa      	str	r2, [r5, r2]
  402292:	e003      	b.n	40229c <_free_r+0x74>
  402294:	f042 0301 	orr.w	r3, r2, #1
  402298:	606b      	str	r3, [r5, #4]
  40229a:	50aa      	str	r2, [r5, r2]
  40229c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4022a0:	d214      	bcs.n	4022cc <_free_r+0xa4>
  4022a2:	08d2      	lsrs	r2, r2, #3
  4022a4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  4022a8:	6848      	ldr	r0, [r1, #4]
  4022aa:	689f      	ldr	r7, [r3, #8]
  4022ac:	60af      	str	r7, [r5, #8]
  4022ae:	1092      	asrs	r2, r2, #2
  4022b0:	2401      	movs	r4, #1
  4022b2:	fa04 f202 	lsl.w	r2, r4, r2
  4022b6:	4310      	orrs	r0, r2
  4022b8:	60eb      	str	r3, [r5, #12]
  4022ba:	6048      	str	r0, [r1, #4]
  4022bc:	609d      	str	r5, [r3, #8]
  4022be:	60fd      	str	r5, [r7, #12]
  4022c0:	4640      	mov	r0, r8
  4022c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4022c6:	f000 bbcf 	b.w	402a68 <__malloc_unlock>
  4022ca:	4770      	bx	lr
  4022cc:	0a53      	lsrs	r3, r2, #9
  4022ce:	2b04      	cmp	r3, #4
  4022d0:	d847      	bhi.n	402362 <_free_r+0x13a>
  4022d2:	0993      	lsrs	r3, r2, #6
  4022d4:	f103 0438 	add.w	r4, r3, #56	; 0x38
  4022d8:	0060      	lsls	r0, r4, #1
  4022da:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  4022de:	493a      	ldr	r1, [pc, #232]	; (4023c8 <_free_r+0x1a0>)
  4022e0:	6883      	ldr	r3, [r0, #8]
  4022e2:	4283      	cmp	r3, r0
  4022e4:	d043      	beq.n	40236e <_free_r+0x146>
  4022e6:	6859      	ldr	r1, [r3, #4]
  4022e8:	f021 0103 	bic.w	r1, r1, #3
  4022ec:	4291      	cmp	r1, r2
  4022ee:	d902      	bls.n	4022f6 <_free_r+0xce>
  4022f0:	689b      	ldr	r3, [r3, #8]
  4022f2:	4298      	cmp	r0, r3
  4022f4:	d1f7      	bne.n	4022e6 <_free_r+0xbe>
  4022f6:	68da      	ldr	r2, [r3, #12]
  4022f8:	60ea      	str	r2, [r5, #12]
  4022fa:	60ab      	str	r3, [r5, #8]
  4022fc:	4640      	mov	r0, r8
  4022fe:	6095      	str	r5, [r2, #8]
  402300:	60dd      	str	r5, [r3, #12]
  402302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402306:	f000 bbaf 	b.w	402a68 <__malloc_unlock>
  40230a:	07ff      	lsls	r7, r7, #31
  40230c:	4402      	add	r2, r0
  40230e:	d407      	bmi.n	402320 <_free_r+0xf8>
  402310:	f854 3c08 	ldr.w	r3, [r4, #-8]
  402314:	1aed      	subs	r5, r5, r3
  402316:	441a      	add	r2, r3
  402318:	68a8      	ldr	r0, [r5, #8]
  40231a:	68eb      	ldr	r3, [r5, #12]
  40231c:	60c3      	str	r3, [r0, #12]
  40231e:	6098      	str	r0, [r3, #8]
  402320:	4b2b      	ldr	r3, [pc, #172]	; (4023d0 <_free_r+0x1a8>)
  402322:	681b      	ldr	r3, [r3, #0]
  402324:	f042 0001 	orr.w	r0, r2, #1
  402328:	429a      	cmp	r2, r3
  40232a:	6068      	str	r0, [r5, #4]
  40232c:	608d      	str	r5, [r1, #8]
  40232e:	d3c7      	bcc.n	4022c0 <_free_r+0x98>
  402330:	4b28      	ldr	r3, [pc, #160]	; (4023d4 <_free_r+0x1ac>)
  402332:	4640      	mov	r0, r8
  402334:	6819      	ldr	r1, [r3, #0]
  402336:	f7ff ff29 	bl	40218c <_malloc_trim_r>
  40233a:	e7c1      	b.n	4022c0 <_free_r+0x98>
  40233c:	1819      	adds	r1, r3, r0
  40233e:	6849      	ldr	r1, [r1, #4]
  402340:	07c9      	lsls	r1, r1, #31
  402342:	d409      	bmi.n	402358 <_free_r+0x130>
  402344:	68d9      	ldr	r1, [r3, #12]
  402346:	689b      	ldr	r3, [r3, #8]
  402348:	4402      	add	r2, r0
  40234a:	f042 0001 	orr.w	r0, r2, #1
  40234e:	60d9      	str	r1, [r3, #12]
  402350:	608b      	str	r3, [r1, #8]
  402352:	6068      	str	r0, [r5, #4]
  402354:	50aa      	str	r2, [r5, r2]
  402356:	e7b3      	b.n	4022c0 <_free_r+0x98>
  402358:	f042 0301 	orr.w	r3, r2, #1
  40235c:	606b      	str	r3, [r5, #4]
  40235e:	50aa      	str	r2, [r5, r2]
  402360:	e7ae      	b.n	4022c0 <_free_r+0x98>
  402362:	2b14      	cmp	r3, #20
  402364:	d814      	bhi.n	402390 <_free_r+0x168>
  402366:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  40236a:	0060      	lsls	r0, r4, #1
  40236c:	e7b5      	b.n	4022da <_free_r+0xb2>
  40236e:	684a      	ldr	r2, [r1, #4]
  402370:	10a4      	asrs	r4, r4, #2
  402372:	2001      	movs	r0, #1
  402374:	40a0      	lsls	r0, r4
  402376:	4302      	orrs	r2, r0
  402378:	604a      	str	r2, [r1, #4]
  40237a:	461a      	mov	r2, r3
  40237c:	e7bc      	b.n	4022f8 <_free_r+0xd0>
  40237e:	f042 0301 	orr.w	r3, r2, #1
  402382:	614d      	str	r5, [r1, #20]
  402384:	610d      	str	r5, [r1, #16]
  402386:	60ec      	str	r4, [r5, #12]
  402388:	60ac      	str	r4, [r5, #8]
  40238a:	606b      	str	r3, [r5, #4]
  40238c:	50aa      	str	r2, [r5, r2]
  40238e:	e797      	b.n	4022c0 <_free_r+0x98>
  402390:	2b54      	cmp	r3, #84	; 0x54
  402392:	d804      	bhi.n	40239e <_free_r+0x176>
  402394:	0b13      	lsrs	r3, r2, #12
  402396:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  40239a:	0060      	lsls	r0, r4, #1
  40239c:	e79d      	b.n	4022da <_free_r+0xb2>
  40239e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4023a2:	d804      	bhi.n	4023ae <_free_r+0x186>
  4023a4:	0bd3      	lsrs	r3, r2, #15
  4023a6:	f103 0477 	add.w	r4, r3, #119	; 0x77
  4023aa:	0060      	lsls	r0, r4, #1
  4023ac:	e795      	b.n	4022da <_free_r+0xb2>
  4023ae:	f240 5054 	movw	r0, #1364	; 0x554
  4023b2:	4283      	cmp	r3, r0
  4023b4:	d804      	bhi.n	4023c0 <_free_r+0x198>
  4023b6:	0c93      	lsrs	r3, r2, #18
  4023b8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  4023bc:	0060      	lsls	r0, r4, #1
  4023be:	e78c      	b.n	4022da <_free_r+0xb2>
  4023c0:	20fc      	movs	r0, #252	; 0xfc
  4023c2:	247e      	movs	r4, #126	; 0x7e
  4023c4:	e789      	b.n	4022da <_free_r+0xb2>
  4023c6:	bf00      	nop
  4023c8:	20000434 	.word	0x20000434
  4023cc:	2000043c 	.word	0x2000043c
  4023d0:	2000083c 	.word	0x2000083c
  4023d4:	20000b20 	.word	0x20000b20

004023d8 <_fwalk_reent>:
  4023d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4023dc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4023e0:	d01f      	beq.n	402422 <_fwalk_reent+0x4a>
  4023e2:	4688      	mov	r8, r1
  4023e4:	4606      	mov	r6, r0
  4023e6:	f04f 0900 	mov.w	r9, #0
  4023ea:	687d      	ldr	r5, [r7, #4]
  4023ec:	68bc      	ldr	r4, [r7, #8]
  4023ee:	3d01      	subs	r5, #1
  4023f0:	d411      	bmi.n	402416 <_fwalk_reent+0x3e>
  4023f2:	89a3      	ldrh	r3, [r4, #12]
  4023f4:	2b01      	cmp	r3, #1
  4023f6:	f105 35ff 	add.w	r5, r5, #4294967295
  4023fa:	d908      	bls.n	40240e <_fwalk_reent+0x36>
  4023fc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402400:	3301      	adds	r3, #1
  402402:	4621      	mov	r1, r4
  402404:	4630      	mov	r0, r6
  402406:	d002      	beq.n	40240e <_fwalk_reent+0x36>
  402408:	47c0      	blx	r8
  40240a:	ea49 0900 	orr.w	r9, r9, r0
  40240e:	1c6b      	adds	r3, r5, #1
  402410:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402414:	d1ed      	bne.n	4023f2 <_fwalk_reent+0x1a>
  402416:	683f      	ldr	r7, [r7, #0]
  402418:	2f00      	cmp	r7, #0
  40241a:	d1e6      	bne.n	4023ea <_fwalk_reent+0x12>
  40241c:	4648      	mov	r0, r9
  40241e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402422:	46b9      	mov	r9, r7
  402424:	4648      	mov	r0, r9
  402426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40242a:	bf00      	nop

0040242c <__libc_init_array>:
  40242c:	b570      	push	{r4, r5, r6, lr}
  40242e:	4e0f      	ldr	r6, [pc, #60]	; (40246c <__libc_init_array+0x40>)
  402430:	4d0f      	ldr	r5, [pc, #60]	; (402470 <__libc_init_array+0x44>)
  402432:	1b76      	subs	r6, r6, r5
  402434:	10b6      	asrs	r6, r6, #2
  402436:	bf18      	it	ne
  402438:	2400      	movne	r4, #0
  40243a:	d005      	beq.n	402448 <__libc_init_array+0x1c>
  40243c:	3401      	adds	r4, #1
  40243e:	f855 3b04 	ldr.w	r3, [r5], #4
  402442:	4798      	blx	r3
  402444:	42a6      	cmp	r6, r4
  402446:	d1f9      	bne.n	40243c <__libc_init_array+0x10>
  402448:	4e0a      	ldr	r6, [pc, #40]	; (402474 <__libc_init_array+0x48>)
  40244a:	4d0b      	ldr	r5, [pc, #44]	; (402478 <__libc_init_array+0x4c>)
  40244c:	1b76      	subs	r6, r6, r5
  40244e:	f002 fe77 	bl	405140 <_init>
  402452:	10b6      	asrs	r6, r6, #2
  402454:	bf18      	it	ne
  402456:	2400      	movne	r4, #0
  402458:	d006      	beq.n	402468 <__libc_init_array+0x3c>
  40245a:	3401      	adds	r4, #1
  40245c:	f855 3b04 	ldr.w	r3, [r5], #4
  402460:	4798      	blx	r3
  402462:	42a6      	cmp	r6, r4
  402464:	d1f9      	bne.n	40245a <__libc_init_array+0x2e>
  402466:	bd70      	pop	{r4, r5, r6, pc}
  402468:	bd70      	pop	{r4, r5, r6, pc}
  40246a:	bf00      	nop
  40246c:	0040514c 	.word	0x0040514c
  402470:	0040514c 	.word	0x0040514c
  402474:	00405154 	.word	0x00405154
  402478:	0040514c 	.word	0x0040514c

0040247c <iprintf>:
  40247c:	b40f      	push	{r0, r1, r2, r3}
  40247e:	b500      	push	{lr}
  402480:	4907      	ldr	r1, [pc, #28]	; (4024a0 <iprintf+0x24>)
  402482:	b083      	sub	sp, #12
  402484:	ab04      	add	r3, sp, #16
  402486:	6808      	ldr	r0, [r1, #0]
  402488:	f853 2b04 	ldr.w	r2, [r3], #4
  40248c:	6881      	ldr	r1, [r0, #8]
  40248e:	9301      	str	r3, [sp, #4]
  402490:	f000 fc00 	bl	402c94 <_vfiprintf_r>
  402494:	b003      	add	sp, #12
  402496:	f85d eb04 	ldr.w	lr, [sp], #4
  40249a:	b004      	add	sp, #16
  40249c:	4770      	bx	lr
  40249e:	bf00      	nop
  4024a0:	20000430 	.word	0x20000430

004024a4 <_malloc_r>:
  4024a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024a8:	f101 050b 	add.w	r5, r1, #11
  4024ac:	2d16      	cmp	r5, #22
  4024ae:	b083      	sub	sp, #12
  4024b0:	4606      	mov	r6, r0
  4024b2:	d927      	bls.n	402504 <_malloc_r+0x60>
  4024b4:	f035 0507 	bics.w	r5, r5, #7
  4024b8:	f100 80b6 	bmi.w	402628 <_malloc_r+0x184>
  4024bc:	42a9      	cmp	r1, r5
  4024be:	f200 80b3 	bhi.w	402628 <_malloc_r+0x184>
  4024c2:	f000 facf 	bl	402a64 <__malloc_lock>
  4024c6:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4024ca:	d222      	bcs.n	402512 <_malloc_r+0x6e>
  4024cc:	4fc2      	ldr	r7, [pc, #776]	; (4027d8 <_malloc_r+0x334>)
  4024ce:	08e8      	lsrs	r0, r5, #3
  4024d0:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  4024d4:	68dc      	ldr	r4, [r3, #12]
  4024d6:	429c      	cmp	r4, r3
  4024d8:	f000 81c8 	beq.w	40286c <_malloc_r+0x3c8>
  4024dc:	6863      	ldr	r3, [r4, #4]
  4024de:	68e1      	ldr	r1, [r4, #12]
  4024e0:	68a5      	ldr	r5, [r4, #8]
  4024e2:	f023 0303 	bic.w	r3, r3, #3
  4024e6:	4423      	add	r3, r4
  4024e8:	4630      	mov	r0, r6
  4024ea:	685a      	ldr	r2, [r3, #4]
  4024ec:	60e9      	str	r1, [r5, #12]
  4024ee:	f042 0201 	orr.w	r2, r2, #1
  4024f2:	608d      	str	r5, [r1, #8]
  4024f4:	605a      	str	r2, [r3, #4]
  4024f6:	f000 fab7 	bl	402a68 <__malloc_unlock>
  4024fa:	3408      	adds	r4, #8
  4024fc:	4620      	mov	r0, r4
  4024fe:	b003      	add	sp, #12
  402500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402504:	2910      	cmp	r1, #16
  402506:	f200 808f 	bhi.w	402628 <_malloc_r+0x184>
  40250a:	f000 faab 	bl	402a64 <__malloc_lock>
  40250e:	2510      	movs	r5, #16
  402510:	e7dc      	b.n	4024cc <_malloc_r+0x28>
  402512:	0a68      	lsrs	r0, r5, #9
  402514:	f000 808f 	beq.w	402636 <_malloc_r+0x192>
  402518:	2804      	cmp	r0, #4
  40251a:	f200 8154 	bhi.w	4027c6 <_malloc_r+0x322>
  40251e:	09a8      	lsrs	r0, r5, #6
  402520:	3038      	adds	r0, #56	; 0x38
  402522:	0041      	lsls	r1, r0, #1
  402524:	4fac      	ldr	r7, [pc, #688]	; (4027d8 <_malloc_r+0x334>)
  402526:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40252a:	68cc      	ldr	r4, [r1, #12]
  40252c:	42a1      	cmp	r1, r4
  40252e:	d106      	bne.n	40253e <_malloc_r+0x9a>
  402530:	e00c      	b.n	40254c <_malloc_r+0xa8>
  402532:	2a00      	cmp	r2, #0
  402534:	f280 8082 	bge.w	40263c <_malloc_r+0x198>
  402538:	68e4      	ldr	r4, [r4, #12]
  40253a:	42a1      	cmp	r1, r4
  40253c:	d006      	beq.n	40254c <_malloc_r+0xa8>
  40253e:	6863      	ldr	r3, [r4, #4]
  402540:	f023 0303 	bic.w	r3, r3, #3
  402544:	1b5a      	subs	r2, r3, r5
  402546:	2a0f      	cmp	r2, #15
  402548:	ddf3      	ble.n	402532 <_malloc_r+0x8e>
  40254a:	3801      	subs	r0, #1
  40254c:	3001      	adds	r0, #1
  40254e:	49a2      	ldr	r1, [pc, #648]	; (4027d8 <_malloc_r+0x334>)
  402550:	693c      	ldr	r4, [r7, #16]
  402552:	f101 0e08 	add.w	lr, r1, #8
  402556:	4574      	cmp	r4, lr
  402558:	f000 817d 	beq.w	402856 <_malloc_r+0x3b2>
  40255c:	6863      	ldr	r3, [r4, #4]
  40255e:	f023 0303 	bic.w	r3, r3, #3
  402562:	1b5a      	subs	r2, r3, r5
  402564:	2a0f      	cmp	r2, #15
  402566:	f300 8163 	bgt.w	402830 <_malloc_r+0x38c>
  40256a:	2a00      	cmp	r2, #0
  40256c:	f8c1 e014 	str.w	lr, [r1, #20]
  402570:	f8c1 e010 	str.w	lr, [r1, #16]
  402574:	da73      	bge.n	40265e <_malloc_r+0x1ba>
  402576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40257a:	f080 8139 	bcs.w	4027f0 <_malloc_r+0x34c>
  40257e:	08db      	lsrs	r3, r3, #3
  402580:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  402584:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  402588:	684a      	ldr	r2, [r1, #4]
  40258a:	f8d8 9008 	ldr.w	r9, [r8, #8]
  40258e:	f8c4 9008 	str.w	r9, [r4, #8]
  402592:	2301      	movs	r3, #1
  402594:	fa03 f30c 	lsl.w	r3, r3, ip
  402598:	4313      	orrs	r3, r2
  40259a:	f8c4 800c 	str.w	r8, [r4, #12]
  40259e:	604b      	str	r3, [r1, #4]
  4025a0:	f8c8 4008 	str.w	r4, [r8, #8]
  4025a4:	f8c9 400c 	str.w	r4, [r9, #12]
  4025a8:	1082      	asrs	r2, r0, #2
  4025aa:	2401      	movs	r4, #1
  4025ac:	4094      	lsls	r4, r2
  4025ae:	429c      	cmp	r4, r3
  4025b0:	d862      	bhi.n	402678 <_malloc_r+0x1d4>
  4025b2:	4223      	tst	r3, r4
  4025b4:	d106      	bne.n	4025c4 <_malloc_r+0x120>
  4025b6:	f020 0003 	bic.w	r0, r0, #3
  4025ba:	0064      	lsls	r4, r4, #1
  4025bc:	4223      	tst	r3, r4
  4025be:	f100 0004 	add.w	r0, r0, #4
  4025c2:	d0fa      	beq.n	4025ba <_malloc_r+0x116>
  4025c4:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  4025c8:	46c4      	mov	ip, r8
  4025ca:	4681      	mov	r9, r0
  4025cc:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4025d0:	459c      	cmp	ip, r3
  4025d2:	d107      	bne.n	4025e4 <_malloc_r+0x140>
  4025d4:	e141      	b.n	40285a <_malloc_r+0x3b6>
  4025d6:	2900      	cmp	r1, #0
  4025d8:	f280 8151 	bge.w	40287e <_malloc_r+0x3da>
  4025dc:	68db      	ldr	r3, [r3, #12]
  4025de:	459c      	cmp	ip, r3
  4025e0:	f000 813b 	beq.w	40285a <_malloc_r+0x3b6>
  4025e4:	685a      	ldr	r2, [r3, #4]
  4025e6:	f022 0203 	bic.w	r2, r2, #3
  4025ea:	1b51      	subs	r1, r2, r5
  4025ec:	290f      	cmp	r1, #15
  4025ee:	ddf2      	ble.n	4025d6 <_malloc_r+0x132>
  4025f0:	461c      	mov	r4, r3
  4025f2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4025f6:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4025fa:	195a      	adds	r2, r3, r5
  4025fc:	f045 0901 	orr.w	r9, r5, #1
  402600:	f041 0501 	orr.w	r5, r1, #1
  402604:	f8c3 9004 	str.w	r9, [r3, #4]
  402608:	4630      	mov	r0, r6
  40260a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40260e:	f8cc 8008 	str.w	r8, [ip, #8]
  402612:	617a      	str	r2, [r7, #20]
  402614:	613a      	str	r2, [r7, #16]
  402616:	f8c2 e00c 	str.w	lr, [r2, #12]
  40261a:	f8c2 e008 	str.w	lr, [r2, #8]
  40261e:	6055      	str	r5, [r2, #4]
  402620:	5051      	str	r1, [r2, r1]
  402622:	f000 fa21 	bl	402a68 <__malloc_unlock>
  402626:	e769      	b.n	4024fc <_malloc_r+0x58>
  402628:	2400      	movs	r4, #0
  40262a:	230c      	movs	r3, #12
  40262c:	4620      	mov	r0, r4
  40262e:	6033      	str	r3, [r6, #0]
  402630:	b003      	add	sp, #12
  402632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402636:	217e      	movs	r1, #126	; 0x7e
  402638:	203f      	movs	r0, #63	; 0x3f
  40263a:	e773      	b.n	402524 <_malloc_r+0x80>
  40263c:	4423      	add	r3, r4
  40263e:	68e1      	ldr	r1, [r4, #12]
  402640:	685a      	ldr	r2, [r3, #4]
  402642:	68a5      	ldr	r5, [r4, #8]
  402644:	f042 0201 	orr.w	r2, r2, #1
  402648:	60e9      	str	r1, [r5, #12]
  40264a:	4630      	mov	r0, r6
  40264c:	608d      	str	r5, [r1, #8]
  40264e:	605a      	str	r2, [r3, #4]
  402650:	f000 fa0a 	bl	402a68 <__malloc_unlock>
  402654:	3408      	adds	r4, #8
  402656:	4620      	mov	r0, r4
  402658:	b003      	add	sp, #12
  40265a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40265e:	4423      	add	r3, r4
  402660:	4630      	mov	r0, r6
  402662:	685a      	ldr	r2, [r3, #4]
  402664:	f042 0201 	orr.w	r2, r2, #1
  402668:	605a      	str	r2, [r3, #4]
  40266a:	f000 f9fd 	bl	402a68 <__malloc_unlock>
  40266e:	3408      	adds	r4, #8
  402670:	4620      	mov	r0, r4
  402672:	b003      	add	sp, #12
  402674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402678:	68bc      	ldr	r4, [r7, #8]
  40267a:	6863      	ldr	r3, [r4, #4]
  40267c:	f023 0803 	bic.w	r8, r3, #3
  402680:	4545      	cmp	r5, r8
  402682:	d804      	bhi.n	40268e <_malloc_r+0x1ea>
  402684:	ebc5 0308 	rsb	r3, r5, r8
  402688:	2b0f      	cmp	r3, #15
  40268a:	f300 808c 	bgt.w	4027a6 <_malloc_r+0x302>
  40268e:	4b53      	ldr	r3, [pc, #332]	; (4027dc <_malloc_r+0x338>)
  402690:	f8df a158 	ldr.w	sl, [pc, #344]	; 4027ec <_malloc_r+0x348>
  402694:	681a      	ldr	r2, [r3, #0]
  402696:	f8da 3000 	ldr.w	r3, [sl]
  40269a:	3301      	adds	r3, #1
  40269c:	442a      	add	r2, r5
  40269e:	eb04 0b08 	add.w	fp, r4, r8
  4026a2:	f000 8150 	beq.w	402946 <_malloc_r+0x4a2>
  4026a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4026aa:	320f      	adds	r2, #15
  4026ac:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4026b0:	f022 020f 	bic.w	r2, r2, #15
  4026b4:	4611      	mov	r1, r2
  4026b6:	4630      	mov	r0, r6
  4026b8:	9201      	str	r2, [sp, #4]
  4026ba:	f000 f9d7 	bl	402a6c <_sbrk_r>
  4026be:	f1b0 3fff 	cmp.w	r0, #4294967295
  4026c2:	4681      	mov	r9, r0
  4026c4:	9a01      	ldr	r2, [sp, #4]
  4026c6:	f000 8147 	beq.w	402958 <_malloc_r+0x4b4>
  4026ca:	4583      	cmp	fp, r0
  4026cc:	f200 80ee 	bhi.w	4028ac <_malloc_r+0x408>
  4026d0:	4b43      	ldr	r3, [pc, #268]	; (4027e0 <_malloc_r+0x33c>)
  4026d2:	6819      	ldr	r1, [r3, #0]
  4026d4:	45cb      	cmp	fp, r9
  4026d6:	4411      	add	r1, r2
  4026d8:	6019      	str	r1, [r3, #0]
  4026da:	f000 8142 	beq.w	402962 <_malloc_r+0x4be>
  4026de:	f8da 0000 	ldr.w	r0, [sl]
  4026e2:	f8df e108 	ldr.w	lr, [pc, #264]	; 4027ec <_malloc_r+0x348>
  4026e6:	3001      	adds	r0, #1
  4026e8:	bf1b      	ittet	ne
  4026ea:	ebcb 0b09 	rsbne	fp, fp, r9
  4026ee:	4459      	addne	r1, fp
  4026f0:	f8ce 9000 	streq.w	r9, [lr]
  4026f4:	6019      	strne	r1, [r3, #0]
  4026f6:	f019 0107 	ands.w	r1, r9, #7
  4026fa:	f000 8107 	beq.w	40290c <_malloc_r+0x468>
  4026fe:	f1c1 0008 	rsb	r0, r1, #8
  402702:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402706:	4481      	add	r9, r0
  402708:	3108      	adds	r1, #8
  40270a:	444a      	add	r2, r9
  40270c:	f3c2 020b 	ubfx	r2, r2, #0, #12
  402710:	ebc2 0a01 	rsb	sl, r2, r1
  402714:	4651      	mov	r1, sl
  402716:	4630      	mov	r0, r6
  402718:	9301      	str	r3, [sp, #4]
  40271a:	f000 f9a7 	bl	402a6c <_sbrk_r>
  40271e:	1c43      	adds	r3, r0, #1
  402720:	9b01      	ldr	r3, [sp, #4]
  402722:	f000 812c 	beq.w	40297e <_malloc_r+0x4da>
  402726:	ebc9 0200 	rsb	r2, r9, r0
  40272a:	4452      	add	r2, sl
  40272c:	f042 0201 	orr.w	r2, r2, #1
  402730:	6819      	ldr	r1, [r3, #0]
  402732:	f8c7 9008 	str.w	r9, [r7, #8]
  402736:	4451      	add	r1, sl
  402738:	42bc      	cmp	r4, r7
  40273a:	f8c9 2004 	str.w	r2, [r9, #4]
  40273e:	6019      	str	r1, [r3, #0]
  402740:	f8df a09c 	ldr.w	sl, [pc, #156]	; 4027e0 <_malloc_r+0x33c>
  402744:	d016      	beq.n	402774 <_malloc_r+0x2d0>
  402746:	f1b8 0f0f 	cmp.w	r8, #15
  40274a:	f240 80ee 	bls.w	40292a <_malloc_r+0x486>
  40274e:	6862      	ldr	r2, [r4, #4]
  402750:	f1a8 030c 	sub.w	r3, r8, #12
  402754:	f023 0307 	bic.w	r3, r3, #7
  402758:	18e0      	adds	r0, r4, r3
  40275a:	f002 0201 	and.w	r2, r2, #1
  40275e:	f04f 0e05 	mov.w	lr, #5
  402762:	431a      	orrs	r2, r3
  402764:	2b0f      	cmp	r3, #15
  402766:	6062      	str	r2, [r4, #4]
  402768:	f8c0 e004 	str.w	lr, [r0, #4]
  40276c:	f8c0 e008 	str.w	lr, [r0, #8]
  402770:	f200 8109 	bhi.w	402986 <_malloc_r+0x4e2>
  402774:	4b1b      	ldr	r3, [pc, #108]	; (4027e4 <_malloc_r+0x340>)
  402776:	68bc      	ldr	r4, [r7, #8]
  402778:	681a      	ldr	r2, [r3, #0]
  40277a:	4291      	cmp	r1, r2
  40277c:	bf88      	it	hi
  40277e:	6019      	strhi	r1, [r3, #0]
  402780:	4b19      	ldr	r3, [pc, #100]	; (4027e8 <_malloc_r+0x344>)
  402782:	681a      	ldr	r2, [r3, #0]
  402784:	4291      	cmp	r1, r2
  402786:	6862      	ldr	r2, [r4, #4]
  402788:	bf88      	it	hi
  40278a:	6019      	strhi	r1, [r3, #0]
  40278c:	f022 0203 	bic.w	r2, r2, #3
  402790:	4295      	cmp	r5, r2
  402792:	eba2 0305 	sub.w	r3, r2, r5
  402796:	d801      	bhi.n	40279c <_malloc_r+0x2f8>
  402798:	2b0f      	cmp	r3, #15
  40279a:	dc04      	bgt.n	4027a6 <_malloc_r+0x302>
  40279c:	4630      	mov	r0, r6
  40279e:	f000 f963 	bl	402a68 <__malloc_unlock>
  4027a2:	2400      	movs	r4, #0
  4027a4:	e6aa      	b.n	4024fc <_malloc_r+0x58>
  4027a6:	1962      	adds	r2, r4, r5
  4027a8:	f043 0301 	orr.w	r3, r3, #1
  4027ac:	f045 0501 	orr.w	r5, r5, #1
  4027b0:	6065      	str	r5, [r4, #4]
  4027b2:	4630      	mov	r0, r6
  4027b4:	60ba      	str	r2, [r7, #8]
  4027b6:	6053      	str	r3, [r2, #4]
  4027b8:	f000 f956 	bl	402a68 <__malloc_unlock>
  4027bc:	3408      	adds	r4, #8
  4027be:	4620      	mov	r0, r4
  4027c0:	b003      	add	sp, #12
  4027c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027c6:	2814      	cmp	r0, #20
  4027c8:	d968      	bls.n	40289c <_malloc_r+0x3f8>
  4027ca:	2854      	cmp	r0, #84	; 0x54
  4027cc:	f200 8097 	bhi.w	4028fe <_malloc_r+0x45a>
  4027d0:	0b28      	lsrs	r0, r5, #12
  4027d2:	306e      	adds	r0, #110	; 0x6e
  4027d4:	0041      	lsls	r1, r0, #1
  4027d6:	e6a5      	b.n	402524 <_malloc_r+0x80>
  4027d8:	20000434 	.word	0x20000434
  4027dc:	20000b20 	.word	0x20000b20
  4027e0:	20000b24 	.word	0x20000b24
  4027e4:	20000b1c 	.word	0x20000b1c
  4027e8:	20000b18 	.word	0x20000b18
  4027ec:	20000840 	.word	0x20000840
  4027f0:	0a5a      	lsrs	r2, r3, #9
  4027f2:	2a04      	cmp	r2, #4
  4027f4:	d955      	bls.n	4028a2 <_malloc_r+0x3fe>
  4027f6:	2a14      	cmp	r2, #20
  4027f8:	f200 80a7 	bhi.w	40294a <_malloc_r+0x4a6>
  4027fc:	325b      	adds	r2, #91	; 0x5b
  4027fe:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402802:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  402806:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 4029c4 <_malloc_r+0x520>
  40280a:	f8dc 1008 	ldr.w	r1, [ip, #8]
  40280e:	4561      	cmp	r1, ip
  402810:	d07f      	beq.n	402912 <_malloc_r+0x46e>
  402812:	684a      	ldr	r2, [r1, #4]
  402814:	f022 0203 	bic.w	r2, r2, #3
  402818:	4293      	cmp	r3, r2
  40281a:	d202      	bcs.n	402822 <_malloc_r+0x37e>
  40281c:	6889      	ldr	r1, [r1, #8]
  40281e:	458c      	cmp	ip, r1
  402820:	d1f7      	bne.n	402812 <_malloc_r+0x36e>
  402822:	68ca      	ldr	r2, [r1, #12]
  402824:	687b      	ldr	r3, [r7, #4]
  402826:	60e2      	str	r2, [r4, #12]
  402828:	60a1      	str	r1, [r4, #8]
  40282a:	6094      	str	r4, [r2, #8]
  40282c:	60cc      	str	r4, [r1, #12]
  40282e:	e6bb      	b.n	4025a8 <_malloc_r+0x104>
  402830:	1963      	adds	r3, r4, r5
  402832:	f042 0701 	orr.w	r7, r2, #1
  402836:	f045 0501 	orr.w	r5, r5, #1
  40283a:	6065      	str	r5, [r4, #4]
  40283c:	4630      	mov	r0, r6
  40283e:	614b      	str	r3, [r1, #20]
  402840:	610b      	str	r3, [r1, #16]
  402842:	f8c3 e00c 	str.w	lr, [r3, #12]
  402846:	f8c3 e008 	str.w	lr, [r3, #8]
  40284a:	605f      	str	r7, [r3, #4]
  40284c:	509a      	str	r2, [r3, r2]
  40284e:	3408      	adds	r4, #8
  402850:	f000 f90a 	bl	402a68 <__malloc_unlock>
  402854:	e652      	b.n	4024fc <_malloc_r+0x58>
  402856:	684b      	ldr	r3, [r1, #4]
  402858:	e6a6      	b.n	4025a8 <_malloc_r+0x104>
  40285a:	f109 0901 	add.w	r9, r9, #1
  40285e:	f019 0f03 	tst.w	r9, #3
  402862:	f10c 0c08 	add.w	ip, ip, #8
  402866:	f47f aeb1 	bne.w	4025cc <_malloc_r+0x128>
  40286a:	e02c      	b.n	4028c6 <_malloc_r+0x422>
  40286c:	f104 0308 	add.w	r3, r4, #8
  402870:	6964      	ldr	r4, [r4, #20]
  402872:	42a3      	cmp	r3, r4
  402874:	bf08      	it	eq
  402876:	3002      	addeq	r0, #2
  402878:	f43f ae69 	beq.w	40254e <_malloc_r+0xaa>
  40287c:	e62e      	b.n	4024dc <_malloc_r+0x38>
  40287e:	441a      	add	r2, r3
  402880:	461c      	mov	r4, r3
  402882:	6851      	ldr	r1, [r2, #4]
  402884:	68db      	ldr	r3, [r3, #12]
  402886:	f854 5f08 	ldr.w	r5, [r4, #8]!
  40288a:	f041 0101 	orr.w	r1, r1, #1
  40288e:	6051      	str	r1, [r2, #4]
  402890:	4630      	mov	r0, r6
  402892:	60eb      	str	r3, [r5, #12]
  402894:	609d      	str	r5, [r3, #8]
  402896:	f000 f8e7 	bl	402a68 <__malloc_unlock>
  40289a:	e62f      	b.n	4024fc <_malloc_r+0x58>
  40289c:	305b      	adds	r0, #91	; 0x5b
  40289e:	0041      	lsls	r1, r0, #1
  4028a0:	e640      	b.n	402524 <_malloc_r+0x80>
  4028a2:	099a      	lsrs	r2, r3, #6
  4028a4:	3238      	adds	r2, #56	; 0x38
  4028a6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4028aa:	e7aa      	b.n	402802 <_malloc_r+0x35e>
  4028ac:	42bc      	cmp	r4, r7
  4028ae:	4b45      	ldr	r3, [pc, #276]	; (4029c4 <_malloc_r+0x520>)
  4028b0:	f43f af0e 	beq.w	4026d0 <_malloc_r+0x22c>
  4028b4:	689c      	ldr	r4, [r3, #8]
  4028b6:	6862      	ldr	r2, [r4, #4]
  4028b8:	f022 0203 	bic.w	r2, r2, #3
  4028bc:	e768      	b.n	402790 <_malloc_r+0x2ec>
  4028be:	f8d8 8000 	ldr.w	r8, [r8]
  4028c2:	4598      	cmp	r8, r3
  4028c4:	d17c      	bne.n	4029c0 <_malloc_r+0x51c>
  4028c6:	f010 0f03 	tst.w	r0, #3
  4028ca:	f1a8 0308 	sub.w	r3, r8, #8
  4028ce:	f100 30ff 	add.w	r0, r0, #4294967295
  4028d2:	d1f4      	bne.n	4028be <_malloc_r+0x41a>
  4028d4:	687b      	ldr	r3, [r7, #4]
  4028d6:	ea23 0304 	bic.w	r3, r3, r4
  4028da:	607b      	str	r3, [r7, #4]
  4028dc:	0064      	lsls	r4, r4, #1
  4028de:	429c      	cmp	r4, r3
  4028e0:	f63f aeca 	bhi.w	402678 <_malloc_r+0x1d4>
  4028e4:	2c00      	cmp	r4, #0
  4028e6:	f43f aec7 	beq.w	402678 <_malloc_r+0x1d4>
  4028ea:	4223      	tst	r3, r4
  4028ec:	4648      	mov	r0, r9
  4028ee:	f47f ae69 	bne.w	4025c4 <_malloc_r+0x120>
  4028f2:	0064      	lsls	r4, r4, #1
  4028f4:	4223      	tst	r3, r4
  4028f6:	f100 0004 	add.w	r0, r0, #4
  4028fa:	d0fa      	beq.n	4028f2 <_malloc_r+0x44e>
  4028fc:	e662      	b.n	4025c4 <_malloc_r+0x120>
  4028fe:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  402902:	d818      	bhi.n	402936 <_malloc_r+0x492>
  402904:	0be8      	lsrs	r0, r5, #15
  402906:	3077      	adds	r0, #119	; 0x77
  402908:	0041      	lsls	r1, r0, #1
  40290a:	e60b      	b.n	402524 <_malloc_r+0x80>
  40290c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402910:	e6fb      	b.n	40270a <_malloc_r+0x266>
  402912:	f8d8 3004 	ldr.w	r3, [r8, #4]
  402916:	1092      	asrs	r2, r2, #2
  402918:	f04f 0c01 	mov.w	ip, #1
  40291c:	fa0c f202 	lsl.w	r2, ip, r2
  402920:	4313      	orrs	r3, r2
  402922:	f8c8 3004 	str.w	r3, [r8, #4]
  402926:	460a      	mov	r2, r1
  402928:	e77d      	b.n	402826 <_malloc_r+0x382>
  40292a:	2301      	movs	r3, #1
  40292c:	f8c9 3004 	str.w	r3, [r9, #4]
  402930:	464c      	mov	r4, r9
  402932:	2200      	movs	r2, #0
  402934:	e72c      	b.n	402790 <_malloc_r+0x2ec>
  402936:	f240 5354 	movw	r3, #1364	; 0x554
  40293a:	4298      	cmp	r0, r3
  40293c:	d81c      	bhi.n	402978 <_malloc_r+0x4d4>
  40293e:	0ca8      	lsrs	r0, r5, #18
  402940:	307c      	adds	r0, #124	; 0x7c
  402942:	0041      	lsls	r1, r0, #1
  402944:	e5ee      	b.n	402524 <_malloc_r+0x80>
  402946:	3210      	adds	r2, #16
  402948:	e6b4      	b.n	4026b4 <_malloc_r+0x210>
  40294a:	2a54      	cmp	r2, #84	; 0x54
  40294c:	d823      	bhi.n	402996 <_malloc_r+0x4f2>
  40294e:	0b1a      	lsrs	r2, r3, #12
  402950:	326e      	adds	r2, #110	; 0x6e
  402952:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402956:	e754      	b.n	402802 <_malloc_r+0x35e>
  402958:	68bc      	ldr	r4, [r7, #8]
  40295a:	6862      	ldr	r2, [r4, #4]
  40295c:	f022 0203 	bic.w	r2, r2, #3
  402960:	e716      	b.n	402790 <_malloc_r+0x2ec>
  402962:	f3cb 000b 	ubfx	r0, fp, #0, #12
  402966:	2800      	cmp	r0, #0
  402968:	f47f aeb9 	bne.w	4026de <_malloc_r+0x23a>
  40296c:	4442      	add	r2, r8
  40296e:	68bb      	ldr	r3, [r7, #8]
  402970:	f042 0201 	orr.w	r2, r2, #1
  402974:	605a      	str	r2, [r3, #4]
  402976:	e6fd      	b.n	402774 <_malloc_r+0x2d0>
  402978:	21fc      	movs	r1, #252	; 0xfc
  40297a:	207e      	movs	r0, #126	; 0x7e
  40297c:	e5d2      	b.n	402524 <_malloc_r+0x80>
  40297e:	2201      	movs	r2, #1
  402980:	f04f 0a00 	mov.w	sl, #0
  402984:	e6d4      	b.n	402730 <_malloc_r+0x28c>
  402986:	f104 0108 	add.w	r1, r4, #8
  40298a:	4630      	mov	r0, r6
  40298c:	f7ff fc4c 	bl	402228 <_free_r>
  402990:	f8da 1000 	ldr.w	r1, [sl]
  402994:	e6ee      	b.n	402774 <_malloc_r+0x2d0>
  402996:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40299a:	d804      	bhi.n	4029a6 <_malloc_r+0x502>
  40299c:	0bda      	lsrs	r2, r3, #15
  40299e:	3277      	adds	r2, #119	; 0x77
  4029a0:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4029a4:	e72d      	b.n	402802 <_malloc_r+0x35e>
  4029a6:	f240 5154 	movw	r1, #1364	; 0x554
  4029aa:	428a      	cmp	r2, r1
  4029ac:	d804      	bhi.n	4029b8 <_malloc_r+0x514>
  4029ae:	0c9a      	lsrs	r2, r3, #18
  4029b0:	327c      	adds	r2, #124	; 0x7c
  4029b2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4029b6:	e724      	b.n	402802 <_malloc_r+0x35e>
  4029b8:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  4029bc:	227e      	movs	r2, #126	; 0x7e
  4029be:	e720      	b.n	402802 <_malloc_r+0x35e>
  4029c0:	687b      	ldr	r3, [r7, #4]
  4029c2:	e78b      	b.n	4028dc <_malloc_r+0x438>
  4029c4:	20000434 	.word	0x20000434

004029c8 <memset>:
  4029c8:	b470      	push	{r4, r5, r6}
  4029ca:	0784      	lsls	r4, r0, #30
  4029cc:	d046      	beq.n	402a5c <memset+0x94>
  4029ce:	1e54      	subs	r4, r2, #1
  4029d0:	2a00      	cmp	r2, #0
  4029d2:	d041      	beq.n	402a58 <memset+0x90>
  4029d4:	b2cd      	uxtb	r5, r1
  4029d6:	4603      	mov	r3, r0
  4029d8:	e002      	b.n	4029e0 <memset+0x18>
  4029da:	1e62      	subs	r2, r4, #1
  4029dc:	b3e4      	cbz	r4, 402a58 <memset+0x90>
  4029de:	4614      	mov	r4, r2
  4029e0:	f803 5b01 	strb.w	r5, [r3], #1
  4029e4:	079a      	lsls	r2, r3, #30
  4029e6:	d1f8      	bne.n	4029da <memset+0x12>
  4029e8:	2c03      	cmp	r4, #3
  4029ea:	d92e      	bls.n	402a4a <memset+0x82>
  4029ec:	b2cd      	uxtb	r5, r1
  4029ee:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4029f2:	2c0f      	cmp	r4, #15
  4029f4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4029f8:	d919      	bls.n	402a2e <memset+0x66>
  4029fa:	f103 0210 	add.w	r2, r3, #16
  4029fe:	4626      	mov	r6, r4
  402a00:	3e10      	subs	r6, #16
  402a02:	2e0f      	cmp	r6, #15
  402a04:	f842 5c10 	str.w	r5, [r2, #-16]
  402a08:	f842 5c0c 	str.w	r5, [r2, #-12]
  402a0c:	f842 5c08 	str.w	r5, [r2, #-8]
  402a10:	f842 5c04 	str.w	r5, [r2, #-4]
  402a14:	f102 0210 	add.w	r2, r2, #16
  402a18:	d8f2      	bhi.n	402a00 <memset+0x38>
  402a1a:	f1a4 0210 	sub.w	r2, r4, #16
  402a1e:	f022 020f 	bic.w	r2, r2, #15
  402a22:	f004 040f 	and.w	r4, r4, #15
  402a26:	3210      	adds	r2, #16
  402a28:	2c03      	cmp	r4, #3
  402a2a:	4413      	add	r3, r2
  402a2c:	d90d      	bls.n	402a4a <memset+0x82>
  402a2e:	461e      	mov	r6, r3
  402a30:	4622      	mov	r2, r4
  402a32:	3a04      	subs	r2, #4
  402a34:	2a03      	cmp	r2, #3
  402a36:	f846 5b04 	str.w	r5, [r6], #4
  402a3a:	d8fa      	bhi.n	402a32 <memset+0x6a>
  402a3c:	1f22      	subs	r2, r4, #4
  402a3e:	f022 0203 	bic.w	r2, r2, #3
  402a42:	3204      	adds	r2, #4
  402a44:	4413      	add	r3, r2
  402a46:	f004 0403 	and.w	r4, r4, #3
  402a4a:	b12c      	cbz	r4, 402a58 <memset+0x90>
  402a4c:	b2c9      	uxtb	r1, r1
  402a4e:	441c      	add	r4, r3
  402a50:	f803 1b01 	strb.w	r1, [r3], #1
  402a54:	42a3      	cmp	r3, r4
  402a56:	d1fb      	bne.n	402a50 <memset+0x88>
  402a58:	bc70      	pop	{r4, r5, r6}
  402a5a:	4770      	bx	lr
  402a5c:	4614      	mov	r4, r2
  402a5e:	4603      	mov	r3, r0
  402a60:	e7c2      	b.n	4029e8 <memset+0x20>
  402a62:	bf00      	nop

00402a64 <__malloc_lock>:
  402a64:	4770      	bx	lr
  402a66:	bf00      	nop

00402a68 <__malloc_unlock>:
  402a68:	4770      	bx	lr
  402a6a:	bf00      	nop

00402a6c <_sbrk_r>:
  402a6c:	b538      	push	{r3, r4, r5, lr}
  402a6e:	4c07      	ldr	r4, [pc, #28]	; (402a8c <_sbrk_r+0x20>)
  402a70:	2300      	movs	r3, #0
  402a72:	4605      	mov	r5, r0
  402a74:	4608      	mov	r0, r1
  402a76:	6023      	str	r3, [r4, #0]
  402a78:	f7fd ff20 	bl	4008bc <_sbrk>
  402a7c:	1c43      	adds	r3, r0, #1
  402a7e:	d000      	beq.n	402a82 <_sbrk_r+0x16>
  402a80:	bd38      	pop	{r3, r4, r5, pc}
  402a82:	6823      	ldr	r3, [r4, #0]
  402a84:	2b00      	cmp	r3, #0
  402a86:	d0fb      	beq.n	402a80 <_sbrk_r+0x14>
  402a88:	602b      	str	r3, [r5, #0]
  402a8a:	bd38      	pop	{r3, r4, r5, pc}
  402a8c:	20000b5c 	.word	0x20000b5c

00402a90 <setbuf>:
  402a90:	2900      	cmp	r1, #0
  402a92:	bf0c      	ite	eq
  402a94:	2202      	moveq	r2, #2
  402a96:	2200      	movne	r2, #0
  402a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402a9c:	f000 b800 	b.w	402aa0 <setvbuf>

00402aa0 <setvbuf>:
  402aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402aa4:	4c3a      	ldr	r4, [pc, #232]	; (402b90 <setvbuf+0xf0>)
  402aa6:	6826      	ldr	r6, [r4, #0]
  402aa8:	460d      	mov	r5, r1
  402aaa:	4604      	mov	r4, r0
  402aac:	4690      	mov	r8, r2
  402aae:	461f      	mov	r7, r3
  402ab0:	b116      	cbz	r6, 402ab8 <setvbuf+0x18>
  402ab2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  402ab4:	2b00      	cmp	r3, #0
  402ab6:	d03c      	beq.n	402b32 <setvbuf+0x92>
  402ab8:	f1b8 0f02 	cmp.w	r8, #2
  402abc:	d82f      	bhi.n	402b1e <setvbuf+0x7e>
  402abe:	2f00      	cmp	r7, #0
  402ac0:	db2d      	blt.n	402b1e <setvbuf+0x7e>
  402ac2:	4621      	mov	r1, r4
  402ac4:	4630      	mov	r0, r6
  402ac6:	f7ff fab1 	bl	40202c <_fflush_r>
  402aca:	89a1      	ldrh	r1, [r4, #12]
  402acc:	2300      	movs	r3, #0
  402ace:	6063      	str	r3, [r4, #4]
  402ad0:	61a3      	str	r3, [r4, #24]
  402ad2:	060b      	lsls	r3, r1, #24
  402ad4:	d427      	bmi.n	402b26 <setvbuf+0x86>
  402ad6:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  402ada:	b289      	uxth	r1, r1
  402adc:	f1b8 0f02 	cmp.w	r8, #2
  402ae0:	81a1      	strh	r1, [r4, #12]
  402ae2:	d02a      	beq.n	402b3a <setvbuf+0x9a>
  402ae4:	2d00      	cmp	r5, #0
  402ae6:	d036      	beq.n	402b56 <setvbuf+0xb6>
  402ae8:	f1b8 0f01 	cmp.w	r8, #1
  402aec:	d011      	beq.n	402b12 <setvbuf+0x72>
  402aee:	b289      	uxth	r1, r1
  402af0:	f001 0008 	and.w	r0, r1, #8
  402af4:	4b27      	ldr	r3, [pc, #156]	; (402b94 <setvbuf+0xf4>)
  402af6:	63f3      	str	r3, [r6, #60]	; 0x3c
  402af8:	b280      	uxth	r0, r0
  402afa:	6025      	str	r5, [r4, #0]
  402afc:	6125      	str	r5, [r4, #16]
  402afe:	6167      	str	r7, [r4, #20]
  402b00:	b178      	cbz	r0, 402b22 <setvbuf+0x82>
  402b02:	f011 0f03 	tst.w	r1, #3
  402b06:	bf18      	it	ne
  402b08:	2700      	movne	r7, #0
  402b0a:	60a7      	str	r7, [r4, #8]
  402b0c:	2000      	movs	r0, #0
  402b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402b12:	f041 0101 	orr.w	r1, r1, #1
  402b16:	427b      	negs	r3, r7
  402b18:	81a1      	strh	r1, [r4, #12]
  402b1a:	61a3      	str	r3, [r4, #24]
  402b1c:	e7e7      	b.n	402aee <setvbuf+0x4e>
  402b1e:	f04f 30ff 	mov.w	r0, #4294967295
  402b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402b26:	6921      	ldr	r1, [r4, #16]
  402b28:	4630      	mov	r0, r6
  402b2a:	f7ff fb7d 	bl	402228 <_free_r>
  402b2e:	89a1      	ldrh	r1, [r4, #12]
  402b30:	e7d1      	b.n	402ad6 <setvbuf+0x36>
  402b32:	4630      	mov	r0, r6
  402b34:	f7ff fb20 	bl	402178 <__sinit>
  402b38:	e7be      	b.n	402ab8 <setvbuf+0x18>
  402b3a:	2000      	movs	r0, #0
  402b3c:	f104 0343 	add.w	r3, r4, #67	; 0x43
  402b40:	f041 0102 	orr.w	r1, r1, #2
  402b44:	2500      	movs	r5, #0
  402b46:	2201      	movs	r2, #1
  402b48:	81a1      	strh	r1, [r4, #12]
  402b4a:	60a5      	str	r5, [r4, #8]
  402b4c:	6023      	str	r3, [r4, #0]
  402b4e:	6123      	str	r3, [r4, #16]
  402b50:	6162      	str	r2, [r4, #20]
  402b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402b56:	2f00      	cmp	r7, #0
  402b58:	bf08      	it	eq
  402b5a:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  402b5e:	4638      	mov	r0, r7
  402b60:	f001 fa50 	bl	404004 <malloc>
  402b64:	4605      	mov	r5, r0
  402b66:	b128      	cbz	r0, 402b74 <setvbuf+0xd4>
  402b68:	89a1      	ldrh	r1, [r4, #12]
  402b6a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402b6e:	b289      	uxth	r1, r1
  402b70:	81a1      	strh	r1, [r4, #12]
  402b72:	e7b9      	b.n	402ae8 <setvbuf+0x48>
  402b74:	f44f 6080 	mov.w	r0, #1024	; 0x400
  402b78:	f001 fa44 	bl	404004 <malloc>
  402b7c:	4605      	mov	r5, r0
  402b7e:	b918      	cbnz	r0, 402b88 <setvbuf+0xe8>
  402b80:	89a1      	ldrh	r1, [r4, #12]
  402b82:	f04f 30ff 	mov.w	r0, #4294967295
  402b86:	e7d9      	b.n	402b3c <setvbuf+0x9c>
  402b88:	f44f 6780 	mov.w	r7, #1024	; 0x400
  402b8c:	e7ec      	b.n	402b68 <setvbuf+0xc8>
  402b8e:	bf00      	nop
  402b90:	20000430 	.word	0x20000430
  402b94:	0040207d 	.word	0x0040207d

00402b98 <__sread>:
  402b98:	b510      	push	{r4, lr}
  402b9a:	460c      	mov	r4, r1
  402b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402ba0:	f001 fb80 	bl	4042a4 <_read_r>
  402ba4:	2800      	cmp	r0, #0
  402ba6:	db03      	blt.n	402bb0 <__sread+0x18>
  402ba8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  402baa:	4403      	add	r3, r0
  402bac:	6523      	str	r3, [r4, #80]	; 0x50
  402bae:	bd10      	pop	{r4, pc}
  402bb0:	89a3      	ldrh	r3, [r4, #12]
  402bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402bb6:	81a3      	strh	r3, [r4, #12]
  402bb8:	bd10      	pop	{r4, pc}
  402bba:	bf00      	nop

00402bbc <__swrite>:
  402bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402bc0:	4616      	mov	r6, r2
  402bc2:	898a      	ldrh	r2, [r1, #12]
  402bc4:	461d      	mov	r5, r3
  402bc6:	05d3      	lsls	r3, r2, #23
  402bc8:	460c      	mov	r4, r1
  402bca:	4607      	mov	r7, r0
  402bcc:	d506      	bpl.n	402bdc <__swrite+0x20>
  402bce:	2200      	movs	r2, #0
  402bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402bd4:	2302      	movs	r3, #2
  402bd6:	f001 f991 	bl	403efc <_lseek_r>
  402bda:	89a2      	ldrh	r2, [r4, #12]
  402bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402be0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402be4:	81a2      	strh	r2, [r4, #12]
  402be6:	4638      	mov	r0, r7
  402be8:	4632      	mov	r2, r6
  402bea:	462b      	mov	r3, r5
  402bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402bf0:	f000 be94 	b.w	40391c <_write_r>

00402bf4 <__sseek>:
  402bf4:	b510      	push	{r4, lr}
  402bf6:	460c      	mov	r4, r1
  402bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402bfc:	f001 f97e 	bl	403efc <_lseek_r>
  402c00:	89a3      	ldrh	r3, [r4, #12]
  402c02:	1c42      	adds	r2, r0, #1
  402c04:	bf0e      	itee	eq
  402c06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  402c0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  402c0e:	6520      	strne	r0, [r4, #80]	; 0x50
  402c10:	81a3      	strh	r3, [r4, #12]
  402c12:	bd10      	pop	{r4, pc}

00402c14 <__sclose>:
  402c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402c18:	f000 bf06 	b.w	403a28 <_close_r>

00402c1c <__sprint_r.part.0>:
  402c1c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402c1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402c22:	049c      	lsls	r4, r3, #18
  402c24:	460f      	mov	r7, r1
  402c26:	4692      	mov	sl, r2
  402c28:	d52b      	bpl.n	402c82 <__sprint_r.part.0+0x66>
  402c2a:	6893      	ldr	r3, [r2, #8]
  402c2c:	6812      	ldr	r2, [r2, #0]
  402c2e:	b333      	cbz	r3, 402c7e <__sprint_r.part.0+0x62>
  402c30:	4680      	mov	r8, r0
  402c32:	f102 0908 	add.w	r9, r2, #8
  402c36:	e919 0060 	ldmdb	r9, {r5, r6}
  402c3a:	08b6      	lsrs	r6, r6, #2
  402c3c:	d017      	beq.n	402c6e <__sprint_r.part.0+0x52>
  402c3e:	3d04      	subs	r5, #4
  402c40:	2400      	movs	r4, #0
  402c42:	e001      	b.n	402c48 <__sprint_r.part.0+0x2c>
  402c44:	42a6      	cmp	r6, r4
  402c46:	d010      	beq.n	402c6a <__sprint_r.part.0+0x4e>
  402c48:	4640      	mov	r0, r8
  402c4a:	f855 1f04 	ldr.w	r1, [r5, #4]!
  402c4e:	463a      	mov	r2, r7
  402c50:	f000 ffac 	bl	403bac <_fputwc_r>
  402c54:	1c43      	adds	r3, r0, #1
  402c56:	f104 0401 	add.w	r4, r4, #1
  402c5a:	d1f3      	bne.n	402c44 <__sprint_r.part.0+0x28>
  402c5c:	2300      	movs	r3, #0
  402c5e:	f8ca 3008 	str.w	r3, [sl, #8]
  402c62:	f8ca 3004 	str.w	r3, [sl, #4]
  402c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c6a:	f8da 3008 	ldr.w	r3, [sl, #8]
  402c6e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  402c72:	f8ca 3008 	str.w	r3, [sl, #8]
  402c76:	f109 0908 	add.w	r9, r9, #8
  402c7a:	2b00      	cmp	r3, #0
  402c7c:	d1db      	bne.n	402c36 <__sprint_r.part.0+0x1a>
  402c7e:	2000      	movs	r0, #0
  402c80:	e7ec      	b.n	402c5c <__sprint_r.part.0+0x40>
  402c82:	f000 ffa5 	bl	403bd0 <__sfvwrite_r>
  402c86:	2300      	movs	r3, #0
  402c88:	f8ca 3008 	str.w	r3, [sl, #8]
  402c8c:	f8ca 3004 	str.w	r3, [sl, #4]
  402c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402c94 <_vfiprintf_r>:
  402c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c98:	b0ab      	sub	sp, #172	; 0xac
  402c9a:	461c      	mov	r4, r3
  402c9c:	9100      	str	r1, [sp, #0]
  402c9e:	4693      	mov	fp, r2
  402ca0:	9304      	str	r3, [sp, #16]
  402ca2:	9001      	str	r0, [sp, #4]
  402ca4:	b118      	cbz	r0, 402cae <_vfiprintf_r+0x1a>
  402ca6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402ca8:	2b00      	cmp	r3, #0
  402caa:	f000 80e3 	beq.w	402e74 <_vfiprintf_r+0x1e0>
  402cae:	9b00      	ldr	r3, [sp, #0]
  402cb0:	8999      	ldrh	r1, [r3, #12]
  402cb2:	b28a      	uxth	r2, r1
  402cb4:	0490      	lsls	r0, r2, #18
  402cb6:	d408      	bmi.n	402cca <_vfiprintf_r+0x36>
  402cb8:	4618      	mov	r0, r3
  402cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  402cbc:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  402cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402cc4:	8182      	strh	r2, [r0, #12]
  402cc6:	6643      	str	r3, [r0, #100]	; 0x64
  402cc8:	b292      	uxth	r2, r2
  402cca:	0711      	lsls	r1, r2, #28
  402ccc:	f140 80b2 	bpl.w	402e34 <_vfiprintf_r+0x1a0>
  402cd0:	9b00      	ldr	r3, [sp, #0]
  402cd2:	691b      	ldr	r3, [r3, #16]
  402cd4:	2b00      	cmp	r3, #0
  402cd6:	f000 80ad 	beq.w	402e34 <_vfiprintf_r+0x1a0>
  402cda:	f002 021a 	and.w	r2, r2, #26
  402cde:	2a0a      	cmp	r2, #10
  402ce0:	f000 80b4 	beq.w	402e4c <_vfiprintf_r+0x1b8>
  402ce4:	2300      	movs	r3, #0
  402ce6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  402cea:	9309      	str	r3, [sp, #36]	; 0x24
  402cec:	930f      	str	r3, [sp, #60]	; 0x3c
  402cee:	930e      	str	r3, [sp, #56]	; 0x38
  402cf0:	9302      	str	r3, [sp, #8]
  402cf2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  402cf6:	4654      	mov	r4, sl
  402cf8:	f89b 3000 	ldrb.w	r3, [fp]
  402cfc:	2b00      	cmp	r3, #0
  402cfe:	f000 84a3 	beq.w	403648 <_vfiprintf_r+0x9b4>
  402d02:	2b25      	cmp	r3, #37	; 0x25
  402d04:	f000 84a0 	beq.w	403648 <_vfiprintf_r+0x9b4>
  402d08:	465a      	mov	r2, fp
  402d0a:	e001      	b.n	402d10 <_vfiprintf_r+0x7c>
  402d0c:	2b25      	cmp	r3, #37	; 0x25
  402d0e:	d003      	beq.n	402d18 <_vfiprintf_r+0x84>
  402d10:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  402d14:	2b00      	cmp	r3, #0
  402d16:	d1f9      	bne.n	402d0c <_vfiprintf_r+0x78>
  402d18:	ebcb 0602 	rsb	r6, fp, r2
  402d1c:	4615      	mov	r5, r2
  402d1e:	b196      	cbz	r6, 402d46 <_vfiprintf_r+0xb2>
  402d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402d22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402d24:	f8c4 b000 	str.w	fp, [r4]
  402d28:	3301      	adds	r3, #1
  402d2a:	4432      	add	r2, r6
  402d2c:	2b07      	cmp	r3, #7
  402d2e:	6066      	str	r6, [r4, #4]
  402d30:	920f      	str	r2, [sp, #60]	; 0x3c
  402d32:	930e      	str	r3, [sp, #56]	; 0x38
  402d34:	dd79      	ble.n	402e2a <_vfiprintf_r+0x196>
  402d36:	2a00      	cmp	r2, #0
  402d38:	f040 84af 	bne.w	40369a <_vfiprintf_r+0xa06>
  402d3c:	9b02      	ldr	r3, [sp, #8]
  402d3e:	920e      	str	r2, [sp, #56]	; 0x38
  402d40:	4433      	add	r3, r6
  402d42:	4654      	mov	r4, sl
  402d44:	9302      	str	r3, [sp, #8]
  402d46:	782b      	ldrb	r3, [r5, #0]
  402d48:	2b00      	cmp	r3, #0
  402d4a:	f000 8360 	beq.w	40340e <_vfiprintf_r+0x77a>
  402d4e:	2100      	movs	r1, #0
  402d50:	f04f 0300 	mov.w	r3, #0
  402d54:	f04f 3cff 	mov.w	ip, #4294967295
  402d58:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402d5c:	1c68      	adds	r0, r5, #1
  402d5e:	786b      	ldrb	r3, [r5, #1]
  402d60:	4688      	mov	r8, r1
  402d62:	460d      	mov	r5, r1
  402d64:	4666      	mov	r6, ip
  402d66:	f100 0b01 	add.w	fp, r0, #1
  402d6a:	f1a3 0220 	sub.w	r2, r3, #32
  402d6e:	2a58      	cmp	r2, #88	; 0x58
  402d70:	f200 82ab 	bhi.w	4032ca <_vfiprintf_r+0x636>
  402d74:	e8df f012 	tbh	[pc, r2, lsl #1]
  402d78:	02a9029b 	.word	0x02a9029b
  402d7c:	02a302a9 	.word	0x02a302a9
  402d80:	02a902a9 	.word	0x02a902a9
  402d84:	02a902a9 	.word	0x02a902a9
  402d88:	02a902a9 	.word	0x02a902a9
  402d8c:	02620255 	.word	0x02620255
  402d90:	010d02a9 	.word	0x010d02a9
  402d94:	02a9026e 	.word	0x02a9026e
  402d98:	012f0129 	.word	0x012f0129
  402d9c:	012f012f 	.word	0x012f012f
  402da0:	012f012f 	.word	0x012f012f
  402da4:	012f012f 	.word	0x012f012f
  402da8:	012f012f 	.word	0x012f012f
  402dac:	02a902a9 	.word	0x02a902a9
  402db0:	02a902a9 	.word	0x02a902a9
  402db4:	02a902a9 	.word	0x02a902a9
  402db8:	02a902a9 	.word	0x02a902a9
  402dbc:	02a902a9 	.word	0x02a902a9
  402dc0:	02a9013d 	.word	0x02a9013d
  402dc4:	02a902a9 	.word	0x02a902a9
  402dc8:	02a902a9 	.word	0x02a902a9
  402dcc:	02a902a9 	.word	0x02a902a9
  402dd0:	02a902a9 	.word	0x02a902a9
  402dd4:	017402a9 	.word	0x017402a9
  402dd8:	02a902a9 	.word	0x02a902a9
  402ddc:	02a902a9 	.word	0x02a902a9
  402de0:	018b02a9 	.word	0x018b02a9
  402de4:	02a902a9 	.word	0x02a902a9
  402de8:	02a901a3 	.word	0x02a901a3
  402dec:	02a902a9 	.word	0x02a902a9
  402df0:	02a902a9 	.word	0x02a902a9
  402df4:	02a902a9 	.word	0x02a902a9
  402df8:	02a902a9 	.word	0x02a902a9
  402dfc:	01c702a9 	.word	0x01c702a9
  402e00:	02a901da 	.word	0x02a901da
  402e04:	02a902a9 	.word	0x02a902a9
  402e08:	01da0123 	.word	0x01da0123
  402e0c:	02a902a9 	.word	0x02a902a9
  402e10:	02a9024c 	.word	0x02a9024c
  402e14:	0113028a 	.word	0x0113028a
  402e18:	020701f3 	.word	0x020701f3
  402e1c:	020d02a9 	.word	0x020d02a9
  402e20:	008102a9 	.word	0x008102a9
  402e24:	02a902a9 	.word	0x02a902a9
  402e28:	0233      	.short	0x0233
  402e2a:	3408      	adds	r4, #8
  402e2c:	9b02      	ldr	r3, [sp, #8]
  402e2e:	4433      	add	r3, r6
  402e30:	9302      	str	r3, [sp, #8]
  402e32:	e788      	b.n	402d46 <_vfiprintf_r+0xb2>
  402e34:	9801      	ldr	r0, [sp, #4]
  402e36:	9900      	ldr	r1, [sp, #0]
  402e38:	f000 fd84 	bl	403944 <__swsetup_r>
  402e3c:	b9a8      	cbnz	r0, 402e6a <_vfiprintf_r+0x1d6>
  402e3e:	9b00      	ldr	r3, [sp, #0]
  402e40:	899a      	ldrh	r2, [r3, #12]
  402e42:	f002 021a 	and.w	r2, r2, #26
  402e46:	2a0a      	cmp	r2, #10
  402e48:	f47f af4c 	bne.w	402ce4 <_vfiprintf_r+0x50>
  402e4c:	9b00      	ldr	r3, [sp, #0]
  402e4e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  402e52:	2b00      	cmp	r3, #0
  402e54:	f6ff af46 	blt.w	402ce4 <_vfiprintf_r+0x50>
  402e58:	9801      	ldr	r0, [sp, #4]
  402e5a:	9900      	ldr	r1, [sp, #0]
  402e5c:	465a      	mov	r2, fp
  402e5e:	4623      	mov	r3, r4
  402e60:	f000 fd20 	bl	4038a4 <__sbprintf>
  402e64:	b02b      	add	sp, #172	; 0xac
  402e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e6a:	f04f 30ff 	mov.w	r0, #4294967295
  402e6e:	b02b      	add	sp, #172	; 0xac
  402e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e74:	f7ff f980 	bl	402178 <__sinit>
  402e78:	e719      	b.n	402cae <_vfiprintf_r+0x1a>
  402e7a:	f018 0f20 	tst.w	r8, #32
  402e7e:	9503      	str	r5, [sp, #12]
  402e80:	46b4      	mov	ip, r6
  402e82:	f000 810c 	beq.w	40309e <_vfiprintf_r+0x40a>
  402e86:	9b04      	ldr	r3, [sp, #16]
  402e88:	3307      	adds	r3, #7
  402e8a:	f023 0307 	bic.w	r3, r3, #7
  402e8e:	f103 0208 	add.w	r2, r3, #8
  402e92:	e9d3 6700 	ldrd	r6, r7, [r3]
  402e96:	9204      	str	r2, [sp, #16]
  402e98:	2301      	movs	r3, #1
  402e9a:	f04f 0200 	mov.w	r2, #0
  402e9e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402ea2:	46e1      	mov	r9, ip
  402ea4:	2500      	movs	r5, #0
  402ea6:	f1bc 0f00 	cmp.w	ip, #0
  402eaa:	bfa8      	it	ge
  402eac:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  402eb0:	ea56 0207 	orrs.w	r2, r6, r7
  402eb4:	f040 80c4 	bne.w	403040 <_vfiprintf_r+0x3ac>
  402eb8:	f1bc 0f00 	cmp.w	ip, #0
  402ebc:	f000 8381 	beq.w	4035c2 <_vfiprintf_r+0x92e>
  402ec0:	2b01      	cmp	r3, #1
  402ec2:	f000 80c5 	beq.w	403050 <_vfiprintf_r+0x3bc>
  402ec6:	2b02      	cmp	r3, #2
  402ec8:	f000 8387 	beq.w	4035da <_vfiprintf_r+0x946>
  402ecc:	4651      	mov	r1, sl
  402ece:	08f2      	lsrs	r2, r6, #3
  402ed0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402ed4:	08f8      	lsrs	r0, r7, #3
  402ed6:	f006 0307 	and.w	r3, r6, #7
  402eda:	4607      	mov	r7, r0
  402edc:	4616      	mov	r6, r2
  402ede:	3330      	adds	r3, #48	; 0x30
  402ee0:	ea56 0207 	orrs.w	r2, r6, r7
  402ee4:	f801 3d01 	strb.w	r3, [r1, #-1]!
  402ee8:	d1f1      	bne.n	402ece <_vfiprintf_r+0x23a>
  402eea:	f018 0f01 	tst.w	r8, #1
  402eee:	9107      	str	r1, [sp, #28]
  402ef0:	f040 83fc 	bne.w	4036ec <_vfiprintf_r+0xa58>
  402ef4:	ebc1 090a 	rsb	r9, r1, sl
  402ef8:	45e1      	cmp	r9, ip
  402efa:	464e      	mov	r6, r9
  402efc:	bfb8      	it	lt
  402efe:	4666      	movlt	r6, ip
  402f00:	b105      	cbz	r5, 402f04 <_vfiprintf_r+0x270>
  402f02:	3601      	adds	r6, #1
  402f04:	f018 0302 	ands.w	r3, r8, #2
  402f08:	9305      	str	r3, [sp, #20]
  402f0a:	bf18      	it	ne
  402f0c:	3602      	addne	r6, #2
  402f0e:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  402f12:	9306      	str	r3, [sp, #24]
  402f14:	f040 81fa 	bne.w	40330c <_vfiprintf_r+0x678>
  402f18:	9b03      	ldr	r3, [sp, #12]
  402f1a:	1b9d      	subs	r5, r3, r6
  402f1c:	2d00      	cmp	r5, #0
  402f1e:	f340 81f5 	ble.w	40330c <_vfiprintf_r+0x678>
  402f22:	2d10      	cmp	r5, #16
  402f24:	f340 848c 	ble.w	403840 <_vfiprintf_r+0xbac>
  402f28:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  402f2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402f2e:	4fc6      	ldr	r7, [pc, #792]	; (403248 <_vfiprintf_r+0x5b4>)
  402f30:	4620      	mov	r0, r4
  402f32:	2310      	movs	r3, #16
  402f34:	4664      	mov	r4, ip
  402f36:	4671      	mov	r1, lr
  402f38:	4684      	mov	ip, r0
  402f3a:	e007      	b.n	402f4c <_vfiprintf_r+0x2b8>
  402f3c:	f101 0e02 	add.w	lr, r1, #2
  402f40:	f10c 0c08 	add.w	ip, ip, #8
  402f44:	4601      	mov	r1, r0
  402f46:	3d10      	subs	r5, #16
  402f48:	2d10      	cmp	r5, #16
  402f4a:	dd13      	ble.n	402f74 <_vfiprintf_r+0x2e0>
  402f4c:	1c48      	adds	r0, r1, #1
  402f4e:	3210      	adds	r2, #16
  402f50:	2807      	cmp	r0, #7
  402f52:	920f      	str	r2, [sp, #60]	; 0x3c
  402f54:	f8cc 7000 	str.w	r7, [ip]
  402f58:	f8cc 3004 	str.w	r3, [ip, #4]
  402f5c:	900e      	str	r0, [sp, #56]	; 0x38
  402f5e:	dded      	ble.n	402f3c <_vfiprintf_r+0x2a8>
  402f60:	2a00      	cmp	r2, #0
  402f62:	f040 81c3 	bne.w	4032ec <_vfiprintf_r+0x658>
  402f66:	3d10      	subs	r5, #16
  402f68:	2d10      	cmp	r5, #16
  402f6a:	4611      	mov	r1, r2
  402f6c:	f04f 0e01 	mov.w	lr, #1
  402f70:	46d4      	mov	ip, sl
  402f72:	dceb      	bgt.n	402f4c <_vfiprintf_r+0x2b8>
  402f74:	4663      	mov	r3, ip
  402f76:	4671      	mov	r1, lr
  402f78:	46a4      	mov	ip, r4
  402f7a:	461c      	mov	r4, r3
  402f7c:	442a      	add	r2, r5
  402f7e:	2907      	cmp	r1, #7
  402f80:	920f      	str	r2, [sp, #60]	; 0x3c
  402f82:	6027      	str	r7, [r4, #0]
  402f84:	6065      	str	r5, [r4, #4]
  402f86:	910e      	str	r1, [sp, #56]	; 0x38
  402f88:	f300 8346 	bgt.w	403618 <_vfiprintf_r+0x984>
  402f8c:	3408      	adds	r4, #8
  402f8e:	1c48      	adds	r0, r1, #1
  402f90:	e1bf      	b.n	403312 <_vfiprintf_r+0x67e>
  402f92:	4658      	mov	r0, fp
  402f94:	f048 0804 	orr.w	r8, r8, #4
  402f98:	f89b 3000 	ldrb.w	r3, [fp]
  402f9c:	e6e3      	b.n	402d66 <_vfiprintf_r+0xd2>
  402f9e:	f018 0320 	ands.w	r3, r8, #32
  402fa2:	9503      	str	r5, [sp, #12]
  402fa4:	46b4      	mov	ip, r6
  402fa6:	d062      	beq.n	40306e <_vfiprintf_r+0x3da>
  402fa8:	9b04      	ldr	r3, [sp, #16]
  402faa:	3307      	adds	r3, #7
  402fac:	f023 0307 	bic.w	r3, r3, #7
  402fb0:	f103 0208 	add.w	r2, r3, #8
  402fb4:	e9d3 6700 	ldrd	r6, r7, [r3]
  402fb8:	9204      	str	r2, [sp, #16]
  402fba:	2300      	movs	r3, #0
  402fbc:	e76d      	b.n	402e9a <_vfiprintf_r+0x206>
  402fbe:	f048 0840 	orr.w	r8, r8, #64	; 0x40
  402fc2:	f89b 3000 	ldrb.w	r3, [fp]
  402fc6:	4658      	mov	r0, fp
  402fc8:	e6cd      	b.n	402d66 <_vfiprintf_r+0xd2>
  402fca:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  402fce:	f89b 3000 	ldrb.w	r3, [fp]
  402fd2:	4658      	mov	r0, fp
  402fd4:	e6c7      	b.n	402d66 <_vfiprintf_r+0xd2>
  402fd6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402fda:	2500      	movs	r5, #0
  402fdc:	f81b 3b01 	ldrb.w	r3, [fp], #1
  402fe0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402fe4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  402fe8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402fec:	2a09      	cmp	r2, #9
  402fee:	d9f5      	bls.n	402fdc <_vfiprintf_r+0x348>
  402ff0:	e6bb      	b.n	402d6a <_vfiprintf_r+0xd6>
  402ff2:	f048 0810 	orr.w	r8, r8, #16
  402ff6:	f018 0f20 	tst.w	r8, #32
  402ffa:	9503      	str	r5, [sp, #12]
  402ffc:	46b4      	mov	ip, r6
  402ffe:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  403002:	f000 809b 	beq.w	40313c <_vfiprintf_r+0x4a8>
  403006:	9904      	ldr	r1, [sp, #16]
  403008:	3107      	adds	r1, #7
  40300a:	f021 0107 	bic.w	r1, r1, #7
  40300e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403012:	3108      	adds	r1, #8
  403014:	9104      	str	r1, [sp, #16]
  403016:	4616      	mov	r6, r2
  403018:	461f      	mov	r7, r3
  40301a:	2a00      	cmp	r2, #0
  40301c:	f173 0300 	sbcs.w	r3, r3, #0
  403020:	f2c0 83a6 	blt.w	403770 <_vfiprintf_r+0xadc>
  403024:	f1bc 0f00 	cmp.w	ip, #0
  403028:	bfa8      	it	ge
  40302a:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  40302e:	ea56 0207 	orrs.w	r2, r6, r7
  403032:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  403036:	46e1      	mov	r9, ip
  403038:	f04f 0301 	mov.w	r3, #1
  40303c:	f43f af3c 	beq.w	402eb8 <_vfiprintf_r+0x224>
  403040:	2b01      	cmp	r3, #1
  403042:	f47f af40 	bne.w	402ec6 <_vfiprintf_r+0x232>
  403046:	2f00      	cmp	r7, #0
  403048:	bf08      	it	eq
  40304a:	2e0a      	cmpeq	r6, #10
  40304c:	f080 8334 	bcs.w	4036b8 <_vfiprintf_r+0xa24>
  403050:	ab2a      	add	r3, sp, #168	; 0xa8
  403052:	3630      	adds	r6, #48	; 0x30
  403054:	f803 6d41 	strb.w	r6, [r3, #-65]!
  403058:	ebc3 090a 	rsb	r9, r3, sl
  40305c:	9307      	str	r3, [sp, #28]
  40305e:	e74b      	b.n	402ef8 <_vfiprintf_r+0x264>
  403060:	f048 0810 	orr.w	r8, r8, #16
  403064:	f018 0320 	ands.w	r3, r8, #32
  403068:	9503      	str	r5, [sp, #12]
  40306a:	46b4      	mov	ip, r6
  40306c:	d19c      	bne.n	402fa8 <_vfiprintf_r+0x314>
  40306e:	f018 0210 	ands.w	r2, r8, #16
  403072:	f040 82f7 	bne.w	403664 <_vfiprintf_r+0x9d0>
  403076:	f018 0340 	ands.w	r3, r8, #64	; 0x40
  40307a:	f000 82f3 	beq.w	403664 <_vfiprintf_r+0x9d0>
  40307e:	9904      	ldr	r1, [sp, #16]
  403080:	4613      	mov	r3, r2
  403082:	460a      	mov	r2, r1
  403084:	3204      	adds	r2, #4
  403086:	880e      	ldrh	r6, [r1, #0]
  403088:	9204      	str	r2, [sp, #16]
  40308a:	2700      	movs	r7, #0
  40308c:	e705      	b.n	402e9a <_vfiprintf_r+0x206>
  40308e:	f048 0810 	orr.w	r8, r8, #16
  403092:	f018 0f20 	tst.w	r8, #32
  403096:	9503      	str	r5, [sp, #12]
  403098:	46b4      	mov	ip, r6
  40309a:	f47f aef4 	bne.w	402e86 <_vfiprintf_r+0x1f2>
  40309e:	9a04      	ldr	r2, [sp, #16]
  4030a0:	f018 0f10 	tst.w	r8, #16
  4030a4:	4613      	mov	r3, r2
  4030a6:	f040 82e4 	bne.w	403672 <_vfiprintf_r+0x9de>
  4030aa:	f018 0f40 	tst.w	r8, #64	; 0x40
  4030ae:	f000 82e0 	beq.w	403672 <_vfiprintf_r+0x9de>
  4030b2:	8816      	ldrh	r6, [r2, #0]
  4030b4:	3204      	adds	r2, #4
  4030b6:	2700      	movs	r7, #0
  4030b8:	2301      	movs	r3, #1
  4030ba:	9204      	str	r2, [sp, #16]
  4030bc:	e6ed      	b.n	402e9a <_vfiprintf_r+0x206>
  4030be:	4a63      	ldr	r2, [pc, #396]	; (40324c <_vfiprintf_r+0x5b8>)
  4030c0:	9503      	str	r5, [sp, #12]
  4030c2:	f018 0f20 	tst.w	r8, #32
  4030c6:	46b4      	mov	ip, r6
  4030c8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4030cc:	9209      	str	r2, [sp, #36]	; 0x24
  4030ce:	f000 8090 	beq.w	4031f2 <_vfiprintf_r+0x55e>
  4030d2:	9a04      	ldr	r2, [sp, #16]
  4030d4:	3207      	adds	r2, #7
  4030d6:	f022 0207 	bic.w	r2, r2, #7
  4030da:	e9d2 6700 	ldrd	r6, r7, [r2]
  4030de:	f102 0108 	add.w	r1, r2, #8
  4030e2:	9104      	str	r1, [sp, #16]
  4030e4:	f018 0f01 	tst.w	r8, #1
  4030e8:	f000 8290 	beq.w	40360c <_vfiprintf_r+0x978>
  4030ec:	ea56 0207 	orrs.w	r2, r6, r7
  4030f0:	f000 828c 	beq.w	40360c <_vfiprintf_r+0x978>
  4030f4:	2230      	movs	r2, #48	; 0x30
  4030f6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  4030fa:	f048 0802 	orr.w	r8, r8, #2
  4030fe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  403102:	2302      	movs	r3, #2
  403104:	e6c9      	b.n	402e9a <_vfiprintf_r+0x206>
  403106:	9a04      	ldr	r2, [sp, #16]
  403108:	9503      	str	r5, [sp, #12]
  40310a:	6813      	ldr	r3, [r2, #0]
  40310c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  403110:	4613      	mov	r3, r2
  403112:	3304      	adds	r3, #4
  403114:	2601      	movs	r6, #1
  403116:	f04f 0100 	mov.w	r1, #0
  40311a:	9304      	str	r3, [sp, #16]
  40311c:	ab10      	add	r3, sp, #64	; 0x40
  40311e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  403122:	46b1      	mov	r9, r6
  403124:	9307      	str	r3, [sp, #28]
  403126:	f04f 0c00 	mov.w	ip, #0
  40312a:	e6eb      	b.n	402f04 <_vfiprintf_r+0x270>
  40312c:	f018 0f20 	tst.w	r8, #32
  403130:	9503      	str	r5, [sp, #12]
  403132:	46b4      	mov	ip, r6
  403134:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  403138:	f47f af65 	bne.w	403006 <_vfiprintf_r+0x372>
  40313c:	f018 0f10 	tst.w	r8, #16
  403140:	f040 82a2 	bne.w	403688 <_vfiprintf_r+0x9f4>
  403144:	f018 0f40 	tst.w	r8, #64	; 0x40
  403148:	f000 829e 	beq.w	403688 <_vfiprintf_r+0x9f4>
  40314c:	9904      	ldr	r1, [sp, #16]
  40314e:	f9b1 6000 	ldrsh.w	r6, [r1]
  403152:	3104      	adds	r1, #4
  403154:	17f7      	asrs	r7, r6, #31
  403156:	4632      	mov	r2, r6
  403158:	463b      	mov	r3, r7
  40315a:	9104      	str	r1, [sp, #16]
  40315c:	e75d      	b.n	40301a <_vfiprintf_r+0x386>
  40315e:	9904      	ldr	r1, [sp, #16]
  403160:	9503      	str	r5, [sp, #12]
  403162:	2330      	movs	r3, #48	; 0x30
  403164:	460a      	mov	r2, r1
  403166:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  40316a:	2378      	movs	r3, #120	; 0x78
  40316c:	3204      	adds	r2, #4
  40316e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  403172:	4b37      	ldr	r3, [pc, #220]	; (403250 <_vfiprintf_r+0x5bc>)
  403174:	9309      	str	r3, [sp, #36]	; 0x24
  403176:	46b4      	mov	ip, r6
  403178:	f048 0802 	orr.w	r8, r8, #2
  40317c:	680e      	ldr	r6, [r1, #0]
  40317e:	9204      	str	r2, [sp, #16]
  403180:	2700      	movs	r7, #0
  403182:	2302      	movs	r3, #2
  403184:	e689      	b.n	402e9a <_vfiprintf_r+0x206>
  403186:	f048 0820 	orr.w	r8, r8, #32
  40318a:	f89b 3000 	ldrb.w	r3, [fp]
  40318e:	4658      	mov	r0, fp
  403190:	e5e9      	b.n	402d66 <_vfiprintf_r+0xd2>
  403192:	9a04      	ldr	r2, [sp, #16]
  403194:	9503      	str	r5, [sp, #12]
  403196:	6813      	ldr	r3, [r2, #0]
  403198:	9307      	str	r3, [sp, #28]
  40319a:	f04f 0100 	mov.w	r1, #0
  40319e:	46b4      	mov	ip, r6
  4031a0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4031a4:	1d16      	adds	r6, r2, #4
  4031a6:	2b00      	cmp	r3, #0
  4031a8:	f000 8350 	beq.w	40384c <_vfiprintf_r+0xbb8>
  4031ac:	f1bc 0f00 	cmp.w	ip, #0
  4031b0:	f2c0 832a 	blt.w	403808 <_vfiprintf_r+0xb74>
  4031b4:	9d07      	ldr	r5, [sp, #28]
  4031b6:	f8cd c010 	str.w	ip, [sp, #16]
  4031ba:	4662      	mov	r2, ip
  4031bc:	4628      	mov	r0, r5
  4031be:	2100      	movs	r1, #0
  4031c0:	f000 ff28 	bl	404014 <memchr>
  4031c4:	f8dd c010 	ldr.w	ip, [sp, #16]
  4031c8:	2800      	cmp	r0, #0
  4031ca:	f000 8350 	beq.w	40386e <_vfiprintf_r+0xbda>
  4031ce:	ebc5 0900 	rsb	r9, r5, r0
  4031d2:	9604      	str	r6, [sp, #16]
  4031d4:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  4031d8:	f04f 0c00 	mov.w	ip, #0
  4031dc:	e68c      	b.n	402ef8 <_vfiprintf_r+0x264>
  4031de:	4a1c      	ldr	r2, [pc, #112]	; (403250 <_vfiprintf_r+0x5bc>)
  4031e0:	9503      	str	r5, [sp, #12]
  4031e2:	f018 0f20 	tst.w	r8, #32
  4031e6:	46b4      	mov	ip, r6
  4031e8:	9209      	str	r2, [sp, #36]	; 0x24
  4031ea:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4031ee:	f47f af70 	bne.w	4030d2 <_vfiprintf_r+0x43e>
  4031f2:	9904      	ldr	r1, [sp, #16]
  4031f4:	f018 0f10 	tst.w	r8, #16
  4031f8:	460a      	mov	r2, r1
  4031fa:	f040 8240 	bne.w	40367e <_vfiprintf_r+0x9ea>
  4031fe:	f018 0f40 	tst.w	r8, #64	; 0x40
  403202:	f000 823c 	beq.w	40367e <_vfiprintf_r+0x9ea>
  403206:	3204      	adds	r2, #4
  403208:	880e      	ldrh	r6, [r1, #0]
  40320a:	9204      	str	r2, [sp, #16]
  40320c:	2700      	movs	r7, #0
  40320e:	e769      	b.n	4030e4 <_vfiprintf_r+0x450>
  403210:	f89b 3000 	ldrb.w	r3, [fp]
  403214:	2b6c      	cmp	r3, #108	; 0x6c
  403216:	f000 82ea 	beq.w	4037ee <_vfiprintf_r+0xb5a>
  40321a:	f048 0810 	orr.w	r8, r8, #16
  40321e:	4658      	mov	r0, fp
  403220:	e5a1      	b.n	402d66 <_vfiprintf_r+0xd2>
  403222:	9a04      	ldr	r2, [sp, #16]
  403224:	6815      	ldr	r5, [r2, #0]
  403226:	4613      	mov	r3, r2
  403228:	2d00      	cmp	r5, #0
  40322a:	f103 0304 	add.w	r3, r3, #4
  40322e:	f2c0 82e6 	blt.w	4037fe <_vfiprintf_r+0xb6a>
  403232:	9304      	str	r3, [sp, #16]
  403234:	f89b 3000 	ldrb.w	r3, [fp]
  403238:	4658      	mov	r0, fp
  40323a:	e594      	b.n	402d66 <_vfiprintf_r+0xd2>
  40323c:	f89b 3000 	ldrb.w	r3, [fp]
  403240:	4658      	mov	r0, fp
  403242:	212b      	movs	r1, #43	; 0x2b
  403244:	e58f      	b.n	402d66 <_vfiprintf_r+0xd2>
  403246:	bf00      	nop
  403248:	00405130 	.word	0x00405130
  40324c:	00405100 	.word	0x00405100
  403250:	00405114 	.word	0x00405114
  403254:	f89b 3000 	ldrb.w	r3, [fp]
  403258:	2b2a      	cmp	r3, #42	; 0x2a
  40325a:	f10b 0001 	add.w	r0, fp, #1
  40325e:	f000 830f 	beq.w	403880 <_vfiprintf_r+0xbec>
  403262:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403266:	2a09      	cmp	r2, #9
  403268:	4683      	mov	fp, r0
  40326a:	f04f 0600 	mov.w	r6, #0
  40326e:	f63f ad7c 	bhi.w	402d6a <_vfiprintf_r+0xd6>
  403272:	f81b 3b01 	ldrb.w	r3, [fp], #1
  403276:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40327a:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  40327e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403282:	2a09      	cmp	r2, #9
  403284:	d9f5      	bls.n	403272 <_vfiprintf_r+0x5de>
  403286:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  40328a:	e56e      	b.n	402d6a <_vfiprintf_r+0xd6>
  40328c:	f018 0f20 	tst.w	r8, #32
  403290:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  403294:	f000 8283 	beq.w	40379e <_vfiprintf_r+0xb0a>
  403298:	9a04      	ldr	r2, [sp, #16]
  40329a:	9902      	ldr	r1, [sp, #8]
  40329c:	6813      	ldr	r3, [r2, #0]
  40329e:	17cf      	asrs	r7, r1, #31
  4032a0:	4608      	mov	r0, r1
  4032a2:	3204      	adds	r2, #4
  4032a4:	4639      	mov	r1, r7
  4032a6:	9204      	str	r2, [sp, #16]
  4032a8:	e9c3 0100 	strd	r0, r1, [r3]
  4032ac:	e524      	b.n	402cf8 <_vfiprintf_r+0x64>
  4032ae:	4658      	mov	r0, fp
  4032b0:	f89b 3000 	ldrb.w	r3, [fp]
  4032b4:	2900      	cmp	r1, #0
  4032b6:	f47f ad56 	bne.w	402d66 <_vfiprintf_r+0xd2>
  4032ba:	2120      	movs	r1, #32
  4032bc:	e553      	b.n	402d66 <_vfiprintf_r+0xd2>
  4032be:	f048 0801 	orr.w	r8, r8, #1
  4032c2:	4658      	mov	r0, fp
  4032c4:	f89b 3000 	ldrb.w	r3, [fp]
  4032c8:	e54d      	b.n	402d66 <_vfiprintf_r+0xd2>
  4032ca:	9503      	str	r5, [sp, #12]
  4032cc:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4032d0:	2b00      	cmp	r3, #0
  4032d2:	f000 809c 	beq.w	40340e <_vfiprintf_r+0x77a>
  4032d6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  4032da:	f04f 0300 	mov.w	r3, #0
  4032de:	2601      	movs	r6, #1
  4032e0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4032e4:	ab10      	add	r3, sp, #64	; 0x40
  4032e6:	46b1      	mov	r9, r6
  4032e8:	9307      	str	r3, [sp, #28]
  4032ea:	e71c      	b.n	403126 <_vfiprintf_r+0x492>
  4032ec:	9801      	ldr	r0, [sp, #4]
  4032ee:	9900      	ldr	r1, [sp, #0]
  4032f0:	9308      	str	r3, [sp, #32]
  4032f2:	aa0d      	add	r2, sp, #52	; 0x34
  4032f4:	f7ff fc92 	bl	402c1c <__sprint_r.part.0>
  4032f8:	2800      	cmp	r0, #0
  4032fa:	f040 808f 	bne.w	40341c <_vfiprintf_r+0x788>
  4032fe:	990e      	ldr	r1, [sp, #56]	; 0x38
  403300:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403302:	9b08      	ldr	r3, [sp, #32]
  403304:	f101 0e01 	add.w	lr, r1, #1
  403308:	46d4      	mov	ip, sl
  40330a:	e61c      	b.n	402f46 <_vfiprintf_r+0x2b2>
  40330c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40330e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403310:	1c48      	adds	r0, r1, #1
  403312:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  403316:	b16b      	cbz	r3, 403334 <_vfiprintf_r+0x6a0>
  403318:	3201      	adds	r2, #1
  40331a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
  40331e:	2101      	movs	r1, #1
  403320:	2807      	cmp	r0, #7
  403322:	920f      	str	r2, [sp, #60]	; 0x3c
  403324:	900e      	str	r0, [sp, #56]	; 0x38
  403326:	6023      	str	r3, [r4, #0]
  403328:	6061      	str	r1, [r4, #4]
  40332a:	f300 8134 	bgt.w	403596 <_vfiprintf_r+0x902>
  40332e:	4601      	mov	r1, r0
  403330:	3408      	adds	r4, #8
  403332:	3001      	adds	r0, #1
  403334:	9b05      	ldr	r3, [sp, #20]
  403336:	b163      	cbz	r3, 403352 <_vfiprintf_r+0x6be>
  403338:	3202      	adds	r2, #2
  40333a:	a90c      	add	r1, sp, #48	; 0x30
  40333c:	2302      	movs	r3, #2
  40333e:	2807      	cmp	r0, #7
  403340:	920f      	str	r2, [sp, #60]	; 0x3c
  403342:	900e      	str	r0, [sp, #56]	; 0x38
  403344:	e884 000a 	stmia.w	r4, {r1, r3}
  403348:	f300 8134 	bgt.w	4035b4 <_vfiprintf_r+0x920>
  40334c:	4601      	mov	r1, r0
  40334e:	3408      	adds	r4, #8
  403350:	3001      	adds	r0, #1
  403352:	9b06      	ldr	r3, [sp, #24]
  403354:	2b80      	cmp	r3, #128	; 0x80
  403356:	f000 80d4 	beq.w	403502 <_vfiprintf_r+0x86e>
  40335a:	ebc9 070c 	rsb	r7, r9, ip
  40335e:	2f00      	cmp	r7, #0
  403360:	dd2b      	ble.n	4033ba <_vfiprintf_r+0x726>
  403362:	2f10      	cmp	r7, #16
  403364:	4daa      	ldr	r5, [pc, #680]	; (403610 <_vfiprintf_r+0x97c>)
  403366:	dd1f      	ble.n	4033a8 <_vfiprintf_r+0x714>
  403368:	46a6      	mov	lr, r4
  40336a:	2310      	movs	r3, #16
  40336c:	9c01      	ldr	r4, [sp, #4]
  40336e:	e007      	b.n	403380 <_vfiprintf_r+0x6ec>
  403370:	f101 0c02 	add.w	ip, r1, #2
  403374:	f10e 0e08 	add.w	lr, lr, #8
  403378:	4601      	mov	r1, r0
  40337a:	3f10      	subs	r7, #16
  40337c:	2f10      	cmp	r7, #16
  40337e:	dd11      	ble.n	4033a4 <_vfiprintf_r+0x710>
  403380:	1c48      	adds	r0, r1, #1
  403382:	3210      	adds	r2, #16
  403384:	2807      	cmp	r0, #7
  403386:	920f      	str	r2, [sp, #60]	; 0x3c
  403388:	f8ce 5000 	str.w	r5, [lr]
  40338c:	f8ce 3004 	str.w	r3, [lr, #4]
  403390:	900e      	str	r0, [sp, #56]	; 0x38
  403392:	dded      	ble.n	403370 <_vfiprintf_r+0x6dc>
  403394:	bb6a      	cbnz	r2, 4033f2 <_vfiprintf_r+0x75e>
  403396:	3f10      	subs	r7, #16
  403398:	2f10      	cmp	r7, #16
  40339a:	f04f 0c01 	mov.w	ip, #1
  40339e:	4611      	mov	r1, r2
  4033a0:	46d6      	mov	lr, sl
  4033a2:	dced      	bgt.n	403380 <_vfiprintf_r+0x6ec>
  4033a4:	4674      	mov	r4, lr
  4033a6:	4660      	mov	r0, ip
  4033a8:	443a      	add	r2, r7
  4033aa:	2807      	cmp	r0, #7
  4033ac:	920f      	str	r2, [sp, #60]	; 0x3c
  4033ae:	e884 00a0 	stmia.w	r4, {r5, r7}
  4033b2:	900e      	str	r0, [sp, #56]	; 0x38
  4033b4:	dc3b      	bgt.n	40342e <_vfiprintf_r+0x79a>
  4033b6:	3408      	adds	r4, #8
  4033b8:	3001      	adds	r0, #1
  4033ba:	eb02 0309 	add.w	r3, r2, r9
  4033be:	9a07      	ldr	r2, [sp, #28]
  4033c0:	930f      	str	r3, [sp, #60]	; 0x3c
  4033c2:	2807      	cmp	r0, #7
  4033c4:	e884 0204 	stmia.w	r4, {r2, r9}
  4033c8:	900e      	str	r0, [sp, #56]	; 0x38
  4033ca:	dd3d      	ble.n	403448 <_vfiprintf_r+0x7b4>
  4033cc:	2b00      	cmp	r3, #0
  4033ce:	f040 813e 	bne.w	40364e <_vfiprintf_r+0x9ba>
  4033d2:	f018 0f04 	tst.w	r8, #4
  4033d6:	930e      	str	r3, [sp, #56]	; 0x38
  4033d8:	f040 812f 	bne.w	40363a <_vfiprintf_r+0x9a6>
  4033dc:	9b02      	ldr	r3, [sp, #8]
  4033de:	9a03      	ldr	r2, [sp, #12]
  4033e0:	4296      	cmp	r6, r2
  4033e2:	bfac      	ite	ge
  4033e4:	199b      	addge	r3, r3, r6
  4033e6:	189b      	addlt	r3, r3, r2
  4033e8:	9302      	str	r3, [sp, #8]
  4033ea:	2300      	movs	r3, #0
  4033ec:	930e      	str	r3, [sp, #56]	; 0x38
  4033ee:	4654      	mov	r4, sl
  4033f0:	e482      	b.n	402cf8 <_vfiprintf_r+0x64>
  4033f2:	4620      	mov	r0, r4
  4033f4:	9900      	ldr	r1, [sp, #0]
  4033f6:	9305      	str	r3, [sp, #20]
  4033f8:	aa0d      	add	r2, sp, #52	; 0x34
  4033fa:	f7ff fc0f 	bl	402c1c <__sprint_r.part.0>
  4033fe:	b968      	cbnz	r0, 40341c <_vfiprintf_r+0x788>
  403400:	990e      	ldr	r1, [sp, #56]	; 0x38
  403402:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403404:	9b05      	ldr	r3, [sp, #20]
  403406:	f101 0c01 	add.w	ip, r1, #1
  40340a:	46d6      	mov	lr, sl
  40340c:	e7b5      	b.n	40337a <_vfiprintf_r+0x6e6>
  40340e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403410:	b123      	cbz	r3, 40341c <_vfiprintf_r+0x788>
  403412:	9801      	ldr	r0, [sp, #4]
  403414:	9900      	ldr	r1, [sp, #0]
  403416:	aa0d      	add	r2, sp, #52	; 0x34
  403418:	f7ff fc00 	bl	402c1c <__sprint_r.part.0>
  40341c:	9b00      	ldr	r3, [sp, #0]
  40341e:	899b      	ldrh	r3, [r3, #12]
  403420:	065b      	lsls	r3, r3, #25
  403422:	f53f ad22 	bmi.w	402e6a <_vfiprintf_r+0x1d6>
  403426:	9802      	ldr	r0, [sp, #8]
  403428:	b02b      	add	sp, #172	; 0xac
  40342a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40342e:	2a00      	cmp	r2, #0
  403430:	f040 8191 	bne.w	403756 <_vfiprintf_r+0xac2>
  403434:	2201      	movs	r2, #1
  403436:	9907      	ldr	r1, [sp, #28]
  403438:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  40343c:	464b      	mov	r3, r9
  40343e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  403442:	911a      	str	r1, [sp, #104]	; 0x68
  403444:	920e      	str	r2, [sp, #56]	; 0x38
  403446:	4654      	mov	r4, sl
  403448:	f104 0208 	add.w	r2, r4, #8
  40344c:	f018 0f04 	tst.w	r8, #4
  403450:	d039      	beq.n	4034c6 <_vfiprintf_r+0x832>
  403452:	9903      	ldr	r1, [sp, #12]
  403454:	1b8d      	subs	r5, r1, r6
  403456:	2d00      	cmp	r5, #0
  403458:	dd35      	ble.n	4034c6 <_vfiprintf_r+0x832>
  40345a:	2d10      	cmp	r5, #16
  40345c:	f340 8202 	ble.w	403864 <_vfiprintf_r+0xbd0>
  403460:	980e      	ldr	r0, [sp, #56]	; 0x38
  403462:	4f6c      	ldr	r7, [pc, #432]	; (403614 <_vfiprintf_r+0x980>)
  403464:	f8dd 8004 	ldr.w	r8, [sp, #4]
  403468:	f8dd 9000 	ldr.w	r9, [sp]
  40346c:	2410      	movs	r4, #16
  40346e:	e006      	b.n	40347e <_vfiprintf_r+0x7ea>
  403470:	f100 0e02 	add.w	lr, r0, #2
  403474:	3208      	adds	r2, #8
  403476:	4608      	mov	r0, r1
  403478:	3d10      	subs	r5, #16
  40347a:	2d10      	cmp	r5, #16
  40347c:	dd10      	ble.n	4034a0 <_vfiprintf_r+0x80c>
  40347e:	1c41      	adds	r1, r0, #1
  403480:	3310      	adds	r3, #16
  403482:	2907      	cmp	r1, #7
  403484:	930f      	str	r3, [sp, #60]	; 0x3c
  403486:	6017      	str	r7, [r2, #0]
  403488:	6054      	str	r4, [r2, #4]
  40348a:	910e      	str	r1, [sp, #56]	; 0x38
  40348c:	ddf0      	ble.n	403470 <_vfiprintf_r+0x7dc>
  40348e:	2b00      	cmp	r3, #0
  403490:	d12a      	bne.n	4034e8 <_vfiprintf_r+0x854>
  403492:	3d10      	subs	r5, #16
  403494:	2d10      	cmp	r5, #16
  403496:	f04f 0e01 	mov.w	lr, #1
  40349a:	4618      	mov	r0, r3
  40349c:	4652      	mov	r2, sl
  40349e:	dcee      	bgt.n	40347e <_vfiprintf_r+0x7ea>
  4034a0:	442b      	add	r3, r5
  4034a2:	f1be 0f07 	cmp.w	lr, #7
  4034a6:	930f      	str	r3, [sp, #60]	; 0x3c
  4034a8:	6017      	str	r7, [r2, #0]
  4034aa:	6055      	str	r5, [r2, #4]
  4034ac:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4034b0:	dd09      	ble.n	4034c6 <_vfiprintf_r+0x832>
  4034b2:	2b00      	cmp	r3, #0
  4034b4:	d092      	beq.n	4033dc <_vfiprintf_r+0x748>
  4034b6:	9801      	ldr	r0, [sp, #4]
  4034b8:	9900      	ldr	r1, [sp, #0]
  4034ba:	aa0d      	add	r2, sp, #52	; 0x34
  4034bc:	f7ff fbae 	bl	402c1c <__sprint_r.part.0>
  4034c0:	2800      	cmp	r0, #0
  4034c2:	d1ab      	bne.n	40341c <_vfiprintf_r+0x788>
  4034c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4034c6:	9a02      	ldr	r2, [sp, #8]
  4034c8:	9903      	ldr	r1, [sp, #12]
  4034ca:	428e      	cmp	r6, r1
  4034cc:	bfac      	ite	ge
  4034ce:	1992      	addge	r2, r2, r6
  4034d0:	1852      	addlt	r2, r2, r1
  4034d2:	9202      	str	r2, [sp, #8]
  4034d4:	2b00      	cmp	r3, #0
  4034d6:	d088      	beq.n	4033ea <_vfiprintf_r+0x756>
  4034d8:	9801      	ldr	r0, [sp, #4]
  4034da:	9900      	ldr	r1, [sp, #0]
  4034dc:	aa0d      	add	r2, sp, #52	; 0x34
  4034de:	f7ff fb9d 	bl	402c1c <__sprint_r.part.0>
  4034e2:	2800      	cmp	r0, #0
  4034e4:	d081      	beq.n	4033ea <_vfiprintf_r+0x756>
  4034e6:	e799      	b.n	40341c <_vfiprintf_r+0x788>
  4034e8:	4640      	mov	r0, r8
  4034ea:	4649      	mov	r1, r9
  4034ec:	aa0d      	add	r2, sp, #52	; 0x34
  4034ee:	f7ff fb95 	bl	402c1c <__sprint_r.part.0>
  4034f2:	2800      	cmp	r0, #0
  4034f4:	d192      	bne.n	40341c <_vfiprintf_r+0x788>
  4034f6:	980e      	ldr	r0, [sp, #56]	; 0x38
  4034f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4034fa:	f100 0e01 	add.w	lr, r0, #1
  4034fe:	4652      	mov	r2, sl
  403500:	e7ba      	b.n	403478 <_vfiprintf_r+0x7e4>
  403502:	9b03      	ldr	r3, [sp, #12]
  403504:	1b9f      	subs	r7, r3, r6
  403506:	2f00      	cmp	r7, #0
  403508:	f77f af27 	ble.w	40335a <_vfiprintf_r+0x6c6>
  40350c:	2f10      	cmp	r7, #16
  40350e:	4d40      	ldr	r5, [pc, #256]	; (403610 <_vfiprintf_r+0x97c>)
  403510:	f340 81b4 	ble.w	40387c <_vfiprintf_r+0xbe8>
  403514:	4620      	mov	r0, r4
  403516:	2310      	movs	r3, #16
  403518:	4664      	mov	r4, ip
  40351a:	4684      	mov	ip, r0
  40351c:	e007      	b.n	40352e <_vfiprintf_r+0x89a>
  40351e:	f101 0e02 	add.w	lr, r1, #2
  403522:	f10c 0c08 	add.w	ip, ip, #8
  403526:	4601      	mov	r1, r0
  403528:	3f10      	subs	r7, #16
  40352a:	2f10      	cmp	r7, #16
  40352c:	dd11      	ble.n	403552 <_vfiprintf_r+0x8be>
  40352e:	1c48      	adds	r0, r1, #1
  403530:	3210      	adds	r2, #16
  403532:	2807      	cmp	r0, #7
  403534:	920f      	str	r2, [sp, #60]	; 0x3c
  403536:	f8cc 5000 	str.w	r5, [ip]
  40353a:	f8cc 3004 	str.w	r3, [ip, #4]
  40353e:	900e      	str	r0, [sp, #56]	; 0x38
  403540:	dded      	ble.n	40351e <_vfiprintf_r+0x88a>
  403542:	b9c2      	cbnz	r2, 403576 <_vfiprintf_r+0x8e2>
  403544:	3f10      	subs	r7, #16
  403546:	2f10      	cmp	r7, #16
  403548:	f04f 0e01 	mov.w	lr, #1
  40354c:	4611      	mov	r1, r2
  40354e:	46d4      	mov	ip, sl
  403550:	dced      	bgt.n	40352e <_vfiprintf_r+0x89a>
  403552:	4663      	mov	r3, ip
  403554:	46a4      	mov	ip, r4
  403556:	461c      	mov	r4, r3
  403558:	443a      	add	r2, r7
  40355a:	f1be 0f07 	cmp.w	lr, #7
  40355e:	920f      	str	r2, [sp, #60]	; 0x3c
  403560:	e884 00a0 	stmia.w	r4, {r5, r7}
  403564:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  403568:	f300 80ef 	bgt.w	40374a <_vfiprintf_r+0xab6>
  40356c:	3408      	adds	r4, #8
  40356e:	f10e 0001 	add.w	r0, lr, #1
  403572:	4671      	mov	r1, lr
  403574:	e6f1      	b.n	40335a <_vfiprintf_r+0x6c6>
  403576:	9801      	ldr	r0, [sp, #4]
  403578:	9900      	ldr	r1, [sp, #0]
  40357a:	9305      	str	r3, [sp, #20]
  40357c:	aa0d      	add	r2, sp, #52	; 0x34
  40357e:	f7ff fb4d 	bl	402c1c <__sprint_r.part.0>
  403582:	2800      	cmp	r0, #0
  403584:	f47f af4a 	bne.w	40341c <_vfiprintf_r+0x788>
  403588:	990e      	ldr	r1, [sp, #56]	; 0x38
  40358a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40358c:	9b05      	ldr	r3, [sp, #20]
  40358e:	f101 0e01 	add.w	lr, r1, #1
  403592:	46d4      	mov	ip, sl
  403594:	e7c8      	b.n	403528 <_vfiprintf_r+0x894>
  403596:	2a00      	cmp	r2, #0
  403598:	f040 80c6 	bne.w	403728 <_vfiprintf_r+0xa94>
  40359c:	9b05      	ldr	r3, [sp, #20]
  40359e:	2b00      	cmp	r3, #0
  4035a0:	f000 8086 	beq.w	4036b0 <_vfiprintf_r+0xa1c>
  4035a4:	aa0c      	add	r2, sp, #48	; 0x30
  4035a6:	2302      	movs	r3, #2
  4035a8:	921a      	str	r2, [sp, #104]	; 0x68
  4035aa:	4608      	mov	r0, r1
  4035ac:	931b      	str	r3, [sp, #108]	; 0x6c
  4035ae:	461a      	mov	r2, r3
  4035b0:	4654      	mov	r4, sl
  4035b2:	e6cb      	b.n	40334c <_vfiprintf_r+0x6b8>
  4035b4:	2a00      	cmp	r2, #0
  4035b6:	f040 80a6 	bne.w	403706 <_vfiprintf_r+0xa72>
  4035ba:	2001      	movs	r0, #1
  4035bc:	4611      	mov	r1, r2
  4035be:	4654      	mov	r4, sl
  4035c0:	e6c7      	b.n	403352 <_vfiprintf_r+0x6be>
  4035c2:	bb03      	cbnz	r3, 403606 <_vfiprintf_r+0x972>
  4035c4:	f018 0f01 	tst.w	r8, #1
  4035c8:	d01d      	beq.n	403606 <_vfiprintf_r+0x972>
  4035ca:	ab2a      	add	r3, sp, #168	; 0xa8
  4035cc:	2230      	movs	r2, #48	; 0x30
  4035ce:	f803 2d41 	strb.w	r2, [r3, #-65]!
  4035d2:	ebc3 090a 	rsb	r9, r3, sl
  4035d6:	9307      	str	r3, [sp, #28]
  4035d8:	e48e      	b.n	402ef8 <_vfiprintf_r+0x264>
  4035da:	9809      	ldr	r0, [sp, #36]	; 0x24
  4035dc:	46d1      	mov	r9, sl
  4035de:	0933      	lsrs	r3, r6, #4
  4035e0:	f006 010f 	and.w	r1, r6, #15
  4035e4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4035e8:	093a      	lsrs	r2, r7, #4
  4035ea:	461e      	mov	r6, r3
  4035ec:	4617      	mov	r7, r2
  4035ee:	5c43      	ldrb	r3, [r0, r1]
  4035f0:	f809 3d01 	strb.w	r3, [r9, #-1]!
  4035f4:	ea56 0307 	orrs.w	r3, r6, r7
  4035f8:	d1f1      	bne.n	4035de <_vfiprintf_r+0x94a>
  4035fa:	464b      	mov	r3, r9
  4035fc:	f8cd 901c 	str.w	r9, [sp, #28]
  403600:	ebc3 090a 	rsb	r9, r3, sl
  403604:	e478      	b.n	402ef8 <_vfiprintf_r+0x264>
  403606:	f8cd a01c 	str.w	sl, [sp, #28]
  40360a:	e475      	b.n	402ef8 <_vfiprintf_r+0x264>
  40360c:	2302      	movs	r3, #2
  40360e:	e444      	b.n	402e9a <_vfiprintf_r+0x206>
  403610:	004050f0 	.word	0x004050f0
  403614:	00405130 	.word	0x00405130
  403618:	2a00      	cmp	r2, #0
  40361a:	f040 80d7 	bne.w	4037cc <_vfiprintf_r+0xb38>
  40361e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  403622:	2b00      	cmp	r3, #0
  403624:	f000 80ae 	beq.w	403784 <_vfiprintf_r+0xaf0>
  403628:	2301      	movs	r3, #1
  40362a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40362e:	4618      	mov	r0, r3
  403630:	931b      	str	r3, [sp, #108]	; 0x6c
  403632:	461a      	mov	r2, r3
  403634:	911a      	str	r1, [sp, #104]	; 0x68
  403636:	4654      	mov	r4, sl
  403638:	e679      	b.n	40332e <_vfiprintf_r+0x69a>
  40363a:	9a03      	ldr	r2, [sp, #12]
  40363c:	1b95      	subs	r5, r2, r6
  40363e:	2d00      	cmp	r5, #0
  403640:	4652      	mov	r2, sl
  403642:	f73f af0a 	bgt.w	40345a <_vfiprintf_r+0x7c6>
  403646:	e6c9      	b.n	4033dc <_vfiprintf_r+0x748>
  403648:	465d      	mov	r5, fp
  40364a:	f7ff bb7c 	b.w	402d46 <_vfiprintf_r+0xb2>
  40364e:	9801      	ldr	r0, [sp, #4]
  403650:	9900      	ldr	r1, [sp, #0]
  403652:	aa0d      	add	r2, sp, #52	; 0x34
  403654:	f7ff fae2 	bl	402c1c <__sprint_r.part.0>
  403658:	2800      	cmp	r0, #0
  40365a:	f47f aedf 	bne.w	40341c <_vfiprintf_r+0x788>
  40365e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403660:	4652      	mov	r2, sl
  403662:	e6f3      	b.n	40344c <_vfiprintf_r+0x7b8>
  403664:	9904      	ldr	r1, [sp, #16]
  403666:	460a      	mov	r2, r1
  403668:	3204      	adds	r2, #4
  40366a:	680e      	ldr	r6, [r1, #0]
  40366c:	9204      	str	r2, [sp, #16]
  40366e:	2700      	movs	r7, #0
  403670:	e413      	b.n	402e9a <_vfiprintf_r+0x206>
  403672:	3204      	adds	r2, #4
  403674:	681e      	ldr	r6, [r3, #0]
  403676:	9204      	str	r2, [sp, #16]
  403678:	2301      	movs	r3, #1
  40367a:	2700      	movs	r7, #0
  40367c:	e40d      	b.n	402e9a <_vfiprintf_r+0x206>
  40367e:	6816      	ldr	r6, [r2, #0]
  403680:	3204      	adds	r2, #4
  403682:	9204      	str	r2, [sp, #16]
  403684:	2700      	movs	r7, #0
  403686:	e52d      	b.n	4030e4 <_vfiprintf_r+0x450>
  403688:	9a04      	ldr	r2, [sp, #16]
  40368a:	6816      	ldr	r6, [r2, #0]
  40368c:	4613      	mov	r3, r2
  40368e:	3304      	adds	r3, #4
  403690:	17f7      	asrs	r7, r6, #31
  403692:	9304      	str	r3, [sp, #16]
  403694:	4632      	mov	r2, r6
  403696:	463b      	mov	r3, r7
  403698:	e4bf      	b.n	40301a <_vfiprintf_r+0x386>
  40369a:	9801      	ldr	r0, [sp, #4]
  40369c:	9900      	ldr	r1, [sp, #0]
  40369e:	aa0d      	add	r2, sp, #52	; 0x34
  4036a0:	f7ff fabc 	bl	402c1c <__sprint_r.part.0>
  4036a4:	2800      	cmp	r0, #0
  4036a6:	f47f aeb9 	bne.w	40341c <_vfiprintf_r+0x788>
  4036aa:	4654      	mov	r4, sl
  4036ac:	f7ff bbbe 	b.w	402e2c <_vfiprintf_r+0x198>
  4036b0:	4608      	mov	r0, r1
  4036b2:	4654      	mov	r4, sl
  4036b4:	4611      	mov	r1, r2
  4036b6:	e64c      	b.n	403352 <_vfiprintf_r+0x6be>
  4036b8:	46d1      	mov	r9, sl
  4036ba:	f8cd c014 	str.w	ip, [sp, #20]
  4036be:	4630      	mov	r0, r6
  4036c0:	4639      	mov	r1, r7
  4036c2:	220a      	movs	r2, #10
  4036c4:	2300      	movs	r3, #0
  4036c6:	f001 f929 	bl	40491c <__aeabi_uldivmod>
  4036ca:	3230      	adds	r2, #48	; 0x30
  4036cc:	4630      	mov	r0, r6
  4036ce:	4639      	mov	r1, r7
  4036d0:	f809 2d01 	strb.w	r2, [r9, #-1]!
  4036d4:	2300      	movs	r3, #0
  4036d6:	220a      	movs	r2, #10
  4036d8:	f001 f920 	bl	40491c <__aeabi_uldivmod>
  4036dc:	4606      	mov	r6, r0
  4036de:	460f      	mov	r7, r1
  4036e0:	ea56 0307 	orrs.w	r3, r6, r7
  4036e4:	d1eb      	bne.n	4036be <_vfiprintf_r+0xa2a>
  4036e6:	f8dd c014 	ldr.w	ip, [sp, #20]
  4036ea:	e786      	b.n	4035fa <_vfiprintf_r+0x966>
  4036ec:	2b30      	cmp	r3, #48	; 0x30
  4036ee:	9b07      	ldr	r3, [sp, #28]
  4036f0:	d086      	beq.n	403600 <_vfiprintf_r+0x96c>
  4036f2:	3b01      	subs	r3, #1
  4036f4:	461a      	mov	r2, r3
  4036f6:	9307      	str	r3, [sp, #28]
  4036f8:	2330      	movs	r3, #48	; 0x30
  4036fa:	ebc2 090a 	rsb	r9, r2, sl
  4036fe:	f801 3c01 	strb.w	r3, [r1, #-1]
  403702:	f7ff bbf9 	b.w	402ef8 <_vfiprintf_r+0x264>
  403706:	9801      	ldr	r0, [sp, #4]
  403708:	9900      	ldr	r1, [sp, #0]
  40370a:	f8cd c014 	str.w	ip, [sp, #20]
  40370e:	aa0d      	add	r2, sp, #52	; 0x34
  403710:	f7ff fa84 	bl	402c1c <__sprint_r.part.0>
  403714:	2800      	cmp	r0, #0
  403716:	f47f ae81 	bne.w	40341c <_vfiprintf_r+0x788>
  40371a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40371c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40371e:	f8dd c014 	ldr.w	ip, [sp, #20]
  403722:	1c48      	adds	r0, r1, #1
  403724:	4654      	mov	r4, sl
  403726:	e614      	b.n	403352 <_vfiprintf_r+0x6be>
  403728:	9801      	ldr	r0, [sp, #4]
  40372a:	9900      	ldr	r1, [sp, #0]
  40372c:	f8cd c020 	str.w	ip, [sp, #32]
  403730:	aa0d      	add	r2, sp, #52	; 0x34
  403732:	f7ff fa73 	bl	402c1c <__sprint_r.part.0>
  403736:	2800      	cmp	r0, #0
  403738:	f47f ae70 	bne.w	40341c <_vfiprintf_r+0x788>
  40373c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40373e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403740:	f8dd c020 	ldr.w	ip, [sp, #32]
  403744:	1c48      	adds	r0, r1, #1
  403746:	4654      	mov	r4, sl
  403748:	e5f4      	b.n	403334 <_vfiprintf_r+0x6a0>
  40374a:	2a00      	cmp	r2, #0
  40374c:	d167      	bne.n	40381e <_vfiprintf_r+0xb8a>
  40374e:	2001      	movs	r0, #1
  403750:	4611      	mov	r1, r2
  403752:	4654      	mov	r4, sl
  403754:	e601      	b.n	40335a <_vfiprintf_r+0x6c6>
  403756:	9801      	ldr	r0, [sp, #4]
  403758:	9900      	ldr	r1, [sp, #0]
  40375a:	aa0d      	add	r2, sp, #52	; 0x34
  40375c:	f7ff fa5e 	bl	402c1c <__sprint_r.part.0>
  403760:	2800      	cmp	r0, #0
  403762:	f47f ae5b 	bne.w	40341c <_vfiprintf_r+0x788>
  403766:	980e      	ldr	r0, [sp, #56]	; 0x38
  403768:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40376a:	3001      	adds	r0, #1
  40376c:	4654      	mov	r4, sl
  40376e:	e624      	b.n	4033ba <_vfiprintf_r+0x726>
  403770:	252d      	movs	r5, #45	; 0x2d
  403772:	4276      	negs	r6, r6
  403774:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  403778:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  40377c:	46e1      	mov	r9, ip
  40377e:	2301      	movs	r3, #1
  403780:	f7ff bb91 	b.w	402ea6 <_vfiprintf_r+0x212>
  403784:	9b05      	ldr	r3, [sp, #20]
  403786:	4611      	mov	r1, r2
  403788:	2001      	movs	r0, #1
  40378a:	4654      	mov	r4, sl
  40378c:	2b00      	cmp	r3, #0
  40378e:	f43f ade4 	beq.w	40335a <_vfiprintf_r+0x6c6>
  403792:	aa0c      	add	r2, sp, #48	; 0x30
  403794:	2302      	movs	r3, #2
  403796:	e88a 000c 	stmia.w	sl, {r2, r3}
  40379a:	461a      	mov	r2, r3
  40379c:	e5d6      	b.n	40334c <_vfiprintf_r+0x6b8>
  40379e:	f018 0f10 	tst.w	r8, #16
  4037a2:	d10b      	bne.n	4037bc <_vfiprintf_r+0xb28>
  4037a4:	f018 0f40 	tst.w	r8, #64	; 0x40
  4037a8:	d008      	beq.n	4037bc <_vfiprintf_r+0xb28>
  4037aa:	9a04      	ldr	r2, [sp, #16]
  4037ac:	6813      	ldr	r3, [r2, #0]
  4037ae:	3204      	adds	r2, #4
  4037b0:	9204      	str	r2, [sp, #16]
  4037b2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  4037b6:	801a      	strh	r2, [r3, #0]
  4037b8:	f7ff ba9e 	b.w	402cf8 <_vfiprintf_r+0x64>
  4037bc:	9a04      	ldr	r2, [sp, #16]
  4037be:	6813      	ldr	r3, [r2, #0]
  4037c0:	3204      	adds	r2, #4
  4037c2:	9204      	str	r2, [sp, #16]
  4037c4:	9a02      	ldr	r2, [sp, #8]
  4037c6:	601a      	str	r2, [r3, #0]
  4037c8:	f7ff ba96 	b.w	402cf8 <_vfiprintf_r+0x64>
  4037cc:	9801      	ldr	r0, [sp, #4]
  4037ce:	9900      	ldr	r1, [sp, #0]
  4037d0:	f8cd c020 	str.w	ip, [sp, #32]
  4037d4:	aa0d      	add	r2, sp, #52	; 0x34
  4037d6:	f7ff fa21 	bl	402c1c <__sprint_r.part.0>
  4037da:	2800      	cmp	r0, #0
  4037dc:	f47f ae1e 	bne.w	40341c <_vfiprintf_r+0x788>
  4037e0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4037e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4037e4:	f8dd c020 	ldr.w	ip, [sp, #32]
  4037e8:	1c48      	adds	r0, r1, #1
  4037ea:	4654      	mov	r4, sl
  4037ec:	e591      	b.n	403312 <_vfiprintf_r+0x67e>
  4037ee:	f048 0820 	orr.w	r8, r8, #32
  4037f2:	f10b 0001 	add.w	r0, fp, #1
  4037f6:	f89b 3001 	ldrb.w	r3, [fp, #1]
  4037fa:	f7ff bab4 	b.w	402d66 <_vfiprintf_r+0xd2>
  4037fe:	426d      	negs	r5, r5
  403800:	9304      	str	r3, [sp, #16]
  403802:	4658      	mov	r0, fp
  403804:	f7ff bbc6 	b.w	402f94 <_vfiprintf_r+0x300>
  403808:	9807      	ldr	r0, [sp, #28]
  40380a:	9604      	str	r6, [sp, #16]
  40380c:	f000 ff54 	bl	4046b8 <strlen>
  403810:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  403814:	4681      	mov	r9, r0
  403816:	f04f 0c00 	mov.w	ip, #0
  40381a:	f7ff bb6d 	b.w	402ef8 <_vfiprintf_r+0x264>
  40381e:	9801      	ldr	r0, [sp, #4]
  403820:	9900      	ldr	r1, [sp, #0]
  403822:	f8cd c014 	str.w	ip, [sp, #20]
  403826:	aa0d      	add	r2, sp, #52	; 0x34
  403828:	f7ff f9f8 	bl	402c1c <__sprint_r.part.0>
  40382c:	2800      	cmp	r0, #0
  40382e:	f47f adf5 	bne.w	40341c <_vfiprintf_r+0x788>
  403832:	990e      	ldr	r1, [sp, #56]	; 0x38
  403834:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403836:	f8dd c014 	ldr.w	ip, [sp, #20]
  40383a:	1c48      	adds	r0, r1, #1
  40383c:	4654      	mov	r4, sl
  40383e:	e58c      	b.n	40335a <_vfiprintf_r+0x6c6>
  403840:	990e      	ldr	r1, [sp, #56]	; 0x38
  403842:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403844:	4f15      	ldr	r7, [pc, #84]	; (40389c <_vfiprintf_r+0xc08>)
  403846:	3101      	adds	r1, #1
  403848:	f7ff bb98 	b.w	402f7c <_vfiprintf_r+0x2e8>
  40384c:	f1bc 0f06 	cmp.w	ip, #6
  403850:	bf28      	it	cs
  403852:	f04f 0c06 	movcs.w	ip, #6
  403856:	4b12      	ldr	r3, [pc, #72]	; (4038a0 <_vfiprintf_r+0xc0c>)
  403858:	9604      	str	r6, [sp, #16]
  40385a:	46e1      	mov	r9, ip
  40385c:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
  403860:	9307      	str	r3, [sp, #28]
  403862:	e460      	b.n	403126 <_vfiprintf_r+0x492>
  403864:	990e      	ldr	r1, [sp, #56]	; 0x38
  403866:	4f0d      	ldr	r7, [pc, #52]	; (40389c <_vfiprintf_r+0xc08>)
  403868:	f101 0e01 	add.w	lr, r1, #1
  40386c:	e618      	b.n	4034a0 <_vfiprintf_r+0x80c>
  40386e:	46e1      	mov	r9, ip
  403870:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  403874:	9604      	str	r6, [sp, #16]
  403876:	4684      	mov	ip, r0
  403878:	f7ff bb3e 	b.w	402ef8 <_vfiprintf_r+0x264>
  40387c:	4686      	mov	lr, r0
  40387e:	e66b      	b.n	403558 <_vfiprintf_r+0x8c4>
  403880:	9a04      	ldr	r2, [sp, #16]
  403882:	f89b 3001 	ldrb.w	r3, [fp, #1]
  403886:	6816      	ldr	r6, [r2, #0]
  403888:	3204      	adds	r2, #4
  40388a:	2e00      	cmp	r6, #0
  40388c:	9204      	str	r2, [sp, #16]
  40388e:	f6bf aa6a 	bge.w	402d66 <_vfiprintf_r+0xd2>
  403892:	f04f 36ff 	mov.w	r6, #4294967295
  403896:	f7ff ba66 	b.w	402d66 <_vfiprintf_r+0xd2>
  40389a:	bf00      	nop
  40389c:	00405130 	.word	0x00405130
  4038a0:	00405128 	.word	0x00405128

004038a4 <__sbprintf>:
  4038a4:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  4038a8:	460c      	mov	r4, r1
  4038aa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4038ae:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  4038b2:	69e7      	ldr	r7, [r4, #28]
  4038b4:	6e49      	ldr	r1, [r1, #100]	; 0x64
  4038b6:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  4038ba:	9119      	str	r1, [sp, #100]	; 0x64
  4038bc:	ad1a      	add	r5, sp, #104	; 0x68
  4038be:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4038c2:	f02e 0e02 	bic.w	lr, lr, #2
  4038c6:	f04f 0c00 	mov.w	ip, #0
  4038ca:	9707      	str	r7, [sp, #28]
  4038cc:	4669      	mov	r1, sp
  4038ce:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4038d0:	9500      	str	r5, [sp, #0]
  4038d2:	9504      	str	r5, [sp, #16]
  4038d4:	9602      	str	r6, [sp, #8]
  4038d6:	9605      	str	r6, [sp, #20]
  4038d8:	f8ad e00c 	strh.w	lr, [sp, #12]
  4038dc:	f8ad 900e 	strh.w	r9, [sp, #14]
  4038e0:	9709      	str	r7, [sp, #36]	; 0x24
  4038e2:	f8cd c018 	str.w	ip, [sp, #24]
  4038e6:	4606      	mov	r6, r0
  4038e8:	f7ff f9d4 	bl	402c94 <_vfiprintf_r>
  4038ec:	1e05      	subs	r5, r0, #0
  4038ee:	db07      	blt.n	403900 <__sbprintf+0x5c>
  4038f0:	4630      	mov	r0, r6
  4038f2:	4669      	mov	r1, sp
  4038f4:	f7fe fb9a 	bl	40202c <_fflush_r>
  4038f8:	2800      	cmp	r0, #0
  4038fa:	bf18      	it	ne
  4038fc:	f04f 35ff 	movne.w	r5, #4294967295
  403900:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403904:	065b      	lsls	r3, r3, #25
  403906:	d503      	bpl.n	403910 <__sbprintf+0x6c>
  403908:	89a3      	ldrh	r3, [r4, #12]
  40390a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40390e:	81a3      	strh	r3, [r4, #12]
  403910:	4628      	mov	r0, r5
  403912:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  403916:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  40391a:	bf00      	nop

0040391c <_write_r>:
  40391c:	b570      	push	{r4, r5, r6, lr}
  40391e:	4c08      	ldr	r4, [pc, #32]	; (403940 <_write_r+0x24>)
  403920:	4606      	mov	r6, r0
  403922:	2500      	movs	r5, #0
  403924:	4608      	mov	r0, r1
  403926:	4611      	mov	r1, r2
  403928:	461a      	mov	r2, r3
  40392a:	6025      	str	r5, [r4, #0]
  40392c:	f7fc fc4c 	bl	4001c8 <_write>
  403930:	1c43      	adds	r3, r0, #1
  403932:	d000      	beq.n	403936 <_write_r+0x1a>
  403934:	bd70      	pop	{r4, r5, r6, pc}
  403936:	6823      	ldr	r3, [r4, #0]
  403938:	2b00      	cmp	r3, #0
  40393a:	d0fb      	beq.n	403934 <_write_r+0x18>
  40393c:	6033      	str	r3, [r6, #0]
  40393e:	bd70      	pop	{r4, r5, r6, pc}
  403940:	20000b5c 	.word	0x20000b5c

00403944 <__swsetup_r>:
  403944:	b538      	push	{r3, r4, r5, lr}
  403946:	4b2f      	ldr	r3, [pc, #188]	; (403a04 <__swsetup_r+0xc0>)
  403948:	681b      	ldr	r3, [r3, #0]
  40394a:	4605      	mov	r5, r0
  40394c:	460c      	mov	r4, r1
  40394e:	b113      	cbz	r3, 403956 <__swsetup_r+0x12>
  403950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403952:	2a00      	cmp	r2, #0
  403954:	d036      	beq.n	4039c4 <__swsetup_r+0x80>
  403956:	89a2      	ldrh	r2, [r4, #12]
  403958:	b293      	uxth	r3, r2
  40395a:	0718      	lsls	r0, r3, #28
  40395c:	d50c      	bpl.n	403978 <__swsetup_r+0x34>
  40395e:	6920      	ldr	r0, [r4, #16]
  403960:	b1a8      	cbz	r0, 40398e <__swsetup_r+0x4a>
  403962:	f013 0201 	ands.w	r2, r3, #1
  403966:	d01e      	beq.n	4039a6 <__swsetup_r+0x62>
  403968:	6963      	ldr	r3, [r4, #20]
  40396a:	2200      	movs	r2, #0
  40396c:	425b      	negs	r3, r3
  40396e:	61a3      	str	r3, [r4, #24]
  403970:	60a2      	str	r2, [r4, #8]
  403972:	b1f0      	cbz	r0, 4039b2 <__swsetup_r+0x6e>
  403974:	2000      	movs	r0, #0
  403976:	bd38      	pop	{r3, r4, r5, pc}
  403978:	06d9      	lsls	r1, r3, #27
  40397a:	d53b      	bpl.n	4039f4 <__swsetup_r+0xb0>
  40397c:	0758      	lsls	r0, r3, #29
  40397e:	d425      	bmi.n	4039cc <__swsetup_r+0x88>
  403980:	6920      	ldr	r0, [r4, #16]
  403982:	f042 0308 	orr.w	r3, r2, #8
  403986:	81a3      	strh	r3, [r4, #12]
  403988:	b29b      	uxth	r3, r3
  40398a:	2800      	cmp	r0, #0
  40398c:	d1e9      	bne.n	403962 <__swsetup_r+0x1e>
  40398e:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403992:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403996:	d0e4      	beq.n	403962 <__swsetup_r+0x1e>
  403998:	4628      	mov	r0, r5
  40399a:	4621      	mov	r1, r4
  40399c:	f000 fac2 	bl	403f24 <__smakebuf_r>
  4039a0:	89a3      	ldrh	r3, [r4, #12]
  4039a2:	6920      	ldr	r0, [r4, #16]
  4039a4:	e7dd      	b.n	403962 <__swsetup_r+0x1e>
  4039a6:	0799      	lsls	r1, r3, #30
  4039a8:	bf58      	it	pl
  4039aa:	6962      	ldrpl	r2, [r4, #20]
  4039ac:	60a2      	str	r2, [r4, #8]
  4039ae:	2800      	cmp	r0, #0
  4039b0:	d1e0      	bne.n	403974 <__swsetup_r+0x30>
  4039b2:	89a3      	ldrh	r3, [r4, #12]
  4039b4:	061a      	lsls	r2, r3, #24
  4039b6:	d5de      	bpl.n	403976 <__swsetup_r+0x32>
  4039b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4039bc:	81a3      	strh	r3, [r4, #12]
  4039be:	f04f 30ff 	mov.w	r0, #4294967295
  4039c2:	bd38      	pop	{r3, r4, r5, pc}
  4039c4:	4618      	mov	r0, r3
  4039c6:	f7fe fbd7 	bl	402178 <__sinit>
  4039ca:	e7c4      	b.n	403956 <__swsetup_r+0x12>
  4039cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4039ce:	b149      	cbz	r1, 4039e4 <__swsetup_r+0xa0>
  4039d0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4039d4:	4299      	cmp	r1, r3
  4039d6:	d003      	beq.n	4039e0 <__swsetup_r+0x9c>
  4039d8:	4628      	mov	r0, r5
  4039da:	f7fe fc25 	bl	402228 <_free_r>
  4039de:	89a2      	ldrh	r2, [r4, #12]
  4039e0:	2300      	movs	r3, #0
  4039e2:	6323      	str	r3, [r4, #48]	; 0x30
  4039e4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4039e8:	2300      	movs	r3, #0
  4039ea:	6920      	ldr	r0, [r4, #16]
  4039ec:	6063      	str	r3, [r4, #4]
  4039ee:	b292      	uxth	r2, r2
  4039f0:	6020      	str	r0, [r4, #0]
  4039f2:	e7c6      	b.n	403982 <__swsetup_r+0x3e>
  4039f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4039f8:	2309      	movs	r3, #9
  4039fa:	602b      	str	r3, [r5, #0]
  4039fc:	f04f 30ff 	mov.w	r0, #4294967295
  403a00:	81a2      	strh	r2, [r4, #12]
  403a02:	bd38      	pop	{r3, r4, r5, pc}
  403a04:	20000430 	.word	0x20000430

00403a08 <register_fini>:
  403a08:	4b02      	ldr	r3, [pc, #8]	; (403a14 <register_fini+0xc>)
  403a0a:	b113      	cbz	r3, 403a12 <register_fini+0xa>
  403a0c:	4802      	ldr	r0, [pc, #8]	; (403a18 <register_fini+0x10>)
  403a0e:	f000 b805 	b.w	403a1c <atexit>
  403a12:	4770      	bx	lr
  403a14:	00000000 	.word	0x00000000
  403a18:	00403ad1 	.word	0x00403ad1

00403a1c <atexit>:
  403a1c:	4601      	mov	r1, r0
  403a1e:	2000      	movs	r0, #0
  403a20:	4602      	mov	r2, r0
  403a22:	4603      	mov	r3, r0
  403a24:	f000 bf02 	b.w	40482c <__register_exitproc>

00403a28 <_close_r>:
  403a28:	b538      	push	{r3, r4, r5, lr}
  403a2a:	4c07      	ldr	r4, [pc, #28]	; (403a48 <_close_r+0x20>)
  403a2c:	2300      	movs	r3, #0
  403a2e:	4605      	mov	r5, r0
  403a30:	4608      	mov	r0, r1
  403a32:	6023      	str	r3, [r4, #0]
  403a34:	f7fc ff5c 	bl	4008f0 <_close>
  403a38:	1c43      	adds	r3, r0, #1
  403a3a:	d000      	beq.n	403a3e <_close_r+0x16>
  403a3c:	bd38      	pop	{r3, r4, r5, pc}
  403a3e:	6823      	ldr	r3, [r4, #0]
  403a40:	2b00      	cmp	r3, #0
  403a42:	d0fb      	beq.n	403a3c <_close_r+0x14>
  403a44:	602b      	str	r3, [r5, #0]
  403a46:	bd38      	pop	{r3, r4, r5, pc}
  403a48:	20000b5c 	.word	0x20000b5c

00403a4c <_fclose_r>:
  403a4c:	2900      	cmp	r1, #0
  403a4e:	d03d      	beq.n	403acc <_fclose_r+0x80>
  403a50:	b570      	push	{r4, r5, r6, lr}
  403a52:	4605      	mov	r5, r0
  403a54:	460c      	mov	r4, r1
  403a56:	b108      	cbz	r0, 403a5c <_fclose_r+0x10>
  403a58:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403a5a:	b37b      	cbz	r3, 403abc <_fclose_r+0x70>
  403a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a60:	b90b      	cbnz	r3, 403a66 <_fclose_r+0x1a>
  403a62:	2000      	movs	r0, #0
  403a64:	bd70      	pop	{r4, r5, r6, pc}
  403a66:	4628      	mov	r0, r5
  403a68:	4621      	mov	r1, r4
  403a6a:	f7fe fa35 	bl	401ed8 <__sflush_r>
  403a6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403a70:	4606      	mov	r6, r0
  403a72:	b133      	cbz	r3, 403a82 <_fclose_r+0x36>
  403a74:	4628      	mov	r0, r5
  403a76:	69e1      	ldr	r1, [r4, #28]
  403a78:	4798      	blx	r3
  403a7a:	2800      	cmp	r0, #0
  403a7c:	bfb8      	it	lt
  403a7e:	f04f 36ff 	movlt.w	r6, #4294967295
  403a82:	89a3      	ldrh	r3, [r4, #12]
  403a84:	061b      	lsls	r3, r3, #24
  403a86:	d41c      	bmi.n	403ac2 <_fclose_r+0x76>
  403a88:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403a8a:	b141      	cbz	r1, 403a9e <_fclose_r+0x52>
  403a8c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403a90:	4299      	cmp	r1, r3
  403a92:	d002      	beq.n	403a9a <_fclose_r+0x4e>
  403a94:	4628      	mov	r0, r5
  403a96:	f7fe fbc7 	bl	402228 <_free_r>
  403a9a:	2300      	movs	r3, #0
  403a9c:	6323      	str	r3, [r4, #48]	; 0x30
  403a9e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403aa0:	b121      	cbz	r1, 403aac <_fclose_r+0x60>
  403aa2:	4628      	mov	r0, r5
  403aa4:	f7fe fbc0 	bl	402228 <_free_r>
  403aa8:	2300      	movs	r3, #0
  403aaa:	6463      	str	r3, [r4, #68]	; 0x44
  403aac:	f7fe fb6a 	bl	402184 <__sfp_lock_acquire>
  403ab0:	2300      	movs	r3, #0
  403ab2:	81a3      	strh	r3, [r4, #12]
  403ab4:	f7fe fb68 	bl	402188 <__sfp_lock_release>
  403ab8:	4630      	mov	r0, r6
  403aba:	bd70      	pop	{r4, r5, r6, pc}
  403abc:	f7fe fb5c 	bl	402178 <__sinit>
  403ac0:	e7cc      	b.n	403a5c <_fclose_r+0x10>
  403ac2:	4628      	mov	r0, r5
  403ac4:	6921      	ldr	r1, [r4, #16]
  403ac6:	f7fe fbaf 	bl	402228 <_free_r>
  403aca:	e7dd      	b.n	403a88 <_fclose_r+0x3c>
  403acc:	2000      	movs	r0, #0
  403ace:	4770      	bx	lr

00403ad0 <__libc_fini_array>:
  403ad0:	b538      	push	{r3, r4, r5, lr}
  403ad2:	4b08      	ldr	r3, [pc, #32]	; (403af4 <__libc_fini_array+0x24>)
  403ad4:	4d08      	ldr	r5, [pc, #32]	; (403af8 <__libc_fini_array+0x28>)
  403ad6:	1aed      	subs	r5, r5, r3
  403ad8:	10ac      	asrs	r4, r5, #2
  403ada:	bf18      	it	ne
  403adc:	18ed      	addne	r5, r5, r3
  403ade:	d005      	beq.n	403aec <__libc_fini_array+0x1c>
  403ae0:	3c01      	subs	r4, #1
  403ae2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403ae6:	4798      	blx	r3
  403ae8:	2c00      	cmp	r4, #0
  403aea:	d1f9      	bne.n	403ae0 <__libc_fini_array+0x10>
  403aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403af0:	f001 bb30 	b.w	405154 <_fini>
  403af4:	00405160 	.word	0x00405160
  403af8:	00405164 	.word	0x00405164

00403afc <__fputwc>:
  403afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b00:	b082      	sub	sp, #8
  403b02:	4607      	mov	r7, r0
  403b04:	460e      	mov	r6, r1
  403b06:	4614      	mov	r4, r2
  403b08:	f000 f9f2 	bl	403ef0 <__locale_mb_cur_max>
  403b0c:	2801      	cmp	r0, #1
  403b0e:	d041      	beq.n	403b94 <__fputwc+0x98>
  403b10:	4638      	mov	r0, r7
  403b12:	a901      	add	r1, sp, #4
  403b14:	4632      	mov	r2, r6
  403b16:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403b1a:	f000 fe4f 	bl	4047bc <_wcrtomb_r>
  403b1e:	f1b0 3fff 	cmp.w	r0, #4294967295
  403b22:	4680      	mov	r8, r0
  403b24:	d02f      	beq.n	403b86 <__fputwc+0x8a>
  403b26:	2800      	cmp	r0, #0
  403b28:	d03c      	beq.n	403ba4 <__fputwc+0xa8>
  403b2a:	f89d 1004 	ldrb.w	r1, [sp, #4]
  403b2e:	2500      	movs	r5, #0
  403b30:	e009      	b.n	403b46 <__fputwc+0x4a>
  403b32:	6823      	ldr	r3, [r4, #0]
  403b34:	7019      	strb	r1, [r3, #0]
  403b36:	6823      	ldr	r3, [r4, #0]
  403b38:	3301      	adds	r3, #1
  403b3a:	6023      	str	r3, [r4, #0]
  403b3c:	3501      	adds	r5, #1
  403b3e:	45a8      	cmp	r8, r5
  403b40:	d930      	bls.n	403ba4 <__fputwc+0xa8>
  403b42:	ab01      	add	r3, sp, #4
  403b44:	5d59      	ldrb	r1, [r3, r5]
  403b46:	68a3      	ldr	r3, [r4, #8]
  403b48:	3b01      	subs	r3, #1
  403b4a:	2b00      	cmp	r3, #0
  403b4c:	60a3      	str	r3, [r4, #8]
  403b4e:	daf0      	bge.n	403b32 <__fputwc+0x36>
  403b50:	69a2      	ldr	r2, [r4, #24]
  403b52:	4293      	cmp	r3, r2
  403b54:	db07      	blt.n	403b66 <__fputwc+0x6a>
  403b56:	6823      	ldr	r3, [r4, #0]
  403b58:	7019      	strb	r1, [r3, #0]
  403b5a:	6823      	ldr	r3, [r4, #0]
  403b5c:	7819      	ldrb	r1, [r3, #0]
  403b5e:	290a      	cmp	r1, #10
  403b60:	f103 0301 	add.w	r3, r3, #1
  403b64:	d1e9      	bne.n	403b3a <__fputwc+0x3e>
  403b66:	4638      	mov	r0, r7
  403b68:	4622      	mov	r2, r4
  403b6a:	f000 fdd3 	bl	404714 <__swbuf_r>
  403b6e:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  403b72:	fab0 f080 	clz	r0, r0
  403b76:	0940      	lsrs	r0, r0, #5
  403b78:	2800      	cmp	r0, #0
  403b7a:	d0df      	beq.n	403b3c <__fputwc+0x40>
  403b7c:	f04f 30ff 	mov.w	r0, #4294967295
  403b80:	b002      	add	sp, #8
  403b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b86:	89a3      	ldrh	r3, [r4, #12]
  403b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403b8c:	81a3      	strh	r3, [r4, #12]
  403b8e:	b002      	add	sp, #8
  403b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b94:	1e73      	subs	r3, r6, #1
  403b96:	2bfe      	cmp	r3, #254	; 0xfe
  403b98:	d8ba      	bhi.n	403b10 <__fputwc+0x14>
  403b9a:	b2f1      	uxtb	r1, r6
  403b9c:	4680      	mov	r8, r0
  403b9e:	f88d 1004 	strb.w	r1, [sp, #4]
  403ba2:	e7c4      	b.n	403b2e <__fputwc+0x32>
  403ba4:	4630      	mov	r0, r6
  403ba6:	b002      	add	sp, #8
  403ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403bac <_fputwc_r>:
  403bac:	8993      	ldrh	r3, [r2, #12]
  403bae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  403bb2:	d10b      	bne.n	403bcc <_fputwc_r+0x20>
  403bb4:	b410      	push	{r4}
  403bb6:	6e54      	ldr	r4, [r2, #100]	; 0x64
  403bb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403bbc:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  403bc0:	6654      	str	r4, [r2, #100]	; 0x64
  403bc2:	8193      	strh	r3, [r2, #12]
  403bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
  403bc8:	f7ff bf98 	b.w	403afc <__fputwc>
  403bcc:	f7ff bf96 	b.w	403afc <__fputwc>

00403bd0 <__sfvwrite_r>:
  403bd0:	6893      	ldr	r3, [r2, #8]
  403bd2:	2b00      	cmp	r3, #0
  403bd4:	d07a      	beq.n	403ccc <__sfvwrite_r+0xfc>
  403bd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403bda:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  403bde:	f01e 0f08 	tst.w	lr, #8
  403be2:	b083      	sub	sp, #12
  403be4:	460c      	mov	r4, r1
  403be6:	4681      	mov	r9, r0
  403be8:	4616      	mov	r6, r2
  403bea:	d026      	beq.n	403c3a <__sfvwrite_r+0x6a>
  403bec:	690b      	ldr	r3, [r1, #16]
  403bee:	b323      	cbz	r3, 403c3a <__sfvwrite_r+0x6a>
  403bf0:	f00e 0802 	and.w	r8, lr, #2
  403bf4:	fa1f f088 	uxth.w	r0, r8
  403bf8:	6835      	ldr	r5, [r6, #0]
  403bfa:	b370      	cbz	r0, 403c5a <__sfvwrite_r+0x8a>
  403bfc:	f04f 0a00 	mov.w	sl, #0
  403c00:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 403ee4 <__sfvwrite_r+0x314>
  403c04:	46d0      	mov	r8, sl
  403c06:	45d8      	cmp	r8, fp
  403c08:	4643      	mov	r3, r8
  403c0a:	4652      	mov	r2, sl
  403c0c:	bf28      	it	cs
  403c0e:	465b      	movcs	r3, fp
  403c10:	4648      	mov	r0, r9
  403c12:	f1b8 0f00 	cmp.w	r8, #0
  403c16:	d053      	beq.n	403cc0 <__sfvwrite_r+0xf0>
  403c18:	69e1      	ldr	r1, [r4, #28]
  403c1a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403c1c:	47b8      	blx	r7
  403c1e:	2800      	cmp	r0, #0
  403c20:	dd73      	ble.n	403d0a <__sfvwrite_r+0x13a>
  403c22:	68b3      	ldr	r3, [r6, #8]
  403c24:	1a1b      	subs	r3, r3, r0
  403c26:	4482      	add	sl, r0
  403c28:	ebc0 0808 	rsb	r8, r0, r8
  403c2c:	60b3      	str	r3, [r6, #8]
  403c2e:	2b00      	cmp	r3, #0
  403c30:	d1e9      	bne.n	403c06 <__sfvwrite_r+0x36>
  403c32:	2000      	movs	r0, #0
  403c34:	b003      	add	sp, #12
  403c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c3a:	4648      	mov	r0, r9
  403c3c:	4621      	mov	r1, r4
  403c3e:	f7ff fe81 	bl	403944 <__swsetup_r>
  403c42:	2800      	cmp	r0, #0
  403c44:	f040 8145 	bne.w	403ed2 <__sfvwrite_r+0x302>
  403c48:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  403c4c:	6835      	ldr	r5, [r6, #0]
  403c4e:	f00e 0802 	and.w	r8, lr, #2
  403c52:	fa1f f088 	uxth.w	r0, r8
  403c56:	2800      	cmp	r0, #0
  403c58:	d1d0      	bne.n	403bfc <__sfvwrite_r+0x2c>
  403c5a:	f01e 0b01 	ands.w	fp, lr, #1
  403c5e:	d15d      	bne.n	403d1c <__sfvwrite_r+0x14c>
  403c60:	46d8      	mov	r8, fp
  403c62:	f1b8 0f00 	cmp.w	r8, #0
  403c66:	d025      	beq.n	403cb4 <__sfvwrite_r+0xe4>
  403c68:	f41e 7f00 	tst.w	lr, #512	; 0x200
  403c6c:	68a7      	ldr	r7, [r4, #8]
  403c6e:	d02f      	beq.n	403cd0 <__sfvwrite_r+0x100>
  403c70:	45b8      	cmp	r8, r7
  403c72:	46ba      	mov	sl, r7
  403c74:	f0c0 80a9 	bcc.w	403dca <__sfvwrite_r+0x1fa>
  403c78:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  403c7c:	f040 80b6 	bne.w	403dec <__sfvwrite_r+0x21c>
  403c80:	6820      	ldr	r0, [r4, #0]
  403c82:	4652      	mov	r2, sl
  403c84:	4659      	mov	r1, fp
  403c86:	f000 faa9 	bl	4041dc <memmove>
  403c8a:	68a0      	ldr	r0, [r4, #8]
  403c8c:	6822      	ldr	r2, [r4, #0]
  403c8e:	1bc0      	subs	r0, r0, r7
  403c90:	eb02 030a 	add.w	r3, r2, sl
  403c94:	60a0      	str	r0, [r4, #8]
  403c96:	6023      	str	r3, [r4, #0]
  403c98:	4640      	mov	r0, r8
  403c9a:	68b3      	ldr	r3, [r6, #8]
  403c9c:	1a1b      	subs	r3, r3, r0
  403c9e:	4483      	add	fp, r0
  403ca0:	ebc0 0808 	rsb	r8, r0, r8
  403ca4:	60b3      	str	r3, [r6, #8]
  403ca6:	2b00      	cmp	r3, #0
  403ca8:	d0c3      	beq.n	403c32 <__sfvwrite_r+0x62>
  403caa:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  403cae:	f1b8 0f00 	cmp.w	r8, #0
  403cb2:	d1d9      	bne.n	403c68 <__sfvwrite_r+0x98>
  403cb4:	f8d5 b000 	ldr.w	fp, [r5]
  403cb8:	f8d5 8004 	ldr.w	r8, [r5, #4]
  403cbc:	3508      	adds	r5, #8
  403cbe:	e7d0      	b.n	403c62 <__sfvwrite_r+0x92>
  403cc0:	f8d5 a000 	ldr.w	sl, [r5]
  403cc4:	f8d5 8004 	ldr.w	r8, [r5, #4]
  403cc8:	3508      	adds	r5, #8
  403cca:	e79c      	b.n	403c06 <__sfvwrite_r+0x36>
  403ccc:	2000      	movs	r0, #0
  403cce:	4770      	bx	lr
  403cd0:	6820      	ldr	r0, [r4, #0]
  403cd2:	6923      	ldr	r3, [r4, #16]
  403cd4:	4298      	cmp	r0, r3
  403cd6:	d803      	bhi.n	403ce0 <__sfvwrite_r+0x110>
  403cd8:	6962      	ldr	r2, [r4, #20]
  403cda:	4590      	cmp	r8, r2
  403cdc:	f080 80b9 	bcs.w	403e52 <__sfvwrite_r+0x282>
  403ce0:	4547      	cmp	r7, r8
  403ce2:	bf28      	it	cs
  403ce4:	4647      	movcs	r7, r8
  403ce6:	463a      	mov	r2, r7
  403ce8:	4659      	mov	r1, fp
  403cea:	f000 fa77 	bl	4041dc <memmove>
  403cee:	68a3      	ldr	r3, [r4, #8]
  403cf0:	6822      	ldr	r2, [r4, #0]
  403cf2:	1bdb      	subs	r3, r3, r7
  403cf4:	443a      	add	r2, r7
  403cf6:	60a3      	str	r3, [r4, #8]
  403cf8:	6022      	str	r2, [r4, #0]
  403cfa:	2b00      	cmp	r3, #0
  403cfc:	d14a      	bne.n	403d94 <__sfvwrite_r+0x1c4>
  403cfe:	4648      	mov	r0, r9
  403d00:	4621      	mov	r1, r4
  403d02:	f7fe f993 	bl	40202c <_fflush_r>
  403d06:	2800      	cmp	r0, #0
  403d08:	d044      	beq.n	403d94 <__sfvwrite_r+0x1c4>
  403d0a:	89a3      	ldrh	r3, [r4, #12]
  403d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403d10:	f04f 30ff 	mov.w	r0, #4294967295
  403d14:	81a3      	strh	r3, [r4, #12]
  403d16:	b003      	add	sp, #12
  403d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d1c:	4680      	mov	r8, r0
  403d1e:	9000      	str	r0, [sp, #0]
  403d20:	4683      	mov	fp, r0
  403d22:	4682      	mov	sl, r0
  403d24:	f1ba 0f00 	cmp.w	sl, #0
  403d28:	d02c      	beq.n	403d84 <__sfvwrite_r+0x1b4>
  403d2a:	9b00      	ldr	r3, [sp, #0]
  403d2c:	2b00      	cmp	r3, #0
  403d2e:	d050      	beq.n	403dd2 <__sfvwrite_r+0x202>
  403d30:	6820      	ldr	r0, [r4, #0]
  403d32:	6921      	ldr	r1, [r4, #16]
  403d34:	f8d4 e008 	ldr.w	lr, [r4, #8]
  403d38:	6962      	ldr	r2, [r4, #20]
  403d3a:	45d0      	cmp	r8, sl
  403d3c:	4643      	mov	r3, r8
  403d3e:	bf28      	it	cs
  403d40:	4653      	movcs	r3, sl
  403d42:	4288      	cmp	r0, r1
  403d44:	461f      	mov	r7, r3
  403d46:	d904      	bls.n	403d52 <__sfvwrite_r+0x182>
  403d48:	eb0e 0c02 	add.w	ip, lr, r2
  403d4c:	4563      	cmp	r3, ip
  403d4e:	f300 8092 	bgt.w	403e76 <__sfvwrite_r+0x2a6>
  403d52:	4293      	cmp	r3, r2
  403d54:	db20      	blt.n	403d98 <__sfvwrite_r+0x1c8>
  403d56:	4613      	mov	r3, r2
  403d58:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403d5a:	69e1      	ldr	r1, [r4, #28]
  403d5c:	4648      	mov	r0, r9
  403d5e:	465a      	mov	r2, fp
  403d60:	47b8      	blx	r7
  403d62:	1e07      	subs	r7, r0, #0
  403d64:	ddd1      	ble.n	403d0a <__sfvwrite_r+0x13a>
  403d66:	ebb8 0807 	subs.w	r8, r8, r7
  403d6a:	d025      	beq.n	403db8 <__sfvwrite_r+0x1e8>
  403d6c:	68b3      	ldr	r3, [r6, #8]
  403d6e:	1bdb      	subs	r3, r3, r7
  403d70:	44bb      	add	fp, r7
  403d72:	ebc7 0a0a 	rsb	sl, r7, sl
  403d76:	60b3      	str	r3, [r6, #8]
  403d78:	2b00      	cmp	r3, #0
  403d7a:	f43f af5a 	beq.w	403c32 <__sfvwrite_r+0x62>
  403d7e:	f1ba 0f00 	cmp.w	sl, #0
  403d82:	d1d2      	bne.n	403d2a <__sfvwrite_r+0x15a>
  403d84:	2300      	movs	r3, #0
  403d86:	f8d5 b000 	ldr.w	fp, [r5]
  403d8a:	f8d5 a004 	ldr.w	sl, [r5, #4]
  403d8e:	9300      	str	r3, [sp, #0]
  403d90:	3508      	adds	r5, #8
  403d92:	e7c7      	b.n	403d24 <__sfvwrite_r+0x154>
  403d94:	4638      	mov	r0, r7
  403d96:	e780      	b.n	403c9a <__sfvwrite_r+0xca>
  403d98:	461a      	mov	r2, r3
  403d9a:	4659      	mov	r1, fp
  403d9c:	9301      	str	r3, [sp, #4]
  403d9e:	f000 fa1d 	bl	4041dc <memmove>
  403da2:	68a2      	ldr	r2, [r4, #8]
  403da4:	6821      	ldr	r1, [r4, #0]
  403da6:	9b01      	ldr	r3, [sp, #4]
  403da8:	ebb8 0807 	subs.w	r8, r8, r7
  403dac:	eba2 0203 	sub.w	r2, r2, r3
  403db0:	440b      	add	r3, r1
  403db2:	60a2      	str	r2, [r4, #8]
  403db4:	6023      	str	r3, [r4, #0]
  403db6:	d1d9      	bne.n	403d6c <__sfvwrite_r+0x19c>
  403db8:	4648      	mov	r0, r9
  403dba:	4621      	mov	r1, r4
  403dbc:	f7fe f936 	bl	40202c <_fflush_r>
  403dc0:	2800      	cmp	r0, #0
  403dc2:	d1a2      	bne.n	403d0a <__sfvwrite_r+0x13a>
  403dc4:	f8cd 8000 	str.w	r8, [sp]
  403dc8:	e7d0      	b.n	403d6c <__sfvwrite_r+0x19c>
  403dca:	6820      	ldr	r0, [r4, #0]
  403dcc:	4647      	mov	r7, r8
  403dce:	46c2      	mov	sl, r8
  403dd0:	e757      	b.n	403c82 <__sfvwrite_r+0xb2>
  403dd2:	4658      	mov	r0, fp
  403dd4:	210a      	movs	r1, #10
  403dd6:	4652      	mov	r2, sl
  403dd8:	f000 f91c 	bl	404014 <memchr>
  403ddc:	2800      	cmp	r0, #0
  403dde:	d073      	beq.n	403ec8 <__sfvwrite_r+0x2f8>
  403de0:	3001      	adds	r0, #1
  403de2:	2301      	movs	r3, #1
  403de4:	ebcb 0800 	rsb	r8, fp, r0
  403de8:	9300      	str	r3, [sp, #0]
  403dea:	e7a1      	b.n	403d30 <__sfvwrite_r+0x160>
  403dec:	6967      	ldr	r7, [r4, #20]
  403dee:	6921      	ldr	r1, [r4, #16]
  403df0:	6823      	ldr	r3, [r4, #0]
  403df2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  403df6:	1a5b      	subs	r3, r3, r1
  403df8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  403dfc:	1c58      	adds	r0, r3, #1
  403dfe:	107f      	asrs	r7, r7, #1
  403e00:	4440      	add	r0, r8
  403e02:	4287      	cmp	r7, r0
  403e04:	463a      	mov	r2, r7
  403e06:	bf3c      	itt	cc
  403e08:	4607      	movcc	r7, r0
  403e0a:	463a      	movcc	r2, r7
  403e0c:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  403e10:	9300      	str	r3, [sp, #0]
  403e12:	d046      	beq.n	403ea2 <__sfvwrite_r+0x2d2>
  403e14:	4611      	mov	r1, r2
  403e16:	4648      	mov	r0, r9
  403e18:	f7fe fb44 	bl	4024a4 <_malloc_r>
  403e1c:	9b00      	ldr	r3, [sp, #0]
  403e1e:	4682      	mov	sl, r0
  403e20:	2800      	cmp	r0, #0
  403e22:	d059      	beq.n	403ed8 <__sfvwrite_r+0x308>
  403e24:	461a      	mov	r2, r3
  403e26:	6921      	ldr	r1, [r4, #16]
  403e28:	9300      	str	r3, [sp, #0]
  403e2a:	f000 f93d 	bl	4040a8 <memcpy>
  403e2e:	89a2      	ldrh	r2, [r4, #12]
  403e30:	9b00      	ldr	r3, [sp, #0]
  403e32:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  403e36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  403e3a:	81a2      	strh	r2, [r4, #12]
  403e3c:	eb0a 0003 	add.w	r0, sl, r3
  403e40:	1afb      	subs	r3, r7, r3
  403e42:	f8c4 a010 	str.w	sl, [r4, #16]
  403e46:	6167      	str	r7, [r4, #20]
  403e48:	6020      	str	r0, [r4, #0]
  403e4a:	60a3      	str	r3, [r4, #8]
  403e4c:	4647      	mov	r7, r8
  403e4e:	46c2      	mov	sl, r8
  403e50:	e717      	b.n	403c82 <__sfvwrite_r+0xb2>
  403e52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  403e56:	4543      	cmp	r3, r8
  403e58:	bf28      	it	cs
  403e5a:	4643      	movcs	r3, r8
  403e5c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403e5e:	fb93 f3f2 	sdiv	r3, r3, r2
  403e62:	4648      	mov	r0, r9
  403e64:	fb03 f302 	mul.w	r3, r3, r2
  403e68:	69e1      	ldr	r1, [r4, #28]
  403e6a:	465a      	mov	r2, fp
  403e6c:	47b8      	blx	r7
  403e6e:	2800      	cmp	r0, #0
  403e70:	f73f af13 	bgt.w	403c9a <__sfvwrite_r+0xca>
  403e74:	e749      	b.n	403d0a <__sfvwrite_r+0x13a>
  403e76:	4662      	mov	r2, ip
  403e78:	4659      	mov	r1, fp
  403e7a:	f8cd c004 	str.w	ip, [sp, #4]
  403e7e:	f000 f9ad 	bl	4041dc <memmove>
  403e82:	6823      	ldr	r3, [r4, #0]
  403e84:	f8dd c004 	ldr.w	ip, [sp, #4]
  403e88:	4463      	add	r3, ip
  403e8a:	6023      	str	r3, [r4, #0]
  403e8c:	4648      	mov	r0, r9
  403e8e:	4621      	mov	r1, r4
  403e90:	f7fe f8cc 	bl	40202c <_fflush_r>
  403e94:	f8dd c004 	ldr.w	ip, [sp, #4]
  403e98:	2800      	cmp	r0, #0
  403e9a:	f47f af36 	bne.w	403d0a <__sfvwrite_r+0x13a>
  403e9e:	4667      	mov	r7, ip
  403ea0:	e761      	b.n	403d66 <__sfvwrite_r+0x196>
  403ea2:	4648      	mov	r0, r9
  403ea4:	f000 fa12 	bl	4042cc <_realloc_r>
  403ea8:	9b00      	ldr	r3, [sp, #0]
  403eaa:	4682      	mov	sl, r0
  403eac:	2800      	cmp	r0, #0
  403eae:	d1c5      	bne.n	403e3c <__sfvwrite_r+0x26c>
  403eb0:	4648      	mov	r0, r9
  403eb2:	6921      	ldr	r1, [r4, #16]
  403eb4:	f7fe f9b8 	bl	402228 <_free_r>
  403eb8:	89a3      	ldrh	r3, [r4, #12]
  403eba:	220c      	movs	r2, #12
  403ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403ec0:	b29b      	uxth	r3, r3
  403ec2:	f8c9 2000 	str.w	r2, [r9]
  403ec6:	e721      	b.n	403d0c <__sfvwrite_r+0x13c>
  403ec8:	2301      	movs	r3, #1
  403eca:	f10a 0801 	add.w	r8, sl, #1
  403ece:	9300      	str	r3, [sp, #0]
  403ed0:	e72e      	b.n	403d30 <__sfvwrite_r+0x160>
  403ed2:	f04f 30ff 	mov.w	r0, #4294967295
  403ed6:	e6ad      	b.n	403c34 <__sfvwrite_r+0x64>
  403ed8:	230c      	movs	r3, #12
  403eda:	f8c9 3000 	str.w	r3, [r9]
  403ede:	89a3      	ldrh	r3, [r4, #12]
  403ee0:	e714      	b.n	403d0c <__sfvwrite_r+0x13c>
  403ee2:	bf00      	nop
  403ee4:	7ffffc00 	.word	0x7ffffc00

00403ee8 <__locale_charset>:
  403ee8:	4800      	ldr	r0, [pc, #0]	; (403eec <__locale_charset+0x4>)
  403eea:	4770      	bx	lr
  403eec:	20000844 	.word	0x20000844

00403ef0 <__locale_mb_cur_max>:
  403ef0:	4b01      	ldr	r3, [pc, #4]	; (403ef8 <__locale_mb_cur_max+0x8>)
  403ef2:	6818      	ldr	r0, [r3, #0]
  403ef4:	4770      	bx	lr
  403ef6:	bf00      	nop
  403ef8:	20000864 	.word	0x20000864

00403efc <_lseek_r>:
  403efc:	b570      	push	{r4, r5, r6, lr}
  403efe:	4c08      	ldr	r4, [pc, #32]	; (403f20 <_lseek_r+0x24>)
  403f00:	4606      	mov	r6, r0
  403f02:	2500      	movs	r5, #0
  403f04:	4608      	mov	r0, r1
  403f06:	4611      	mov	r1, r2
  403f08:	461a      	mov	r2, r3
  403f0a:	6025      	str	r5, [r4, #0]
  403f0c:	f7fc fcfc 	bl	400908 <_lseek>
  403f10:	1c43      	adds	r3, r0, #1
  403f12:	d000      	beq.n	403f16 <_lseek_r+0x1a>
  403f14:	bd70      	pop	{r4, r5, r6, pc}
  403f16:	6823      	ldr	r3, [r4, #0]
  403f18:	2b00      	cmp	r3, #0
  403f1a:	d0fb      	beq.n	403f14 <_lseek_r+0x18>
  403f1c:	6033      	str	r3, [r6, #0]
  403f1e:	bd70      	pop	{r4, r5, r6, pc}
  403f20:	20000b5c 	.word	0x20000b5c

00403f24 <__smakebuf_r>:
  403f24:	898b      	ldrh	r3, [r1, #12]
  403f26:	b29a      	uxth	r2, r3
  403f28:	f012 0f02 	tst.w	r2, #2
  403f2c:	d13c      	bne.n	403fa8 <__smakebuf_r+0x84>
  403f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
  403f30:	460c      	mov	r4, r1
  403f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f36:	2900      	cmp	r1, #0
  403f38:	b091      	sub	sp, #68	; 0x44
  403f3a:	4605      	mov	r5, r0
  403f3c:	db19      	blt.n	403f72 <__smakebuf_r+0x4e>
  403f3e:	aa01      	add	r2, sp, #4
  403f40:	f000 fcc6 	bl	4048d0 <_fstat_r>
  403f44:	2800      	cmp	r0, #0
  403f46:	db12      	blt.n	403f6e <__smakebuf_r+0x4a>
  403f48:	9b02      	ldr	r3, [sp, #8]
  403f4a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  403f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  403f52:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  403f56:	fab7 f787 	clz	r7, r7
  403f5a:	ea4f 1757 	mov.w	r7, r7, lsr #5
  403f5e:	d02a      	beq.n	403fb6 <__smakebuf_r+0x92>
  403f60:	89a3      	ldrh	r3, [r4, #12]
  403f62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403f66:	81a3      	strh	r3, [r4, #12]
  403f68:	f44f 6680 	mov.w	r6, #1024	; 0x400
  403f6c:	e00b      	b.n	403f86 <__smakebuf_r+0x62>
  403f6e:	89a3      	ldrh	r3, [r4, #12]
  403f70:	b29a      	uxth	r2, r3
  403f72:	f012 0f80 	tst.w	r2, #128	; 0x80
  403f76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403f7a:	81a3      	strh	r3, [r4, #12]
  403f7c:	bf0c      	ite	eq
  403f7e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  403f82:	2640      	movne	r6, #64	; 0x40
  403f84:	2700      	movs	r7, #0
  403f86:	4628      	mov	r0, r5
  403f88:	4631      	mov	r1, r6
  403f8a:	f7fe fa8b 	bl	4024a4 <_malloc_r>
  403f8e:	89a3      	ldrh	r3, [r4, #12]
  403f90:	b340      	cbz	r0, 403fe4 <__smakebuf_r+0xc0>
  403f92:	4a1a      	ldr	r2, [pc, #104]	; (403ffc <__smakebuf_r+0xd8>)
  403f94:	63ea      	str	r2, [r5, #60]	; 0x3c
  403f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403f9a:	81a3      	strh	r3, [r4, #12]
  403f9c:	6020      	str	r0, [r4, #0]
  403f9e:	6120      	str	r0, [r4, #16]
  403fa0:	6166      	str	r6, [r4, #20]
  403fa2:	b99f      	cbnz	r7, 403fcc <__smakebuf_r+0xa8>
  403fa4:	b011      	add	sp, #68	; 0x44
  403fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403fa8:	f101 0343 	add.w	r3, r1, #67	; 0x43
  403fac:	2201      	movs	r2, #1
  403fae:	600b      	str	r3, [r1, #0]
  403fb0:	610b      	str	r3, [r1, #16]
  403fb2:	614a      	str	r2, [r1, #20]
  403fb4:	4770      	bx	lr
  403fb6:	4b12      	ldr	r3, [pc, #72]	; (404000 <__smakebuf_r+0xdc>)
  403fb8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  403fba:	429a      	cmp	r2, r3
  403fbc:	d1d0      	bne.n	403f60 <__smakebuf_r+0x3c>
  403fbe:	89a3      	ldrh	r3, [r4, #12]
  403fc0:	f44f 6680 	mov.w	r6, #1024	; 0x400
  403fc4:	4333      	orrs	r3, r6
  403fc6:	81a3      	strh	r3, [r4, #12]
  403fc8:	64e6      	str	r6, [r4, #76]	; 0x4c
  403fca:	e7dc      	b.n	403f86 <__smakebuf_r+0x62>
  403fcc:	4628      	mov	r0, r5
  403fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403fd2:	f000 fc91 	bl	4048f8 <_isatty_r>
  403fd6:	2800      	cmp	r0, #0
  403fd8:	d0e4      	beq.n	403fa4 <__smakebuf_r+0x80>
  403fda:	89a3      	ldrh	r3, [r4, #12]
  403fdc:	f043 0301 	orr.w	r3, r3, #1
  403fe0:	81a3      	strh	r3, [r4, #12]
  403fe2:	e7df      	b.n	403fa4 <__smakebuf_r+0x80>
  403fe4:	059a      	lsls	r2, r3, #22
  403fe6:	d4dd      	bmi.n	403fa4 <__smakebuf_r+0x80>
  403fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403fec:	f043 0302 	orr.w	r3, r3, #2
  403ff0:	2101      	movs	r1, #1
  403ff2:	81a3      	strh	r3, [r4, #12]
  403ff4:	6022      	str	r2, [r4, #0]
  403ff6:	6122      	str	r2, [r4, #16]
  403ff8:	6161      	str	r1, [r4, #20]
  403ffa:	e7d3      	b.n	403fa4 <__smakebuf_r+0x80>
  403ffc:	0040207d 	.word	0x0040207d
  404000:	00402bf5 	.word	0x00402bf5

00404004 <malloc>:
  404004:	4b02      	ldr	r3, [pc, #8]	; (404010 <malloc+0xc>)
  404006:	4601      	mov	r1, r0
  404008:	6818      	ldr	r0, [r3, #0]
  40400a:	f7fe ba4b 	b.w	4024a4 <_malloc_r>
  40400e:	bf00      	nop
  404010:	20000430 	.word	0x20000430

00404014 <memchr>:
  404014:	0783      	lsls	r3, r0, #30
  404016:	b470      	push	{r4, r5, r6}
  404018:	b2c9      	uxtb	r1, r1
  40401a:	d040      	beq.n	40409e <memchr+0x8a>
  40401c:	1e54      	subs	r4, r2, #1
  40401e:	2a00      	cmp	r2, #0
  404020:	d03f      	beq.n	4040a2 <memchr+0x8e>
  404022:	7803      	ldrb	r3, [r0, #0]
  404024:	428b      	cmp	r3, r1
  404026:	bf18      	it	ne
  404028:	1c43      	addne	r3, r0, #1
  40402a:	d106      	bne.n	40403a <memchr+0x26>
  40402c:	e01d      	b.n	40406a <memchr+0x56>
  40402e:	b1f4      	cbz	r4, 40406e <memchr+0x5a>
  404030:	7802      	ldrb	r2, [r0, #0]
  404032:	428a      	cmp	r2, r1
  404034:	f104 34ff 	add.w	r4, r4, #4294967295
  404038:	d017      	beq.n	40406a <memchr+0x56>
  40403a:	f013 0f03 	tst.w	r3, #3
  40403e:	4618      	mov	r0, r3
  404040:	f103 0301 	add.w	r3, r3, #1
  404044:	d1f3      	bne.n	40402e <memchr+0x1a>
  404046:	2c03      	cmp	r4, #3
  404048:	d814      	bhi.n	404074 <memchr+0x60>
  40404a:	b184      	cbz	r4, 40406e <memchr+0x5a>
  40404c:	7803      	ldrb	r3, [r0, #0]
  40404e:	428b      	cmp	r3, r1
  404050:	d00b      	beq.n	40406a <memchr+0x56>
  404052:	1905      	adds	r5, r0, r4
  404054:	1c43      	adds	r3, r0, #1
  404056:	e002      	b.n	40405e <memchr+0x4a>
  404058:	7802      	ldrb	r2, [r0, #0]
  40405a:	428a      	cmp	r2, r1
  40405c:	d005      	beq.n	40406a <memchr+0x56>
  40405e:	42ab      	cmp	r3, r5
  404060:	4618      	mov	r0, r3
  404062:	f103 0301 	add.w	r3, r3, #1
  404066:	d1f7      	bne.n	404058 <memchr+0x44>
  404068:	2000      	movs	r0, #0
  40406a:	bc70      	pop	{r4, r5, r6}
  40406c:	4770      	bx	lr
  40406e:	4620      	mov	r0, r4
  404070:	bc70      	pop	{r4, r5, r6}
  404072:	4770      	bx	lr
  404074:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  404078:	4602      	mov	r2, r0
  40407a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40407e:	4610      	mov	r0, r2
  404080:	3204      	adds	r2, #4
  404082:	6803      	ldr	r3, [r0, #0]
  404084:	4073      	eors	r3, r6
  404086:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40408a:	ea25 0303 	bic.w	r3, r5, r3
  40408e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  404092:	d1da      	bne.n	40404a <memchr+0x36>
  404094:	3c04      	subs	r4, #4
  404096:	2c03      	cmp	r4, #3
  404098:	4610      	mov	r0, r2
  40409a:	d8f0      	bhi.n	40407e <memchr+0x6a>
  40409c:	e7d5      	b.n	40404a <memchr+0x36>
  40409e:	4614      	mov	r4, r2
  4040a0:	e7d1      	b.n	404046 <memchr+0x32>
  4040a2:	4610      	mov	r0, r2
  4040a4:	e7e1      	b.n	40406a <memchr+0x56>
  4040a6:	bf00      	nop

004040a8 <memcpy>:
  4040a8:	4684      	mov	ip, r0
  4040aa:	ea41 0300 	orr.w	r3, r1, r0
  4040ae:	f013 0303 	ands.w	r3, r3, #3
  4040b2:	d16d      	bne.n	404190 <memcpy+0xe8>
  4040b4:	3a40      	subs	r2, #64	; 0x40
  4040b6:	d341      	bcc.n	40413c <memcpy+0x94>
  4040b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040bc:	f840 3b04 	str.w	r3, [r0], #4
  4040c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040c4:	f840 3b04 	str.w	r3, [r0], #4
  4040c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040cc:	f840 3b04 	str.w	r3, [r0], #4
  4040d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040d4:	f840 3b04 	str.w	r3, [r0], #4
  4040d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040dc:	f840 3b04 	str.w	r3, [r0], #4
  4040e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040e4:	f840 3b04 	str.w	r3, [r0], #4
  4040e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040ec:	f840 3b04 	str.w	r3, [r0], #4
  4040f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040f4:	f840 3b04 	str.w	r3, [r0], #4
  4040f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040fc:	f840 3b04 	str.w	r3, [r0], #4
  404100:	f851 3b04 	ldr.w	r3, [r1], #4
  404104:	f840 3b04 	str.w	r3, [r0], #4
  404108:	f851 3b04 	ldr.w	r3, [r1], #4
  40410c:	f840 3b04 	str.w	r3, [r0], #4
  404110:	f851 3b04 	ldr.w	r3, [r1], #4
  404114:	f840 3b04 	str.w	r3, [r0], #4
  404118:	f851 3b04 	ldr.w	r3, [r1], #4
  40411c:	f840 3b04 	str.w	r3, [r0], #4
  404120:	f851 3b04 	ldr.w	r3, [r1], #4
  404124:	f840 3b04 	str.w	r3, [r0], #4
  404128:	f851 3b04 	ldr.w	r3, [r1], #4
  40412c:	f840 3b04 	str.w	r3, [r0], #4
  404130:	f851 3b04 	ldr.w	r3, [r1], #4
  404134:	f840 3b04 	str.w	r3, [r0], #4
  404138:	3a40      	subs	r2, #64	; 0x40
  40413a:	d2bd      	bcs.n	4040b8 <memcpy+0x10>
  40413c:	3230      	adds	r2, #48	; 0x30
  40413e:	d311      	bcc.n	404164 <memcpy+0xbc>
  404140:	f851 3b04 	ldr.w	r3, [r1], #4
  404144:	f840 3b04 	str.w	r3, [r0], #4
  404148:	f851 3b04 	ldr.w	r3, [r1], #4
  40414c:	f840 3b04 	str.w	r3, [r0], #4
  404150:	f851 3b04 	ldr.w	r3, [r1], #4
  404154:	f840 3b04 	str.w	r3, [r0], #4
  404158:	f851 3b04 	ldr.w	r3, [r1], #4
  40415c:	f840 3b04 	str.w	r3, [r0], #4
  404160:	3a10      	subs	r2, #16
  404162:	d2ed      	bcs.n	404140 <memcpy+0x98>
  404164:	320c      	adds	r2, #12
  404166:	d305      	bcc.n	404174 <memcpy+0xcc>
  404168:	f851 3b04 	ldr.w	r3, [r1], #4
  40416c:	f840 3b04 	str.w	r3, [r0], #4
  404170:	3a04      	subs	r2, #4
  404172:	d2f9      	bcs.n	404168 <memcpy+0xc0>
  404174:	3204      	adds	r2, #4
  404176:	d008      	beq.n	40418a <memcpy+0xe2>
  404178:	07d2      	lsls	r2, r2, #31
  40417a:	bf1c      	itt	ne
  40417c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404180:	f800 3b01 	strbne.w	r3, [r0], #1
  404184:	d301      	bcc.n	40418a <memcpy+0xe2>
  404186:	880b      	ldrh	r3, [r1, #0]
  404188:	8003      	strh	r3, [r0, #0]
  40418a:	4660      	mov	r0, ip
  40418c:	4770      	bx	lr
  40418e:	bf00      	nop
  404190:	2a08      	cmp	r2, #8
  404192:	d313      	bcc.n	4041bc <memcpy+0x114>
  404194:	078b      	lsls	r3, r1, #30
  404196:	d08d      	beq.n	4040b4 <memcpy+0xc>
  404198:	f010 0303 	ands.w	r3, r0, #3
  40419c:	d08a      	beq.n	4040b4 <memcpy+0xc>
  40419e:	f1c3 0304 	rsb	r3, r3, #4
  4041a2:	1ad2      	subs	r2, r2, r3
  4041a4:	07db      	lsls	r3, r3, #31
  4041a6:	bf1c      	itt	ne
  4041a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4041ac:	f800 3b01 	strbne.w	r3, [r0], #1
  4041b0:	d380      	bcc.n	4040b4 <memcpy+0xc>
  4041b2:	f831 3b02 	ldrh.w	r3, [r1], #2
  4041b6:	f820 3b02 	strh.w	r3, [r0], #2
  4041ba:	e77b      	b.n	4040b4 <memcpy+0xc>
  4041bc:	3a04      	subs	r2, #4
  4041be:	d3d9      	bcc.n	404174 <memcpy+0xcc>
  4041c0:	3a01      	subs	r2, #1
  4041c2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4041c6:	f800 3b01 	strb.w	r3, [r0], #1
  4041ca:	d2f9      	bcs.n	4041c0 <memcpy+0x118>
  4041cc:	780b      	ldrb	r3, [r1, #0]
  4041ce:	7003      	strb	r3, [r0, #0]
  4041d0:	784b      	ldrb	r3, [r1, #1]
  4041d2:	7043      	strb	r3, [r0, #1]
  4041d4:	788b      	ldrb	r3, [r1, #2]
  4041d6:	7083      	strb	r3, [r0, #2]
  4041d8:	4660      	mov	r0, ip
  4041da:	4770      	bx	lr

004041dc <memmove>:
  4041dc:	4288      	cmp	r0, r1
  4041de:	b5f0      	push	{r4, r5, r6, r7, lr}
  4041e0:	d90d      	bls.n	4041fe <memmove+0x22>
  4041e2:	188b      	adds	r3, r1, r2
  4041e4:	4298      	cmp	r0, r3
  4041e6:	d20a      	bcs.n	4041fe <memmove+0x22>
  4041e8:	1881      	adds	r1, r0, r2
  4041ea:	2a00      	cmp	r2, #0
  4041ec:	d054      	beq.n	404298 <memmove+0xbc>
  4041ee:	1a9a      	subs	r2, r3, r2
  4041f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4041f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4041f8:	4293      	cmp	r3, r2
  4041fa:	d1f9      	bne.n	4041f0 <memmove+0x14>
  4041fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4041fe:	2a0f      	cmp	r2, #15
  404200:	d948      	bls.n	404294 <memmove+0xb8>
  404202:	ea40 0301 	orr.w	r3, r0, r1
  404206:	079b      	lsls	r3, r3, #30
  404208:	d147      	bne.n	40429a <memmove+0xbe>
  40420a:	f100 0410 	add.w	r4, r0, #16
  40420e:	f101 0310 	add.w	r3, r1, #16
  404212:	4615      	mov	r5, r2
  404214:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404218:	f844 6c10 	str.w	r6, [r4, #-16]
  40421c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404220:	f844 6c0c 	str.w	r6, [r4, #-12]
  404224:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404228:	f844 6c08 	str.w	r6, [r4, #-8]
  40422c:	3d10      	subs	r5, #16
  40422e:	f853 6c04 	ldr.w	r6, [r3, #-4]
  404232:	f844 6c04 	str.w	r6, [r4, #-4]
  404236:	2d0f      	cmp	r5, #15
  404238:	f103 0310 	add.w	r3, r3, #16
  40423c:	f104 0410 	add.w	r4, r4, #16
  404240:	d8e8      	bhi.n	404214 <memmove+0x38>
  404242:	f1a2 0310 	sub.w	r3, r2, #16
  404246:	f023 030f 	bic.w	r3, r3, #15
  40424a:	f002 0e0f 	and.w	lr, r2, #15
  40424e:	3310      	adds	r3, #16
  404250:	f1be 0f03 	cmp.w	lr, #3
  404254:	4419      	add	r1, r3
  404256:	4403      	add	r3, r0
  404258:	d921      	bls.n	40429e <memmove+0xc2>
  40425a:	1f1e      	subs	r6, r3, #4
  40425c:	460d      	mov	r5, r1
  40425e:	4674      	mov	r4, lr
  404260:	3c04      	subs	r4, #4
  404262:	f855 7b04 	ldr.w	r7, [r5], #4
  404266:	f846 7f04 	str.w	r7, [r6, #4]!
  40426a:	2c03      	cmp	r4, #3
  40426c:	d8f8      	bhi.n	404260 <memmove+0x84>
  40426e:	f1ae 0404 	sub.w	r4, lr, #4
  404272:	f024 0403 	bic.w	r4, r4, #3
  404276:	3404      	adds	r4, #4
  404278:	4423      	add	r3, r4
  40427a:	4421      	add	r1, r4
  40427c:	f002 0203 	and.w	r2, r2, #3
  404280:	b152      	cbz	r2, 404298 <memmove+0xbc>
  404282:	3b01      	subs	r3, #1
  404284:	440a      	add	r2, r1
  404286:	f811 4b01 	ldrb.w	r4, [r1], #1
  40428a:	f803 4f01 	strb.w	r4, [r3, #1]!
  40428e:	4291      	cmp	r1, r2
  404290:	d1f9      	bne.n	404286 <memmove+0xaa>
  404292:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404294:	4603      	mov	r3, r0
  404296:	e7f3      	b.n	404280 <memmove+0xa4>
  404298:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40429a:	4603      	mov	r3, r0
  40429c:	e7f1      	b.n	404282 <memmove+0xa6>
  40429e:	4672      	mov	r2, lr
  4042a0:	e7ee      	b.n	404280 <memmove+0xa4>
  4042a2:	bf00      	nop

004042a4 <_read_r>:
  4042a4:	b570      	push	{r4, r5, r6, lr}
  4042a6:	4c08      	ldr	r4, [pc, #32]	; (4042c8 <_read_r+0x24>)
  4042a8:	4606      	mov	r6, r0
  4042aa:	2500      	movs	r5, #0
  4042ac:	4608      	mov	r0, r1
  4042ae:	4611      	mov	r1, r2
  4042b0:	461a      	mov	r2, r3
  4042b2:	6025      	str	r5, [r4, #0]
  4042b4:	f7fb ff6a 	bl	40018c <_read>
  4042b8:	1c43      	adds	r3, r0, #1
  4042ba:	d000      	beq.n	4042be <_read_r+0x1a>
  4042bc:	bd70      	pop	{r4, r5, r6, pc}
  4042be:	6823      	ldr	r3, [r4, #0]
  4042c0:	2b00      	cmp	r3, #0
  4042c2:	d0fb      	beq.n	4042bc <_read_r+0x18>
  4042c4:	6033      	str	r3, [r6, #0]
  4042c6:	bd70      	pop	{r4, r5, r6, pc}
  4042c8:	20000b5c 	.word	0x20000b5c

004042cc <_realloc_r>:
  4042cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4042d0:	4617      	mov	r7, r2
  4042d2:	b083      	sub	sp, #12
  4042d4:	460e      	mov	r6, r1
  4042d6:	2900      	cmp	r1, #0
  4042d8:	f000 80e7 	beq.w	4044aa <_realloc_r+0x1de>
  4042dc:	4681      	mov	r9, r0
  4042de:	f107 050b 	add.w	r5, r7, #11
  4042e2:	f7fe fbbf 	bl	402a64 <__malloc_lock>
  4042e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4042ea:	2d16      	cmp	r5, #22
  4042ec:	f023 0403 	bic.w	r4, r3, #3
  4042f0:	f1a6 0808 	sub.w	r8, r6, #8
  4042f4:	d84c      	bhi.n	404390 <_realloc_r+0xc4>
  4042f6:	2210      	movs	r2, #16
  4042f8:	4615      	mov	r5, r2
  4042fa:	42af      	cmp	r7, r5
  4042fc:	d84d      	bhi.n	40439a <_realloc_r+0xce>
  4042fe:	4294      	cmp	r4, r2
  404300:	f280 8084 	bge.w	40440c <_realloc_r+0x140>
  404304:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 4046b4 <_realloc_r+0x3e8>
  404308:	f8db 0008 	ldr.w	r0, [fp, #8]
  40430c:	eb08 0104 	add.w	r1, r8, r4
  404310:	4288      	cmp	r0, r1
  404312:	f000 80d6 	beq.w	4044c2 <_realloc_r+0x1f6>
  404316:	6848      	ldr	r0, [r1, #4]
  404318:	f020 0e01 	bic.w	lr, r0, #1
  40431c:	448e      	add	lr, r1
  40431e:	f8de e004 	ldr.w	lr, [lr, #4]
  404322:	f01e 0f01 	tst.w	lr, #1
  404326:	d13f      	bne.n	4043a8 <_realloc_r+0xdc>
  404328:	f020 0003 	bic.w	r0, r0, #3
  40432c:	4420      	add	r0, r4
  40432e:	4290      	cmp	r0, r2
  404330:	f280 80c1 	bge.w	4044b6 <_realloc_r+0x1ea>
  404334:	07db      	lsls	r3, r3, #31
  404336:	f100 808f 	bmi.w	404458 <_realloc_r+0x18c>
  40433a:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40433e:	ebc3 0a08 	rsb	sl, r3, r8
  404342:	f8da 3004 	ldr.w	r3, [sl, #4]
  404346:	f023 0303 	bic.w	r3, r3, #3
  40434a:	eb00 0e03 	add.w	lr, r0, r3
  40434e:	4596      	cmp	lr, r2
  404350:	db34      	blt.n	4043bc <_realloc_r+0xf0>
  404352:	68cb      	ldr	r3, [r1, #12]
  404354:	688a      	ldr	r2, [r1, #8]
  404356:	4657      	mov	r7, sl
  404358:	60d3      	str	r3, [r2, #12]
  40435a:	609a      	str	r2, [r3, #8]
  40435c:	f857 1f08 	ldr.w	r1, [r7, #8]!
  404360:	f8da 300c 	ldr.w	r3, [sl, #12]
  404364:	60cb      	str	r3, [r1, #12]
  404366:	1f22      	subs	r2, r4, #4
  404368:	2a24      	cmp	r2, #36	; 0x24
  40436a:	6099      	str	r1, [r3, #8]
  40436c:	f200 8136 	bhi.w	4045dc <_realloc_r+0x310>
  404370:	2a13      	cmp	r2, #19
  404372:	f240 80fd 	bls.w	404570 <_realloc_r+0x2a4>
  404376:	6833      	ldr	r3, [r6, #0]
  404378:	f8ca 3008 	str.w	r3, [sl, #8]
  40437c:	6873      	ldr	r3, [r6, #4]
  40437e:	f8ca 300c 	str.w	r3, [sl, #12]
  404382:	2a1b      	cmp	r2, #27
  404384:	f200 8140 	bhi.w	404608 <_realloc_r+0x33c>
  404388:	3608      	adds	r6, #8
  40438a:	f10a 0310 	add.w	r3, sl, #16
  40438e:	e0f0      	b.n	404572 <_realloc_r+0x2a6>
  404390:	f025 0507 	bic.w	r5, r5, #7
  404394:	2d00      	cmp	r5, #0
  404396:	462a      	mov	r2, r5
  404398:	daaf      	bge.n	4042fa <_realloc_r+0x2e>
  40439a:	230c      	movs	r3, #12
  40439c:	2000      	movs	r0, #0
  40439e:	f8c9 3000 	str.w	r3, [r9]
  4043a2:	b003      	add	sp, #12
  4043a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043a8:	07d9      	lsls	r1, r3, #31
  4043aa:	d455      	bmi.n	404458 <_realloc_r+0x18c>
  4043ac:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4043b0:	ebc3 0a08 	rsb	sl, r3, r8
  4043b4:	f8da 3004 	ldr.w	r3, [sl, #4]
  4043b8:	f023 0303 	bic.w	r3, r3, #3
  4043bc:	4423      	add	r3, r4
  4043be:	4293      	cmp	r3, r2
  4043c0:	db4a      	blt.n	404458 <_realloc_r+0x18c>
  4043c2:	4657      	mov	r7, sl
  4043c4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4043c8:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4043cc:	1f22      	subs	r2, r4, #4
  4043ce:	2a24      	cmp	r2, #36	; 0x24
  4043d0:	60c1      	str	r1, [r0, #12]
  4043d2:	6088      	str	r0, [r1, #8]
  4043d4:	f200 810e 	bhi.w	4045f4 <_realloc_r+0x328>
  4043d8:	2a13      	cmp	r2, #19
  4043da:	f240 8109 	bls.w	4045f0 <_realloc_r+0x324>
  4043de:	6831      	ldr	r1, [r6, #0]
  4043e0:	f8ca 1008 	str.w	r1, [sl, #8]
  4043e4:	6871      	ldr	r1, [r6, #4]
  4043e6:	f8ca 100c 	str.w	r1, [sl, #12]
  4043ea:	2a1b      	cmp	r2, #27
  4043ec:	f200 8121 	bhi.w	404632 <_realloc_r+0x366>
  4043f0:	3608      	adds	r6, #8
  4043f2:	f10a 0210 	add.w	r2, sl, #16
  4043f6:	6831      	ldr	r1, [r6, #0]
  4043f8:	6011      	str	r1, [r2, #0]
  4043fa:	6871      	ldr	r1, [r6, #4]
  4043fc:	6051      	str	r1, [r2, #4]
  4043fe:	68b1      	ldr	r1, [r6, #8]
  404400:	6091      	str	r1, [r2, #8]
  404402:	461c      	mov	r4, r3
  404404:	f8da 3004 	ldr.w	r3, [sl, #4]
  404408:	463e      	mov	r6, r7
  40440a:	46d0      	mov	r8, sl
  40440c:	1b62      	subs	r2, r4, r5
  40440e:	2a0f      	cmp	r2, #15
  404410:	f003 0301 	and.w	r3, r3, #1
  404414:	d80e      	bhi.n	404434 <_realloc_r+0x168>
  404416:	4323      	orrs	r3, r4
  404418:	4444      	add	r4, r8
  40441a:	f8c8 3004 	str.w	r3, [r8, #4]
  40441e:	6863      	ldr	r3, [r4, #4]
  404420:	f043 0301 	orr.w	r3, r3, #1
  404424:	6063      	str	r3, [r4, #4]
  404426:	4648      	mov	r0, r9
  404428:	f7fe fb1e 	bl	402a68 <__malloc_unlock>
  40442c:	4630      	mov	r0, r6
  40442e:	b003      	add	sp, #12
  404430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404434:	eb08 0105 	add.w	r1, r8, r5
  404438:	431d      	orrs	r5, r3
  40443a:	f042 0301 	orr.w	r3, r2, #1
  40443e:	440a      	add	r2, r1
  404440:	f8c8 5004 	str.w	r5, [r8, #4]
  404444:	604b      	str	r3, [r1, #4]
  404446:	6853      	ldr	r3, [r2, #4]
  404448:	f043 0301 	orr.w	r3, r3, #1
  40444c:	3108      	adds	r1, #8
  40444e:	6053      	str	r3, [r2, #4]
  404450:	4648      	mov	r0, r9
  404452:	f7fd fee9 	bl	402228 <_free_r>
  404456:	e7e6      	b.n	404426 <_realloc_r+0x15a>
  404458:	4639      	mov	r1, r7
  40445a:	4648      	mov	r0, r9
  40445c:	f7fe f822 	bl	4024a4 <_malloc_r>
  404460:	4607      	mov	r7, r0
  404462:	b1d8      	cbz	r0, 40449c <_realloc_r+0x1d0>
  404464:	f856 3c04 	ldr.w	r3, [r6, #-4]
  404468:	f023 0201 	bic.w	r2, r3, #1
  40446c:	4442      	add	r2, r8
  40446e:	f1a0 0108 	sub.w	r1, r0, #8
  404472:	4291      	cmp	r1, r2
  404474:	f000 80ac 	beq.w	4045d0 <_realloc_r+0x304>
  404478:	1f22      	subs	r2, r4, #4
  40447a:	2a24      	cmp	r2, #36	; 0x24
  40447c:	f200 8099 	bhi.w	4045b2 <_realloc_r+0x2e6>
  404480:	2a13      	cmp	r2, #19
  404482:	d86a      	bhi.n	40455a <_realloc_r+0x28e>
  404484:	4603      	mov	r3, r0
  404486:	4632      	mov	r2, r6
  404488:	6811      	ldr	r1, [r2, #0]
  40448a:	6019      	str	r1, [r3, #0]
  40448c:	6851      	ldr	r1, [r2, #4]
  40448e:	6059      	str	r1, [r3, #4]
  404490:	6892      	ldr	r2, [r2, #8]
  404492:	609a      	str	r2, [r3, #8]
  404494:	4631      	mov	r1, r6
  404496:	4648      	mov	r0, r9
  404498:	f7fd fec6 	bl	402228 <_free_r>
  40449c:	4648      	mov	r0, r9
  40449e:	f7fe fae3 	bl	402a68 <__malloc_unlock>
  4044a2:	4638      	mov	r0, r7
  4044a4:	b003      	add	sp, #12
  4044a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044aa:	4611      	mov	r1, r2
  4044ac:	b003      	add	sp, #12
  4044ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044b2:	f7fd bff7 	b.w	4024a4 <_malloc_r>
  4044b6:	68ca      	ldr	r2, [r1, #12]
  4044b8:	6889      	ldr	r1, [r1, #8]
  4044ba:	4604      	mov	r4, r0
  4044bc:	60ca      	str	r2, [r1, #12]
  4044be:	6091      	str	r1, [r2, #8]
  4044c0:	e7a4      	b.n	40440c <_realloc_r+0x140>
  4044c2:	6841      	ldr	r1, [r0, #4]
  4044c4:	f021 0103 	bic.w	r1, r1, #3
  4044c8:	4421      	add	r1, r4
  4044ca:	f105 0010 	add.w	r0, r5, #16
  4044ce:	4281      	cmp	r1, r0
  4044d0:	da5b      	bge.n	40458a <_realloc_r+0x2be>
  4044d2:	07db      	lsls	r3, r3, #31
  4044d4:	d4c0      	bmi.n	404458 <_realloc_r+0x18c>
  4044d6:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4044da:	ebc3 0a08 	rsb	sl, r3, r8
  4044de:	f8da 3004 	ldr.w	r3, [sl, #4]
  4044e2:	f023 0303 	bic.w	r3, r3, #3
  4044e6:	eb01 0c03 	add.w	ip, r1, r3
  4044ea:	4560      	cmp	r0, ip
  4044ec:	f73f af66 	bgt.w	4043bc <_realloc_r+0xf0>
  4044f0:	4657      	mov	r7, sl
  4044f2:	f8da 300c 	ldr.w	r3, [sl, #12]
  4044f6:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4044fa:	1f22      	subs	r2, r4, #4
  4044fc:	2a24      	cmp	r2, #36	; 0x24
  4044fe:	60cb      	str	r3, [r1, #12]
  404500:	6099      	str	r1, [r3, #8]
  404502:	f200 80b8 	bhi.w	404676 <_realloc_r+0x3aa>
  404506:	2a13      	cmp	r2, #19
  404508:	f240 80a9 	bls.w	40465e <_realloc_r+0x392>
  40450c:	6833      	ldr	r3, [r6, #0]
  40450e:	f8ca 3008 	str.w	r3, [sl, #8]
  404512:	6873      	ldr	r3, [r6, #4]
  404514:	f8ca 300c 	str.w	r3, [sl, #12]
  404518:	2a1b      	cmp	r2, #27
  40451a:	f200 80b5 	bhi.w	404688 <_realloc_r+0x3bc>
  40451e:	3608      	adds	r6, #8
  404520:	f10a 0310 	add.w	r3, sl, #16
  404524:	6832      	ldr	r2, [r6, #0]
  404526:	601a      	str	r2, [r3, #0]
  404528:	6872      	ldr	r2, [r6, #4]
  40452a:	605a      	str	r2, [r3, #4]
  40452c:	68b2      	ldr	r2, [r6, #8]
  40452e:	609a      	str	r2, [r3, #8]
  404530:	eb0a 0205 	add.w	r2, sl, r5
  404534:	ebc5 030c 	rsb	r3, r5, ip
  404538:	f043 0301 	orr.w	r3, r3, #1
  40453c:	f8cb 2008 	str.w	r2, [fp, #8]
  404540:	6053      	str	r3, [r2, #4]
  404542:	f8da 3004 	ldr.w	r3, [sl, #4]
  404546:	f003 0301 	and.w	r3, r3, #1
  40454a:	431d      	orrs	r5, r3
  40454c:	4648      	mov	r0, r9
  40454e:	f8ca 5004 	str.w	r5, [sl, #4]
  404552:	f7fe fa89 	bl	402a68 <__malloc_unlock>
  404556:	4638      	mov	r0, r7
  404558:	e769      	b.n	40442e <_realloc_r+0x162>
  40455a:	6833      	ldr	r3, [r6, #0]
  40455c:	6003      	str	r3, [r0, #0]
  40455e:	6873      	ldr	r3, [r6, #4]
  404560:	6043      	str	r3, [r0, #4]
  404562:	2a1b      	cmp	r2, #27
  404564:	d829      	bhi.n	4045ba <_realloc_r+0x2ee>
  404566:	f100 0308 	add.w	r3, r0, #8
  40456a:	f106 0208 	add.w	r2, r6, #8
  40456e:	e78b      	b.n	404488 <_realloc_r+0x1bc>
  404570:	463b      	mov	r3, r7
  404572:	6832      	ldr	r2, [r6, #0]
  404574:	601a      	str	r2, [r3, #0]
  404576:	6872      	ldr	r2, [r6, #4]
  404578:	605a      	str	r2, [r3, #4]
  40457a:	68b2      	ldr	r2, [r6, #8]
  40457c:	609a      	str	r2, [r3, #8]
  40457e:	463e      	mov	r6, r7
  404580:	4674      	mov	r4, lr
  404582:	f8da 3004 	ldr.w	r3, [sl, #4]
  404586:	46d0      	mov	r8, sl
  404588:	e740      	b.n	40440c <_realloc_r+0x140>
  40458a:	eb08 0205 	add.w	r2, r8, r5
  40458e:	1b4b      	subs	r3, r1, r5
  404590:	f043 0301 	orr.w	r3, r3, #1
  404594:	f8cb 2008 	str.w	r2, [fp, #8]
  404598:	6053      	str	r3, [r2, #4]
  40459a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40459e:	f003 0301 	and.w	r3, r3, #1
  4045a2:	431d      	orrs	r5, r3
  4045a4:	4648      	mov	r0, r9
  4045a6:	f846 5c04 	str.w	r5, [r6, #-4]
  4045aa:	f7fe fa5d 	bl	402a68 <__malloc_unlock>
  4045ae:	4630      	mov	r0, r6
  4045b0:	e73d      	b.n	40442e <_realloc_r+0x162>
  4045b2:	4631      	mov	r1, r6
  4045b4:	f7ff fe12 	bl	4041dc <memmove>
  4045b8:	e76c      	b.n	404494 <_realloc_r+0x1c8>
  4045ba:	68b3      	ldr	r3, [r6, #8]
  4045bc:	6083      	str	r3, [r0, #8]
  4045be:	68f3      	ldr	r3, [r6, #12]
  4045c0:	60c3      	str	r3, [r0, #12]
  4045c2:	2a24      	cmp	r2, #36	; 0x24
  4045c4:	d02c      	beq.n	404620 <_realloc_r+0x354>
  4045c6:	f100 0310 	add.w	r3, r0, #16
  4045ca:	f106 0210 	add.w	r2, r6, #16
  4045ce:	e75b      	b.n	404488 <_realloc_r+0x1bc>
  4045d0:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4045d4:	f022 0203 	bic.w	r2, r2, #3
  4045d8:	4414      	add	r4, r2
  4045da:	e717      	b.n	40440c <_realloc_r+0x140>
  4045dc:	4631      	mov	r1, r6
  4045de:	4638      	mov	r0, r7
  4045e0:	4674      	mov	r4, lr
  4045e2:	463e      	mov	r6, r7
  4045e4:	f7ff fdfa 	bl	4041dc <memmove>
  4045e8:	46d0      	mov	r8, sl
  4045ea:	f8da 3004 	ldr.w	r3, [sl, #4]
  4045ee:	e70d      	b.n	40440c <_realloc_r+0x140>
  4045f0:	463a      	mov	r2, r7
  4045f2:	e700      	b.n	4043f6 <_realloc_r+0x12a>
  4045f4:	4631      	mov	r1, r6
  4045f6:	4638      	mov	r0, r7
  4045f8:	461c      	mov	r4, r3
  4045fa:	463e      	mov	r6, r7
  4045fc:	f7ff fdee 	bl	4041dc <memmove>
  404600:	46d0      	mov	r8, sl
  404602:	f8da 3004 	ldr.w	r3, [sl, #4]
  404606:	e701      	b.n	40440c <_realloc_r+0x140>
  404608:	68b3      	ldr	r3, [r6, #8]
  40460a:	f8ca 3010 	str.w	r3, [sl, #16]
  40460e:	68f3      	ldr	r3, [r6, #12]
  404610:	f8ca 3014 	str.w	r3, [sl, #20]
  404614:	2a24      	cmp	r2, #36	; 0x24
  404616:	d018      	beq.n	40464a <_realloc_r+0x37e>
  404618:	3610      	adds	r6, #16
  40461a:	f10a 0318 	add.w	r3, sl, #24
  40461e:	e7a8      	b.n	404572 <_realloc_r+0x2a6>
  404620:	6933      	ldr	r3, [r6, #16]
  404622:	6103      	str	r3, [r0, #16]
  404624:	6973      	ldr	r3, [r6, #20]
  404626:	6143      	str	r3, [r0, #20]
  404628:	f106 0218 	add.w	r2, r6, #24
  40462c:	f100 0318 	add.w	r3, r0, #24
  404630:	e72a      	b.n	404488 <_realloc_r+0x1bc>
  404632:	68b1      	ldr	r1, [r6, #8]
  404634:	f8ca 1010 	str.w	r1, [sl, #16]
  404638:	68f1      	ldr	r1, [r6, #12]
  40463a:	f8ca 1014 	str.w	r1, [sl, #20]
  40463e:	2a24      	cmp	r2, #36	; 0x24
  404640:	d00f      	beq.n	404662 <_realloc_r+0x396>
  404642:	3610      	adds	r6, #16
  404644:	f10a 0218 	add.w	r2, sl, #24
  404648:	e6d5      	b.n	4043f6 <_realloc_r+0x12a>
  40464a:	6933      	ldr	r3, [r6, #16]
  40464c:	f8ca 3018 	str.w	r3, [sl, #24]
  404650:	6973      	ldr	r3, [r6, #20]
  404652:	f8ca 301c 	str.w	r3, [sl, #28]
  404656:	3618      	adds	r6, #24
  404658:	f10a 0320 	add.w	r3, sl, #32
  40465c:	e789      	b.n	404572 <_realloc_r+0x2a6>
  40465e:	463b      	mov	r3, r7
  404660:	e760      	b.n	404524 <_realloc_r+0x258>
  404662:	6932      	ldr	r2, [r6, #16]
  404664:	f8ca 2018 	str.w	r2, [sl, #24]
  404668:	6972      	ldr	r2, [r6, #20]
  40466a:	f8ca 201c 	str.w	r2, [sl, #28]
  40466e:	3618      	adds	r6, #24
  404670:	f10a 0220 	add.w	r2, sl, #32
  404674:	e6bf      	b.n	4043f6 <_realloc_r+0x12a>
  404676:	4631      	mov	r1, r6
  404678:	4638      	mov	r0, r7
  40467a:	f8cd c004 	str.w	ip, [sp, #4]
  40467e:	f7ff fdad 	bl	4041dc <memmove>
  404682:	f8dd c004 	ldr.w	ip, [sp, #4]
  404686:	e753      	b.n	404530 <_realloc_r+0x264>
  404688:	68b3      	ldr	r3, [r6, #8]
  40468a:	f8ca 3010 	str.w	r3, [sl, #16]
  40468e:	68f3      	ldr	r3, [r6, #12]
  404690:	f8ca 3014 	str.w	r3, [sl, #20]
  404694:	2a24      	cmp	r2, #36	; 0x24
  404696:	d003      	beq.n	4046a0 <_realloc_r+0x3d4>
  404698:	3610      	adds	r6, #16
  40469a:	f10a 0318 	add.w	r3, sl, #24
  40469e:	e741      	b.n	404524 <_realloc_r+0x258>
  4046a0:	6933      	ldr	r3, [r6, #16]
  4046a2:	f8ca 3018 	str.w	r3, [sl, #24]
  4046a6:	6973      	ldr	r3, [r6, #20]
  4046a8:	f8ca 301c 	str.w	r3, [sl, #28]
  4046ac:	3618      	adds	r6, #24
  4046ae:	f10a 0320 	add.w	r3, sl, #32
  4046b2:	e737      	b.n	404524 <_realloc_r+0x258>
  4046b4:	20000434 	.word	0x20000434

004046b8 <strlen>:
  4046b8:	f020 0103 	bic.w	r1, r0, #3
  4046bc:	f010 0003 	ands.w	r0, r0, #3
  4046c0:	f1c0 0000 	rsb	r0, r0, #0
  4046c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4046c8:	f100 0c04 	add.w	ip, r0, #4
  4046cc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  4046d0:	f06f 0200 	mvn.w	r2, #0
  4046d4:	bf1c      	itt	ne
  4046d6:	fa22 f20c 	lsrne.w	r2, r2, ip
  4046da:	4313      	orrne	r3, r2
  4046dc:	f04f 0c01 	mov.w	ip, #1
  4046e0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4046e4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4046e8:	eba3 020c 	sub.w	r2, r3, ip
  4046ec:	ea22 0203 	bic.w	r2, r2, r3
  4046f0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4046f4:	bf04      	itt	eq
  4046f6:	f851 3b04 	ldreq.w	r3, [r1], #4
  4046fa:	3004      	addeq	r0, #4
  4046fc:	d0f4      	beq.n	4046e8 <strlen+0x30>
  4046fe:	f1c2 0100 	rsb	r1, r2, #0
  404702:	ea02 0201 	and.w	r2, r2, r1
  404706:	fab2 f282 	clz	r2, r2
  40470a:	f1c2 021f 	rsb	r2, r2, #31
  40470e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404712:	4770      	bx	lr

00404714 <__swbuf_r>:
  404714:	b570      	push	{r4, r5, r6, lr}
  404716:	460d      	mov	r5, r1
  404718:	4614      	mov	r4, r2
  40471a:	4606      	mov	r6, r0
  40471c:	b110      	cbz	r0, 404724 <__swbuf_r+0x10>
  40471e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404720:	2b00      	cmp	r3, #0
  404722:	d048      	beq.n	4047b6 <__swbuf_r+0xa2>
  404724:	89a2      	ldrh	r2, [r4, #12]
  404726:	69a3      	ldr	r3, [r4, #24]
  404728:	60a3      	str	r3, [r4, #8]
  40472a:	b291      	uxth	r1, r2
  40472c:	0708      	lsls	r0, r1, #28
  40472e:	d538      	bpl.n	4047a2 <__swbuf_r+0x8e>
  404730:	6923      	ldr	r3, [r4, #16]
  404732:	2b00      	cmp	r3, #0
  404734:	d035      	beq.n	4047a2 <__swbuf_r+0x8e>
  404736:	0489      	lsls	r1, r1, #18
  404738:	b2ed      	uxtb	r5, r5
  40473a:	d515      	bpl.n	404768 <__swbuf_r+0x54>
  40473c:	6822      	ldr	r2, [r4, #0]
  40473e:	6961      	ldr	r1, [r4, #20]
  404740:	1ad3      	subs	r3, r2, r3
  404742:	428b      	cmp	r3, r1
  404744:	da1c      	bge.n	404780 <__swbuf_r+0x6c>
  404746:	3301      	adds	r3, #1
  404748:	68a1      	ldr	r1, [r4, #8]
  40474a:	1c50      	adds	r0, r2, #1
  40474c:	3901      	subs	r1, #1
  40474e:	60a1      	str	r1, [r4, #8]
  404750:	6020      	str	r0, [r4, #0]
  404752:	7015      	strb	r5, [r2, #0]
  404754:	6962      	ldr	r2, [r4, #20]
  404756:	429a      	cmp	r2, r3
  404758:	d01a      	beq.n	404790 <__swbuf_r+0x7c>
  40475a:	89a3      	ldrh	r3, [r4, #12]
  40475c:	07db      	lsls	r3, r3, #31
  40475e:	d501      	bpl.n	404764 <__swbuf_r+0x50>
  404760:	2d0a      	cmp	r5, #10
  404762:	d015      	beq.n	404790 <__swbuf_r+0x7c>
  404764:	4628      	mov	r0, r5
  404766:	bd70      	pop	{r4, r5, r6, pc}
  404768:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40476a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40476e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404772:	81a2      	strh	r2, [r4, #12]
  404774:	6822      	ldr	r2, [r4, #0]
  404776:	6661      	str	r1, [r4, #100]	; 0x64
  404778:	6961      	ldr	r1, [r4, #20]
  40477a:	1ad3      	subs	r3, r2, r3
  40477c:	428b      	cmp	r3, r1
  40477e:	dbe2      	blt.n	404746 <__swbuf_r+0x32>
  404780:	4630      	mov	r0, r6
  404782:	4621      	mov	r1, r4
  404784:	f7fd fc52 	bl	40202c <_fflush_r>
  404788:	b940      	cbnz	r0, 40479c <__swbuf_r+0x88>
  40478a:	6822      	ldr	r2, [r4, #0]
  40478c:	2301      	movs	r3, #1
  40478e:	e7db      	b.n	404748 <__swbuf_r+0x34>
  404790:	4630      	mov	r0, r6
  404792:	4621      	mov	r1, r4
  404794:	f7fd fc4a 	bl	40202c <_fflush_r>
  404798:	2800      	cmp	r0, #0
  40479a:	d0e3      	beq.n	404764 <__swbuf_r+0x50>
  40479c:	f04f 30ff 	mov.w	r0, #4294967295
  4047a0:	bd70      	pop	{r4, r5, r6, pc}
  4047a2:	4630      	mov	r0, r6
  4047a4:	4621      	mov	r1, r4
  4047a6:	f7ff f8cd 	bl	403944 <__swsetup_r>
  4047aa:	2800      	cmp	r0, #0
  4047ac:	d1f6      	bne.n	40479c <__swbuf_r+0x88>
  4047ae:	89a2      	ldrh	r2, [r4, #12]
  4047b0:	6923      	ldr	r3, [r4, #16]
  4047b2:	b291      	uxth	r1, r2
  4047b4:	e7bf      	b.n	404736 <__swbuf_r+0x22>
  4047b6:	f7fd fcdf 	bl	402178 <__sinit>
  4047ba:	e7b3      	b.n	404724 <__swbuf_r+0x10>

004047bc <_wcrtomb_r>:
  4047bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4047c0:	4605      	mov	r5, r0
  4047c2:	b086      	sub	sp, #24
  4047c4:	461e      	mov	r6, r3
  4047c6:	460c      	mov	r4, r1
  4047c8:	b1a1      	cbz	r1, 4047f4 <_wcrtomb_r+0x38>
  4047ca:	4b10      	ldr	r3, [pc, #64]	; (40480c <_wcrtomb_r+0x50>)
  4047cc:	4617      	mov	r7, r2
  4047ce:	f8d3 8000 	ldr.w	r8, [r3]
  4047d2:	f7ff fb89 	bl	403ee8 <__locale_charset>
  4047d6:	9600      	str	r6, [sp, #0]
  4047d8:	4603      	mov	r3, r0
  4047da:	4621      	mov	r1, r4
  4047dc:	463a      	mov	r2, r7
  4047de:	4628      	mov	r0, r5
  4047e0:	47c0      	blx	r8
  4047e2:	1c43      	adds	r3, r0, #1
  4047e4:	d103      	bne.n	4047ee <_wcrtomb_r+0x32>
  4047e6:	2200      	movs	r2, #0
  4047e8:	238a      	movs	r3, #138	; 0x8a
  4047ea:	6032      	str	r2, [r6, #0]
  4047ec:	602b      	str	r3, [r5, #0]
  4047ee:	b006      	add	sp, #24
  4047f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4047f4:	4b05      	ldr	r3, [pc, #20]	; (40480c <_wcrtomb_r+0x50>)
  4047f6:	681f      	ldr	r7, [r3, #0]
  4047f8:	f7ff fb76 	bl	403ee8 <__locale_charset>
  4047fc:	9600      	str	r6, [sp, #0]
  4047fe:	4603      	mov	r3, r0
  404800:	4622      	mov	r2, r4
  404802:	4628      	mov	r0, r5
  404804:	a903      	add	r1, sp, #12
  404806:	47b8      	blx	r7
  404808:	e7eb      	b.n	4047e2 <_wcrtomb_r+0x26>
  40480a:	bf00      	nop
  40480c:	20000868 	.word	0x20000868

00404810 <__ascii_wctomb>:
  404810:	b121      	cbz	r1, 40481c <__ascii_wctomb+0xc>
  404812:	2aff      	cmp	r2, #255	; 0xff
  404814:	d804      	bhi.n	404820 <__ascii_wctomb+0x10>
  404816:	700a      	strb	r2, [r1, #0]
  404818:	2001      	movs	r0, #1
  40481a:	4770      	bx	lr
  40481c:	4608      	mov	r0, r1
  40481e:	4770      	bx	lr
  404820:	238a      	movs	r3, #138	; 0x8a
  404822:	6003      	str	r3, [r0, #0]
  404824:	f04f 30ff 	mov.w	r0, #4294967295
  404828:	4770      	bx	lr
  40482a:	bf00      	nop

0040482c <__register_exitproc>:
  40482c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404830:	4c25      	ldr	r4, [pc, #148]	; (4048c8 <__register_exitproc+0x9c>)
  404832:	6825      	ldr	r5, [r4, #0]
  404834:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  404838:	4606      	mov	r6, r0
  40483a:	4688      	mov	r8, r1
  40483c:	4692      	mov	sl, r2
  40483e:	4699      	mov	r9, r3
  404840:	b3cc      	cbz	r4, 4048b6 <__register_exitproc+0x8a>
  404842:	6860      	ldr	r0, [r4, #4]
  404844:	281f      	cmp	r0, #31
  404846:	dc18      	bgt.n	40487a <__register_exitproc+0x4e>
  404848:	1c43      	adds	r3, r0, #1
  40484a:	b17e      	cbz	r6, 40486c <__register_exitproc+0x40>
  40484c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  404850:	2101      	movs	r1, #1
  404852:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  404856:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  40485a:	fa01 f200 	lsl.w	r2, r1, r0
  40485e:	4317      	orrs	r7, r2
  404860:	2e02      	cmp	r6, #2
  404862:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  404866:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40486a:	d01e      	beq.n	4048aa <__register_exitproc+0x7e>
  40486c:	3002      	adds	r0, #2
  40486e:	6063      	str	r3, [r4, #4]
  404870:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  404874:	2000      	movs	r0, #0
  404876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40487a:	4b14      	ldr	r3, [pc, #80]	; (4048cc <__register_exitproc+0xa0>)
  40487c:	b303      	cbz	r3, 4048c0 <__register_exitproc+0x94>
  40487e:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404882:	f7ff fbbf 	bl	404004 <malloc>
  404886:	4604      	mov	r4, r0
  404888:	b1d0      	cbz	r0, 4048c0 <__register_exitproc+0x94>
  40488a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40488e:	2700      	movs	r7, #0
  404890:	e880 0088 	stmia.w	r0, {r3, r7}
  404894:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404898:	4638      	mov	r0, r7
  40489a:	2301      	movs	r3, #1
  40489c:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4048a0:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4048a4:	2e00      	cmp	r6, #0
  4048a6:	d0e1      	beq.n	40486c <__register_exitproc+0x40>
  4048a8:	e7d0      	b.n	40484c <__register_exitproc+0x20>
  4048aa:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4048ae:	430a      	orrs	r2, r1
  4048b0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4048b4:	e7da      	b.n	40486c <__register_exitproc+0x40>
  4048b6:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4048ba:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4048be:	e7c0      	b.n	404842 <__register_exitproc+0x16>
  4048c0:	f04f 30ff 	mov.w	r0, #4294967295
  4048c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4048c8:	004050ec 	.word	0x004050ec
  4048cc:	00404005 	.word	0x00404005

004048d0 <_fstat_r>:
  4048d0:	b538      	push	{r3, r4, r5, lr}
  4048d2:	4c08      	ldr	r4, [pc, #32]	; (4048f4 <_fstat_r+0x24>)
  4048d4:	2300      	movs	r3, #0
  4048d6:	4605      	mov	r5, r0
  4048d8:	4608      	mov	r0, r1
  4048da:	4611      	mov	r1, r2
  4048dc:	6023      	str	r3, [r4, #0]
  4048de:	f7fc f80b 	bl	4008f8 <_fstat>
  4048e2:	1c43      	adds	r3, r0, #1
  4048e4:	d000      	beq.n	4048e8 <_fstat_r+0x18>
  4048e6:	bd38      	pop	{r3, r4, r5, pc}
  4048e8:	6823      	ldr	r3, [r4, #0]
  4048ea:	2b00      	cmp	r3, #0
  4048ec:	d0fb      	beq.n	4048e6 <_fstat_r+0x16>
  4048ee:	602b      	str	r3, [r5, #0]
  4048f0:	bd38      	pop	{r3, r4, r5, pc}
  4048f2:	bf00      	nop
  4048f4:	20000b5c 	.word	0x20000b5c

004048f8 <_isatty_r>:
  4048f8:	b538      	push	{r3, r4, r5, lr}
  4048fa:	4c07      	ldr	r4, [pc, #28]	; (404918 <_isatty_r+0x20>)
  4048fc:	2300      	movs	r3, #0
  4048fe:	4605      	mov	r5, r0
  404900:	4608      	mov	r0, r1
  404902:	6023      	str	r3, [r4, #0]
  404904:	f7fb fffe 	bl	400904 <_isatty>
  404908:	1c43      	adds	r3, r0, #1
  40490a:	d000      	beq.n	40490e <_isatty_r+0x16>
  40490c:	bd38      	pop	{r3, r4, r5, pc}
  40490e:	6823      	ldr	r3, [r4, #0]
  404910:	2b00      	cmp	r3, #0
  404912:	d0fb      	beq.n	40490c <_isatty_r+0x14>
  404914:	602b      	str	r3, [r5, #0]
  404916:	bd38      	pop	{r3, r4, r5, pc}
  404918:	20000b5c 	.word	0x20000b5c

0040491c <__aeabi_uldivmod>:
  40491c:	b953      	cbnz	r3, 404934 <__aeabi_uldivmod+0x18>
  40491e:	b94a      	cbnz	r2, 404934 <__aeabi_uldivmod+0x18>
  404920:	2900      	cmp	r1, #0
  404922:	bf08      	it	eq
  404924:	2800      	cmpeq	r0, #0
  404926:	bf1c      	itt	ne
  404928:	f04f 31ff 	movne.w	r1, #4294967295
  40492c:	f04f 30ff 	movne.w	r0, #4294967295
  404930:	f000 b83c 	b.w	4049ac <__aeabi_idiv0>
  404934:	b082      	sub	sp, #8
  404936:	46ec      	mov	ip, sp
  404938:	e92d 5000 	stmdb	sp!, {ip, lr}
  40493c:	f000 f81e 	bl	40497c <__gnu_uldivmod_helper>
  404940:	f8dd e004 	ldr.w	lr, [sp, #4]
  404944:	b002      	add	sp, #8
  404946:	bc0c      	pop	{r2, r3}
  404948:	4770      	bx	lr
  40494a:	bf00      	nop

0040494c <__gnu_ldivmod_helper>:
  40494c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404950:	9c06      	ldr	r4, [sp, #24]
  404952:	4615      	mov	r5, r2
  404954:	4606      	mov	r6, r0
  404956:	460f      	mov	r7, r1
  404958:	4698      	mov	r8, r3
  40495a:	f000 f829 	bl	4049b0 <__divdi3>
  40495e:	fb05 f301 	mul.w	r3, r5, r1
  404962:	fb00 3808 	mla	r8, r0, r8, r3
  404966:	fba5 2300 	umull	r2, r3, r5, r0
  40496a:	1ab2      	subs	r2, r6, r2
  40496c:	4443      	add	r3, r8
  40496e:	eb67 0303 	sbc.w	r3, r7, r3
  404972:	e9c4 2300 	strd	r2, r3, [r4]
  404976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40497a:	bf00      	nop

0040497c <__gnu_uldivmod_helper>:
  40497c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404980:	9c06      	ldr	r4, [sp, #24]
  404982:	4690      	mov	r8, r2
  404984:	4606      	mov	r6, r0
  404986:	460f      	mov	r7, r1
  404988:	461d      	mov	r5, r3
  40498a:	f000 f95f 	bl	404c4c <__udivdi3>
  40498e:	fb00 f505 	mul.w	r5, r0, r5
  404992:	fba0 2308 	umull	r2, r3, r0, r8
  404996:	fb08 5501 	mla	r5, r8, r1, r5
  40499a:	1ab2      	subs	r2, r6, r2
  40499c:	442b      	add	r3, r5
  40499e:	eb67 0303 	sbc.w	r3, r7, r3
  4049a2:	e9c4 2300 	strd	r2, r3, [r4]
  4049a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4049aa:	bf00      	nop

004049ac <__aeabi_idiv0>:
  4049ac:	4770      	bx	lr
  4049ae:	bf00      	nop

004049b0 <__divdi3>:
  4049b0:	2900      	cmp	r1, #0
  4049b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4049b6:	f2c0 80a6 	blt.w	404b06 <__divdi3+0x156>
  4049ba:	2600      	movs	r6, #0
  4049bc:	2b00      	cmp	r3, #0
  4049be:	f2c0 809c 	blt.w	404afa <__divdi3+0x14a>
  4049c2:	4688      	mov	r8, r1
  4049c4:	4694      	mov	ip, r2
  4049c6:	469e      	mov	lr, r3
  4049c8:	4615      	mov	r5, r2
  4049ca:	4604      	mov	r4, r0
  4049cc:	460f      	mov	r7, r1
  4049ce:	2b00      	cmp	r3, #0
  4049d0:	d13d      	bne.n	404a4e <__divdi3+0x9e>
  4049d2:	428a      	cmp	r2, r1
  4049d4:	d959      	bls.n	404a8a <__divdi3+0xda>
  4049d6:	fab2 f382 	clz	r3, r2
  4049da:	b13b      	cbz	r3, 4049ec <__divdi3+0x3c>
  4049dc:	f1c3 0220 	rsb	r2, r3, #32
  4049e0:	409f      	lsls	r7, r3
  4049e2:	fa20 f202 	lsr.w	r2, r0, r2
  4049e6:	409d      	lsls	r5, r3
  4049e8:	4317      	orrs	r7, r2
  4049ea:	409c      	lsls	r4, r3
  4049ec:	0c29      	lsrs	r1, r5, #16
  4049ee:	0c22      	lsrs	r2, r4, #16
  4049f0:	fbb7 fef1 	udiv	lr, r7, r1
  4049f4:	b2a8      	uxth	r0, r5
  4049f6:	fb01 771e 	mls	r7, r1, lr, r7
  4049fa:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  4049fe:	fb00 f30e 	mul.w	r3, r0, lr
  404a02:	42bb      	cmp	r3, r7
  404a04:	d90a      	bls.n	404a1c <__divdi3+0x6c>
  404a06:	197f      	adds	r7, r7, r5
  404a08:	f10e 32ff 	add.w	r2, lr, #4294967295
  404a0c:	f080 8105 	bcs.w	404c1a <__divdi3+0x26a>
  404a10:	42bb      	cmp	r3, r7
  404a12:	f240 8102 	bls.w	404c1a <__divdi3+0x26a>
  404a16:	f1ae 0e02 	sub.w	lr, lr, #2
  404a1a:	442f      	add	r7, r5
  404a1c:	1aff      	subs	r7, r7, r3
  404a1e:	b2a4      	uxth	r4, r4
  404a20:	fbb7 f3f1 	udiv	r3, r7, r1
  404a24:	fb01 7713 	mls	r7, r1, r3, r7
  404a28:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  404a2c:	fb00 f003 	mul.w	r0, r0, r3
  404a30:	42b8      	cmp	r0, r7
  404a32:	d908      	bls.n	404a46 <__divdi3+0x96>
  404a34:	197f      	adds	r7, r7, r5
  404a36:	f103 32ff 	add.w	r2, r3, #4294967295
  404a3a:	f080 80f0 	bcs.w	404c1e <__divdi3+0x26e>
  404a3e:	42b8      	cmp	r0, r7
  404a40:	f240 80ed 	bls.w	404c1e <__divdi3+0x26e>
  404a44:	3b02      	subs	r3, #2
  404a46:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  404a4a:	2200      	movs	r2, #0
  404a4c:	e003      	b.n	404a56 <__divdi3+0xa6>
  404a4e:	428b      	cmp	r3, r1
  404a50:	d90f      	bls.n	404a72 <__divdi3+0xc2>
  404a52:	2200      	movs	r2, #0
  404a54:	4613      	mov	r3, r2
  404a56:	1c34      	adds	r4, r6, #0
  404a58:	bf18      	it	ne
  404a5a:	2401      	movne	r4, #1
  404a5c:	4260      	negs	r0, r4
  404a5e:	f04f 0500 	mov.w	r5, #0
  404a62:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  404a66:	4058      	eors	r0, r3
  404a68:	4051      	eors	r1, r2
  404a6a:	1900      	adds	r0, r0, r4
  404a6c:	4169      	adcs	r1, r5
  404a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404a72:	fab3 f283 	clz	r2, r3
  404a76:	2a00      	cmp	r2, #0
  404a78:	f040 8086 	bne.w	404b88 <__divdi3+0x1d8>
  404a7c:	428b      	cmp	r3, r1
  404a7e:	d302      	bcc.n	404a86 <__divdi3+0xd6>
  404a80:	4584      	cmp	ip, r0
  404a82:	f200 80db 	bhi.w	404c3c <__divdi3+0x28c>
  404a86:	2301      	movs	r3, #1
  404a88:	e7e5      	b.n	404a56 <__divdi3+0xa6>
  404a8a:	b912      	cbnz	r2, 404a92 <__divdi3+0xe2>
  404a8c:	2301      	movs	r3, #1
  404a8e:	fbb3 f5f2 	udiv	r5, r3, r2
  404a92:	fab5 f085 	clz	r0, r5
  404a96:	2800      	cmp	r0, #0
  404a98:	d13b      	bne.n	404b12 <__divdi3+0x162>
  404a9a:	1b78      	subs	r0, r7, r5
  404a9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  404aa0:	fa1f fc85 	uxth.w	ip, r5
  404aa4:	2201      	movs	r2, #1
  404aa6:	fbb0 f8fe 	udiv	r8, r0, lr
  404aaa:	0c21      	lsrs	r1, r4, #16
  404aac:	fb0e 0718 	mls	r7, lr, r8, r0
  404ab0:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  404ab4:	fb0c f308 	mul.w	r3, ip, r8
  404ab8:	42bb      	cmp	r3, r7
  404aba:	d907      	bls.n	404acc <__divdi3+0x11c>
  404abc:	197f      	adds	r7, r7, r5
  404abe:	f108 31ff 	add.w	r1, r8, #4294967295
  404ac2:	d202      	bcs.n	404aca <__divdi3+0x11a>
  404ac4:	42bb      	cmp	r3, r7
  404ac6:	f200 80bd 	bhi.w	404c44 <__divdi3+0x294>
  404aca:	4688      	mov	r8, r1
  404acc:	1aff      	subs	r7, r7, r3
  404ace:	b2a4      	uxth	r4, r4
  404ad0:	fbb7 f3fe 	udiv	r3, r7, lr
  404ad4:	fb0e 7713 	mls	r7, lr, r3, r7
  404ad8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  404adc:	fb0c fc03 	mul.w	ip, ip, r3
  404ae0:	45bc      	cmp	ip, r7
  404ae2:	d907      	bls.n	404af4 <__divdi3+0x144>
  404ae4:	197f      	adds	r7, r7, r5
  404ae6:	f103 31ff 	add.w	r1, r3, #4294967295
  404aea:	d202      	bcs.n	404af2 <__divdi3+0x142>
  404aec:	45bc      	cmp	ip, r7
  404aee:	f200 80a7 	bhi.w	404c40 <__divdi3+0x290>
  404af2:	460b      	mov	r3, r1
  404af4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  404af8:	e7ad      	b.n	404a56 <__divdi3+0xa6>
  404afa:	4252      	negs	r2, r2
  404afc:	ea6f 0606 	mvn.w	r6, r6
  404b00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404b04:	e75d      	b.n	4049c2 <__divdi3+0x12>
  404b06:	4240      	negs	r0, r0
  404b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404b0c:	f04f 36ff 	mov.w	r6, #4294967295
  404b10:	e754      	b.n	4049bc <__divdi3+0xc>
  404b12:	f1c0 0220 	rsb	r2, r0, #32
  404b16:	fa24 f102 	lsr.w	r1, r4, r2
  404b1a:	fa07 f300 	lsl.w	r3, r7, r0
  404b1e:	4085      	lsls	r5, r0
  404b20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  404b24:	40d7      	lsrs	r7, r2
  404b26:	4319      	orrs	r1, r3
  404b28:	fbb7 f2fe 	udiv	r2, r7, lr
  404b2c:	0c0b      	lsrs	r3, r1, #16
  404b2e:	fb0e 7712 	mls	r7, lr, r2, r7
  404b32:	fa1f fc85 	uxth.w	ip, r5
  404b36:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  404b3a:	fb0c f702 	mul.w	r7, ip, r2
  404b3e:	429f      	cmp	r7, r3
  404b40:	fa04 f400 	lsl.w	r4, r4, r0
  404b44:	d907      	bls.n	404b56 <__divdi3+0x1a6>
  404b46:	195b      	adds	r3, r3, r5
  404b48:	f102 30ff 	add.w	r0, r2, #4294967295
  404b4c:	d274      	bcs.n	404c38 <__divdi3+0x288>
  404b4e:	429f      	cmp	r7, r3
  404b50:	d972      	bls.n	404c38 <__divdi3+0x288>
  404b52:	3a02      	subs	r2, #2
  404b54:	442b      	add	r3, r5
  404b56:	1bdf      	subs	r7, r3, r7
  404b58:	b289      	uxth	r1, r1
  404b5a:	fbb7 f8fe 	udiv	r8, r7, lr
  404b5e:	fb0e 7318 	mls	r3, lr, r8, r7
  404b62:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  404b66:	fb0c f708 	mul.w	r7, ip, r8
  404b6a:	429f      	cmp	r7, r3
  404b6c:	d908      	bls.n	404b80 <__divdi3+0x1d0>
  404b6e:	195b      	adds	r3, r3, r5
  404b70:	f108 31ff 	add.w	r1, r8, #4294967295
  404b74:	d25c      	bcs.n	404c30 <__divdi3+0x280>
  404b76:	429f      	cmp	r7, r3
  404b78:	d95a      	bls.n	404c30 <__divdi3+0x280>
  404b7a:	f1a8 0802 	sub.w	r8, r8, #2
  404b7e:	442b      	add	r3, r5
  404b80:	1bd8      	subs	r0, r3, r7
  404b82:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  404b86:	e78e      	b.n	404aa6 <__divdi3+0xf6>
  404b88:	f1c2 0320 	rsb	r3, r2, #32
  404b8c:	fa2c f103 	lsr.w	r1, ip, r3
  404b90:	fa0e fe02 	lsl.w	lr, lr, r2
  404b94:	fa20 f703 	lsr.w	r7, r0, r3
  404b98:	ea41 0e0e 	orr.w	lr, r1, lr
  404b9c:	fa08 f002 	lsl.w	r0, r8, r2
  404ba0:	fa28 f103 	lsr.w	r1, r8, r3
  404ba4:	ea4f 451e 	mov.w	r5, lr, lsr #16
  404ba8:	4338      	orrs	r0, r7
  404baa:	fbb1 f8f5 	udiv	r8, r1, r5
  404bae:	0c03      	lsrs	r3, r0, #16
  404bb0:	fb05 1118 	mls	r1, r5, r8, r1
  404bb4:	fa1f f78e 	uxth.w	r7, lr
  404bb8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  404bbc:	fb07 f308 	mul.w	r3, r7, r8
  404bc0:	428b      	cmp	r3, r1
  404bc2:	fa0c fc02 	lsl.w	ip, ip, r2
  404bc6:	d909      	bls.n	404bdc <__divdi3+0x22c>
  404bc8:	eb11 010e 	adds.w	r1, r1, lr
  404bcc:	f108 39ff 	add.w	r9, r8, #4294967295
  404bd0:	d230      	bcs.n	404c34 <__divdi3+0x284>
  404bd2:	428b      	cmp	r3, r1
  404bd4:	d92e      	bls.n	404c34 <__divdi3+0x284>
  404bd6:	f1a8 0802 	sub.w	r8, r8, #2
  404bda:	4471      	add	r1, lr
  404bdc:	1ac9      	subs	r1, r1, r3
  404bde:	b280      	uxth	r0, r0
  404be0:	fbb1 f3f5 	udiv	r3, r1, r5
  404be4:	fb05 1113 	mls	r1, r5, r3, r1
  404be8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404bec:	fb07 f703 	mul.w	r7, r7, r3
  404bf0:	428f      	cmp	r7, r1
  404bf2:	d908      	bls.n	404c06 <__divdi3+0x256>
  404bf4:	eb11 010e 	adds.w	r1, r1, lr
  404bf8:	f103 30ff 	add.w	r0, r3, #4294967295
  404bfc:	d216      	bcs.n	404c2c <__divdi3+0x27c>
  404bfe:	428f      	cmp	r7, r1
  404c00:	d914      	bls.n	404c2c <__divdi3+0x27c>
  404c02:	3b02      	subs	r3, #2
  404c04:	4471      	add	r1, lr
  404c06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  404c0a:	1bc9      	subs	r1, r1, r7
  404c0c:	fba3 890c 	umull	r8, r9, r3, ip
  404c10:	4549      	cmp	r1, r9
  404c12:	d309      	bcc.n	404c28 <__divdi3+0x278>
  404c14:	d005      	beq.n	404c22 <__divdi3+0x272>
  404c16:	2200      	movs	r2, #0
  404c18:	e71d      	b.n	404a56 <__divdi3+0xa6>
  404c1a:	4696      	mov	lr, r2
  404c1c:	e6fe      	b.n	404a1c <__divdi3+0x6c>
  404c1e:	4613      	mov	r3, r2
  404c20:	e711      	b.n	404a46 <__divdi3+0x96>
  404c22:	4094      	lsls	r4, r2
  404c24:	4544      	cmp	r4, r8
  404c26:	d2f6      	bcs.n	404c16 <__divdi3+0x266>
  404c28:	3b01      	subs	r3, #1
  404c2a:	e7f4      	b.n	404c16 <__divdi3+0x266>
  404c2c:	4603      	mov	r3, r0
  404c2e:	e7ea      	b.n	404c06 <__divdi3+0x256>
  404c30:	4688      	mov	r8, r1
  404c32:	e7a5      	b.n	404b80 <__divdi3+0x1d0>
  404c34:	46c8      	mov	r8, r9
  404c36:	e7d1      	b.n	404bdc <__divdi3+0x22c>
  404c38:	4602      	mov	r2, r0
  404c3a:	e78c      	b.n	404b56 <__divdi3+0x1a6>
  404c3c:	4613      	mov	r3, r2
  404c3e:	e70a      	b.n	404a56 <__divdi3+0xa6>
  404c40:	3b02      	subs	r3, #2
  404c42:	e757      	b.n	404af4 <__divdi3+0x144>
  404c44:	f1a8 0802 	sub.w	r8, r8, #2
  404c48:	442f      	add	r7, r5
  404c4a:	e73f      	b.n	404acc <__divdi3+0x11c>

00404c4c <__udivdi3>:
  404c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404c50:	2b00      	cmp	r3, #0
  404c52:	d144      	bne.n	404cde <__udivdi3+0x92>
  404c54:	428a      	cmp	r2, r1
  404c56:	4615      	mov	r5, r2
  404c58:	4604      	mov	r4, r0
  404c5a:	d94f      	bls.n	404cfc <__udivdi3+0xb0>
  404c5c:	fab2 f782 	clz	r7, r2
  404c60:	460e      	mov	r6, r1
  404c62:	b14f      	cbz	r7, 404c78 <__udivdi3+0x2c>
  404c64:	f1c7 0320 	rsb	r3, r7, #32
  404c68:	40b9      	lsls	r1, r7
  404c6a:	fa20 f603 	lsr.w	r6, r0, r3
  404c6e:	fa02 f507 	lsl.w	r5, r2, r7
  404c72:	430e      	orrs	r6, r1
  404c74:	fa00 f407 	lsl.w	r4, r0, r7
  404c78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  404c7c:	0c23      	lsrs	r3, r4, #16
  404c7e:	fbb6 f0fe 	udiv	r0, r6, lr
  404c82:	b2af      	uxth	r7, r5
  404c84:	fb0e 6110 	mls	r1, lr, r0, r6
  404c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  404c8c:	fb07 f100 	mul.w	r1, r7, r0
  404c90:	4299      	cmp	r1, r3
  404c92:	d909      	bls.n	404ca8 <__udivdi3+0x5c>
  404c94:	195b      	adds	r3, r3, r5
  404c96:	f100 32ff 	add.w	r2, r0, #4294967295
  404c9a:	f080 80ec 	bcs.w	404e76 <__udivdi3+0x22a>
  404c9e:	4299      	cmp	r1, r3
  404ca0:	f240 80e9 	bls.w	404e76 <__udivdi3+0x22a>
  404ca4:	3802      	subs	r0, #2
  404ca6:	442b      	add	r3, r5
  404ca8:	1a5a      	subs	r2, r3, r1
  404caa:	b2a4      	uxth	r4, r4
  404cac:	fbb2 f3fe 	udiv	r3, r2, lr
  404cb0:	fb0e 2213 	mls	r2, lr, r3, r2
  404cb4:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  404cb8:	fb07 f703 	mul.w	r7, r7, r3
  404cbc:	4297      	cmp	r7, r2
  404cbe:	d908      	bls.n	404cd2 <__udivdi3+0x86>
  404cc0:	1952      	adds	r2, r2, r5
  404cc2:	f103 31ff 	add.w	r1, r3, #4294967295
  404cc6:	f080 80d8 	bcs.w	404e7a <__udivdi3+0x22e>
  404cca:	4297      	cmp	r7, r2
  404ccc:	f240 80d5 	bls.w	404e7a <__udivdi3+0x22e>
  404cd0:	3b02      	subs	r3, #2
  404cd2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  404cd6:	2600      	movs	r6, #0
  404cd8:	4631      	mov	r1, r6
  404cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404cde:	428b      	cmp	r3, r1
  404ce0:	d847      	bhi.n	404d72 <__udivdi3+0x126>
  404ce2:	fab3 f683 	clz	r6, r3
  404ce6:	2e00      	cmp	r6, #0
  404ce8:	d148      	bne.n	404d7c <__udivdi3+0x130>
  404cea:	428b      	cmp	r3, r1
  404cec:	d302      	bcc.n	404cf4 <__udivdi3+0xa8>
  404cee:	4282      	cmp	r2, r0
  404cf0:	f200 80cd 	bhi.w	404e8e <__udivdi3+0x242>
  404cf4:	2001      	movs	r0, #1
  404cf6:	4631      	mov	r1, r6
  404cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404cfc:	b912      	cbnz	r2, 404d04 <__udivdi3+0xb8>
  404cfe:	2501      	movs	r5, #1
  404d00:	fbb5 f5f2 	udiv	r5, r5, r2
  404d04:	fab5 f885 	clz	r8, r5
  404d08:	f1b8 0f00 	cmp.w	r8, #0
  404d0c:	d177      	bne.n	404dfe <__udivdi3+0x1b2>
  404d0e:	1b4a      	subs	r2, r1, r5
  404d10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  404d14:	b2af      	uxth	r7, r5
  404d16:	2601      	movs	r6, #1
  404d18:	fbb2 f0fe 	udiv	r0, r2, lr
  404d1c:	0c23      	lsrs	r3, r4, #16
  404d1e:	fb0e 2110 	mls	r1, lr, r0, r2
  404d22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  404d26:	fb07 f300 	mul.w	r3, r7, r0
  404d2a:	428b      	cmp	r3, r1
  404d2c:	d907      	bls.n	404d3e <__udivdi3+0xf2>
  404d2e:	1949      	adds	r1, r1, r5
  404d30:	f100 32ff 	add.w	r2, r0, #4294967295
  404d34:	d202      	bcs.n	404d3c <__udivdi3+0xf0>
  404d36:	428b      	cmp	r3, r1
  404d38:	f200 80ba 	bhi.w	404eb0 <__udivdi3+0x264>
  404d3c:	4610      	mov	r0, r2
  404d3e:	1ac9      	subs	r1, r1, r3
  404d40:	b2a4      	uxth	r4, r4
  404d42:	fbb1 f3fe 	udiv	r3, r1, lr
  404d46:	fb0e 1113 	mls	r1, lr, r3, r1
  404d4a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  404d4e:	fb07 f703 	mul.w	r7, r7, r3
  404d52:	42a7      	cmp	r7, r4
  404d54:	d908      	bls.n	404d68 <__udivdi3+0x11c>
  404d56:	1964      	adds	r4, r4, r5
  404d58:	f103 32ff 	add.w	r2, r3, #4294967295
  404d5c:	f080 808f 	bcs.w	404e7e <__udivdi3+0x232>
  404d60:	42a7      	cmp	r7, r4
  404d62:	f240 808c 	bls.w	404e7e <__udivdi3+0x232>
  404d66:	3b02      	subs	r3, #2
  404d68:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  404d6c:	4631      	mov	r1, r6
  404d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404d72:	2600      	movs	r6, #0
  404d74:	4630      	mov	r0, r6
  404d76:	4631      	mov	r1, r6
  404d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404d7c:	f1c6 0420 	rsb	r4, r6, #32
  404d80:	fa22 f504 	lsr.w	r5, r2, r4
  404d84:	40b3      	lsls	r3, r6
  404d86:	432b      	orrs	r3, r5
  404d88:	fa20 fc04 	lsr.w	ip, r0, r4
  404d8c:	fa01 f706 	lsl.w	r7, r1, r6
  404d90:	fa21 f504 	lsr.w	r5, r1, r4
  404d94:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  404d98:	ea4c 0707 	orr.w	r7, ip, r7
  404d9c:	fbb5 f8fe 	udiv	r8, r5, lr
  404da0:	0c39      	lsrs	r1, r7, #16
  404da2:	fb0e 5518 	mls	r5, lr, r8, r5
  404da6:	fa1f fc83 	uxth.w	ip, r3
  404daa:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  404dae:	fb0c f108 	mul.w	r1, ip, r8
  404db2:	42a9      	cmp	r1, r5
  404db4:	fa02 f206 	lsl.w	r2, r2, r6
  404db8:	d904      	bls.n	404dc4 <__udivdi3+0x178>
  404dba:	18ed      	adds	r5, r5, r3
  404dbc:	f108 34ff 	add.w	r4, r8, #4294967295
  404dc0:	d367      	bcc.n	404e92 <__udivdi3+0x246>
  404dc2:	46a0      	mov	r8, r4
  404dc4:	1a6d      	subs	r5, r5, r1
  404dc6:	b2bf      	uxth	r7, r7
  404dc8:	fbb5 f4fe 	udiv	r4, r5, lr
  404dcc:	fb0e 5514 	mls	r5, lr, r4, r5
  404dd0:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  404dd4:	fb0c fc04 	mul.w	ip, ip, r4
  404dd8:	458c      	cmp	ip, r1
  404dda:	d904      	bls.n	404de6 <__udivdi3+0x19a>
  404ddc:	18c9      	adds	r1, r1, r3
  404dde:	f104 35ff 	add.w	r5, r4, #4294967295
  404de2:	d35c      	bcc.n	404e9e <__udivdi3+0x252>
  404de4:	462c      	mov	r4, r5
  404de6:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  404dea:	ebcc 0101 	rsb	r1, ip, r1
  404dee:	fba4 2302 	umull	r2, r3, r4, r2
  404df2:	4299      	cmp	r1, r3
  404df4:	d348      	bcc.n	404e88 <__udivdi3+0x23c>
  404df6:	d044      	beq.n	404e82 <__udivdi3+0x236>
  404df8:	4620      	mov	r0, r4
  404dfa:	2600      	movs	r6, #0
  404dfc:	e76c      	b.n	404cd8 <__udivdi3+0x8c>
  404dfe:	f1c8 0420 	rsb	r4, r8, #32
  404e02:	fa01 f308 	lsl.w	r3, r1, r8
  404e06:	fa05 f508 	lsl.w	r5, r5, r8
  404e0a:	fa20 f704 	lsr.w	r7, r0, r4
  404e0e:	40e1      	lsrs	r1, r4
  404e10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  404e14:	431f      	orrs	r7, r3
  404e16:	fbb1 f6fe 	udiv	r6, r1, lr
  404e1a:	0c3a      	lsrs	r2, r7, #16
  404e1c:	fb0e 1116 	mls	r1, lr, r6, r1
  404e20:	fa1f fc85 	uxth.w	ip, r5
  404e24:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  404e28:	fb0c f206 	mul.w	r2, ip, r6
  404e2c:	429a      	cmp	r2, r3
  404e2e:	fa00 f408 	lsl.w	r4, r0, r8
  404e32:	d907      	bls.n	404e44 <__udivdi3+0x1f8>
  404e34:	195b      	adds	r3, r3, r5
  404e36:	f106 31ff 	add.w	r1, r6, #4294967295
  404e3a:	d237      	bcs.n	404eac <__udivdi3+0x260>
  404e3c:	429a      	cmp	r2, r3
  404e3e:	d935      	bls.n	404eac <__udivdi3+0x260>
  404e40:	3e02      	subs	r6, #2
  404e42:	442b      	add	r3, r5
  404e44:	1a9b      	subs	r3, r3, r2
  404e46:	b2bf      	uxth	r7, r7
  404e48:	fbb3 f0fe 	udiv	r0, r3, lr
  404e4c:	fb0e 3310 	mls	r3, lr, r0, r3
  404e50:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  404e54:	fb0c f100 	mul.w	r1, ip, r0
  404e58:	4299      	cmp	r1, r3
  404e5a:	d907      	bls.n	404e6c <__udivdi3+0x220>
  404e5c:	195b      	adds	r3, r3, r5
  404e5e:	f100 32ff 	add.w	r2, r0, #4294967295
  404e62:	d221      	bcs.n	404ea8 <__udivdi3+0x25c>
  404e64:	4299      	cmp	r1, r3
  404e66:	d91f      	bls.n	404ea8 <__udivdi3+0x25c>
  404e68:	3802      	subs	r0, #2
  404e6a:	442b      	add	r3, r5
  404e6c:	1a5a      	subs	r2, r3, r1
  404e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  404e72:	4667      	mov	r7, ip
  404e74:	e750      	b.n	404d18 <__udivdi3+0xcc>
  404e76:	4610      	mov	r0, r2
  404e78:	e716      	b.n	404ca8 <__udivdi3+0x5c>
  404e7a:	460b      	mov	r3, r1
  404e7c:	e729      	b.n	404cd2 <__udivdi3+0x86>
  404e7e:	4613      	mov	r3, r2
  404e80:	e772      	b.n	404d68 <__udivdi3+0x11c>
  404e82:	40b0      	lsls	r0, r6
  404e84:	4290      	cmp	r0, r2
  404e86:	d2b7      	bcs.n	404df8 <__udivdi3+0x1ac>
  404e88:	1e60      	subs	r0, r4, #1
  404e8a:	2600      	movs	r6, #0
  404e8c:	e724      	b.n	404cd8 <__udivdi3+0x8c>
  404e8e:	4630      	mov	r0, r6
  404e90:	e722      	b.n	404cd8 <__udivdi3+0x8c>
  404e92:	42a9      	cmp	r1, r5
  404e94:	d995      	bls.n	404dc2 <__udivdi3+0x176>
  404e96:	f1a8 0802 	sub.w	r8, r8, #2
  404e9a:	441d      	add	r5, r3
  404e9c:	e792      	b.n	404dc4 <__udivdi3+0x178>
  404e9e:	458c      	cmp	ip, r1
  404ea0:	d9a0      	bls.n	404de4 <__udivdi3+0x198>
  404ea2:	3c02      	subs	r4, #2
  404ea4:	4419      	add	r1, r3
  404ea6:	e79e      	b.n	404de6 <__udivdi3+0x19a>
  404ea8:	4610      	mov	r0, r2
  404eaa:	e7df      	b.n	404e6c <__udivdi3+0x220>
  404eac:	460e      	mov	r6, r1
  404eae:	e7c9      	b.n	404e44 <__udivdi3+0x1f8>
  404eb0:	3802      	subs	r0, #2
  404eb2:	4429      	add	r1, r5
  404eb4:	e743      	b.n	404d3e <__udivdi3+0xf2>
  404eb6:	bf00      	nop
  404eb8:	51202d2d 	.word	0x51202d2d
  404ebc:	63756f74 	.word	0x63756f74
  404ec0:	72502068 	.word	0x72502068
  404ec4:	63656a6f 	.word	0x63656a6f
  404ec8:	2d2d2074 	.word	0x2d2d2074
  404ecc:	2d2d0a0d 	.word	0x2d2d0a0d
  404ed0:	4d415320 	.word	0x4d415320
  404ed4:	452d5334 	.word	0x452d5334
  404ed8:	2d20324b 	.word	0x2d20324b
  404edc:	2d0a0d2d 	.word	0x2d0a0d2d
  404ee0:	6f43202d 	.word	0x6f43202d
  404ee4:	6c69706d 	.word	0x6c69706d
  404ee8:	203a6465 	.word	0x203a6465
  404eec:	206e754a 	.word	0x206e754a
  404ef0:	32203120 	.word	0x32203120
  404ef4:	20363130 	.word	0x20363130
  404ef8:	323a3731 	.word	0x323a3731
  404efc:	35343a36 	.word	0x35343a36
  404f00:	0d2d2d20 	.word	0x0d2d2d20
  404f04:	00000000 	.word	0x00000000
  404f08:	666e6f43 	.word	0x666e6f43
  404f0c:	72756769 	.word	0x72756769
  404f10:	79732065 	.word	0x79732065
  404f14:	69742073 	.word	0x69742073
  404f18:	74206b63 	.word	0x74206b63
  404f1c:	6567206f 	.word	0x6567206f
  404f20:	75252074 	.word	0x75252074
  404f24:	20736d20 	.word	0x20736d20
  404f28:	6b636974 	.word	0x6b636974
  404f2c:	72657020 	.word	0x72657020
  404f30:	2e646f69 	.word	0x2e646f69
  404f34:	00000d0a 	.word	0x00000d0a
  404f38:	7262694c 	.word	0x7262694c
  404f3c:	20797261 	.word	0x20797261
  404f40:	756f5451 	.word	0x756f5451
  404f44:	00206863 	.word	0x00206863
  404f48:	7262694c 	.word	0x7262694c
  404f4c:	20797261 	.word	0x20797261
  404f50:	74614d51 	.word	0x74614d51
  404f54:	20786972 	.word	0x20786972
  404f58:	00000000 	.word	0x00000000
  404f5c:	20726f66 	.word	0x20726f66
  404f60:	0a434347 	.word	0x0a434347
  404f64:	0000000d 	.word	0x0000000d
  404f68:	20726f66 	.word	0x20726f66
  404f6c:	0a524149 	.word	0x0a524149
  404f70:	0000000d 	.word	0x0000000d
  404f74:	2078614d 	.word	0x2078614d
  404f78:	6e616843 	.word	0x6e616843
  404f7c:	736c656e 	.word	0x736c656e
  404f80:	0a642520 	.word	0x0a642520
  404f84:	0000000d 	.word	0x0000000d
  404f88:	70707573 	.word	0x70707573
  404f8c:	7374726f 	.word	0x7374726f
  404f90:	6c6e6f20 	.word	0x6c6e6f20
  404f94:	656b2079 	.word	0x656b2079
  404f98:	0a207379 	.word	0x0a207379
  404f9c:	0000000d 	.word	0x0000000d
  404fa0:	70707573 	.word	0x70707573
  404fa4:	7374726f 	.word	0x7374726f
  404fa8:	79656b20 	.word	0x79656b20
  404fac:	6e612073 	.word	0x6e612073
  404fb0:	6f722064 	.word	0x6f722064
  404fb4:	73726f74 	.word	0x73726f74
  404fb8:	696c732f 	.word	0x696c732f
  404fbc:	73726564 	.word	0x73726564
  404fc0:	00000d0a 	.word	0x00000d0a
  404fc4:	6978614d 	.word	0x6978614d
  404fc8:	206d756d 	.word	0x206d756d
  404fcc:	626d756e 	.word	0x626d756e
  404fd0:	6f207265 	.word	0x6f207265
  404fd4:	6f522066 	.word	0x6f522066
  404fd8:	73726f74 	.word	0x73726f74
  404fdc:	696c532f 	.word	0x696c532f
  404fe0:	73726564 	.word	0x73726564
  404fe4:	20642520 	.word	0x20642520
  404fe8:	00000d0a 	.word	0x00000d0a
  404fec:	73726556 	.word	0x73726556
  404ff0:	206e6f69 	.word	0x206e6f69
  404ff4:	58257830 	.word	0x58257830
  404ff8:	00000d0a 	.word	0x00000d0a
  404ffc:	696c6156 	.word	0x696c6156
  405000:	72502064 	.word	0x72502064
  405004:	20737365 	.word	0x20737365
  405008:	00000d0a 	.word	0x00000d0a
  40500c:	696c6156 	.word	0x696c6156
  405010:	65522064 	.word	0x65522064
  405014:	7361656c 	.word	0x7361656c
  405018:	0d0a2065 	.word	0x0d0a2065
  40501c:	00000000 	.word	0x00000000
  405020:	4b207055 	.word	0x4b207055
  405024:	50207965 	.word	0x50207965
  405028:	73736572 	.word	0x73736572
  40502c:	000d0a20 	.word	0x000d0a20
  405030:	4b207055 	.word	0x4b207055
  405034:	52207965 	.word	0x52207965
  405038:	61656c65 	.word	0x61656c65
  40503c:	0a206573 	.word	0x0a206573
  405040:	0000000d 	.word	0x0000000d
  405044:	6e776f44 	.word	0x6e776f44
  405048:	79654b20 	.word	0x79654b20
  40504c:	65725020 	.word	0x65725020
  405050:	0a207373 	.word	0x0a207373
  405054:	0000000d 	.word	0x0000000d
  405058:	6e776f44 	.word	0x6e776f44
  40505c:	79654b20 	.word	0x79654b20
  405060:	6c655220 	.word	0x6c655220
  405064:	65736165 	.word	0x65736165
  405068:	000d0a20 	.word	0x000d0a20
  40506c:	7466654c 	.word	0x7466654c
  405070:	79654b20 	.word	0x79654b20
  405074:	65725020 	.word	0x65725020
  405078:	0a207373 	.word	0x0a207373
  40507c:	0000000d 	.word	0x0000000d
  405080:	7466654c 	.word	0x7466654c
  405084:	79654b20 	.word	0x79654b20
  405088:	6c655220 	.word	0x6c655220
  40508c:	65736165 	.word	0x65736165
  405090:	000d0a20 	.word	0x000d0a20
  405094:	68676952 	.word	0x68676952
  405098:	654b2074 	.word	0x654b2074
  40509c:	72502079 	.word	0x72502079
  4050a0:	20737365 	.word	0x20737365
  4050a4:	00000d0a 	.word	0x00000d0a
  4050a8:	68676952 	.word	0x68676952
  4050ac:	654b2074 	.word	0x654b2074
  4050b0:	65522079 	.word	0x65522079
  4050b4:	7361656c 	.word	0x7361656c
  4050b8:	0d0a2065 	.word	0x0d0a2065
  4050bc:	00000000 	.word	0x00000000
  4050c0:	00206425 	.word	0x00206425
  4050c4:	202d462d 	.word	0x202d462d
  4050c8:	74737953 	.word	0x74737953
  4050cc:	206b6369 	.word	0x206b6369
  4050d0:	666e6f63 	.word	0x666e6f63
  4050d4:	72756769 	.word	0x72756769
  4050d8:	6f697461 	.word	0x6f697461
  4050dc:	7265206e 	.word	0x7265206e
  4050e0:	0a726f72 	.word	0x0a726f72
  4050e4:	0000000d 	.word	0x0000000d
  4050e8:	00000043 	.word	0x00000043

004050ec <_global_impure_ptr>:
  4050ec:	20000008                                ... 

004050f0 <zeroes.6869>:
  4050f0:	30303030 30303030 30303030 30303030     0000000000000000
  405100:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  405110:	00000000 33323130 37363534 62613938     ....0123456789ab
  405120:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00405130 <blanks.6868>:
  405130:	20202020 20202020 20202020 20202020                     

00405140 <_init>:
  405140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405142:	bf00      	nop
  405144:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405146:	bc08      	pop	{r3}
  405148:	469e      	mov	lr, r3
  40514a:	4770      	bx	lr

0040514c <__init_array_start>:
  40514c:	00403a09 	.word	0x00403a09

00405150 <__frame_dummy_init_array_entry>:
  405150:	004000f1                                ..@.

00405154 <_fini>:
  405154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405156:	bf00      	nop
  405158:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40515a:	bc08      	pop	{r3}
  40515c:	469e      	mov	lr, r3
  40515e:	4770      	bx	lr

00405160 <__fini_array_start>:
  405160:	004000cd 	.word	0x004000cd
